#ifdef ZZ_INCLUDE_CODE
ZZ_11A58:
	SP -= 32;
	EMU_Write32(SP + 24,RA); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	S1 = 0x2;
	S0 = A0 + 3;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 26032); //+ 0x65B0
	V0 = -4;
	if (V1)
	{
		S0 &= V0;
		ZZ_CLOCKCYCLES(11,0x80011AF4);
		goto ZZ_11A58_9C;
	}
	S0 &= V0;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 26008); //+ 0x6598
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26024); //+ 0x65A8
	V0 = V1 < V0;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(19,0x80011C18);
		goto ZZ_11A58_1C0;
	}
	V0 = -2;
	EMU_Write32(V1,V0);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26008); //+ 0x6598
	AT = 0x80050000;
	EMU_Write32(AT + 30652,V0); //+ 0x77BC
	V0 += 4;
	AT = 0x80050000;
	EMU_Write32(AT + 26008,V0); //+ 0x6598
	RA = 0x80011AD0; //ZZ_11A58_78
	A0 = S0;
	ZZ_CLOCKCYCLES(30,0x8001177C);
	goto ZZ_1177C;
ZZ_11A58_78:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x80011C78);
		goto ZZ_11A58_220;
	}
	V0 = R0;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 30652); //+ 0x77BC
	V0 = 0x1;
	AT = 0x80050000;
	EMU_Write32(AT + 26032,V0); //+ 0x65B0
	AT = 0x80050000;
	EMU_Write32(AT + 32568,V1); //+ 0x7F38
	ZZ_CLOCKCYCLES(9,0x80011AF4);
ZZ_11A58_9C:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 32568); //+ 0x7F38
	AT = 0x80050000;
	EMU_Write32(AT + 30652,A0); //+ 0x77BC
	ZZ_CLOCKCYCLES(7,0x80011C3C);
	goto ZZ_11A58_1E4;
ZZ_11A58_B8:
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 30652); //+ 0x77BC
	A0 = EMU_ReadU32(A1);
	V0 = V0 < A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x80011B5C);
		goto ZZ_11A58_104;
	}
	if ((int32_t)S0 >= 0)
	{
		V0 = S0;
		ZZ_CLOCKCYCLES(10,0x80011B3C);
		goto ZZ_11A58_E4;
	}
	V0 = S0;
	V0 = S0 + 3;
	ZZ_CLOCKCYCLES(11,0x80011B3C);
ZZ_11A58_E4:
	V0 = (int32_t)V0 >> 2;
	V0 <<= 2;
	V0 += A1;
	V1 = A0 - S0;
	V1 -= 4;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	EMU_Write32(A1,S0);
	ZZ_CLOCKCYCLES(8,0x80011C68);
	goto ZZ_11A58_210;
ZZ_11A58_104:
	V0 = A0 < S0;
	if (!V0)
	{
		V0 = A0 >> 2;
		ZZ_CLOCKCYCLES(3,0x80011C34);
		goto ZZ_11A58_1DC;
	}
	V0 = A0 >> 2;
	V0 <<= 2;
	V0 += A1;
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	A3 = -2;
	if (V1 != A3)
	{
		A2 = V0 + 4;
		ZZ_CLOCKCYCLES(9,0x80011BA4);
		goto ZZ_11A58_14C;
	}
	A2 = V0 + 4;
	EMU_Write32(A1,V1);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 30652); //+ 0x77BC
	V0 += 4;
	AT = 0x80050000;
	EMU_Write32(AT + 26008,V0); //+ 0x6598
	ZZ_CLOCKCYCLES(18,0x80011C34);
	goto ZZ_11A58_1DC;
ZZ_11A58_14C:
	V0 = V1 & 0x1;
	if (!V0)
	{
		V0 = A0 + 4;
		ZZ_CLOCKCYCLES(3,0x80011BC0);
		goto ZZ_11A58_168;
	}
	V0 = A0 + 4;
	V1 &= A3;
	V0 += V1;
	EMU_Write32(A1,V0);
	ZZ_CLOCKCYCLES(7,0x80011C34);
	goto ZZ_11A58_1DC;
ZZ_11A58_168:
	AT = 0x80050000;
	EMU_Write32(AT + 30652,A2); //+ 0x77BC
	ZZ_CLOCKCYCLES(4,0x80011C34);
	goto ZZ_11A58_1DC;
ZZ_11A58_178:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30652); //+ 0x77BC
	V1 = EMU_ReadU32(A0);
	V0 = -2;
	if (V1 == V0)
	{
		V0 = V1 >> 2;
		ZZ_CLOCKCYCLES(7,0x80011BFC);
		goto ZZ_11A58_1A4;
	}
	V0 = V1 >> 2;
	V0 <<= 2;
	V0 += A0;
	V0 += 4;
	ZZ_CLOCKCYCLES(11,0x80011C28);
	goto ZZ_11A58_1D0;
ZZ_11A58_1A4:
	S1 -= 1;
	if ((int32_t)S1 > 0)
	{
		ZZ_CLOCKCYCLES(3,0x80011C20);
		goto ZZ_11A58_1C8;
	}
	RA = 0x80011C10; //ZZ_11A58_1B8
	A0 = S0;
	ZZ_CLOCKCYCLES(5,0x8001177C);
	goto ZZ_1177C;
ZZ_11A58_1B8:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x80011C34);
		goto ZZ_11A58_1DC;
	}
	ZZ_CLOCKCYCLES(2,0x80011C18);
ZZ_11A58_1C0:
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x80011C78);
	goto ZZ_11A58_220;
ZZ_11A58_1C8:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 32568); //+ 0x7F38
	ZZ_CLOCKCYCLES(2,0x80011C28);
ZZ_11A58_1D0:
	AT = 0x80050000;
	EMU_Write32(AT + 30652,V0); //+ 0x77BC
	ZZ_CLOCKCYCLES(3,0x80011C34);
ZZ_11A58_1DC:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30652); //+ 0x77BC
	ZZ_CLOCKCYCLES(2,0x80011C3C);
ZZ_11A58_1E4:
	V1 = EMU_ReadU32(A0);
	V0 = V1 & 0x1;
	if (!V0)
	{
		V0 = S0 | 0x1;
		ZZ_CLOCKCYCLES(6,0x80011BD0);
		goto ZZ_11A58_178;
	}
	V0 = S0 | 0x1;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(8,0x80011B10);
		goto ZZ_11A58_B8;
	}
	V0 = -2;
	V0 &= V1;
	EMU_Write32(A0,V0);
	ZZ_CLOCKCYCLES(11,0x80011C68);
ZZ_11A58_210:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 30652); //+ 0x77BC
	V0 += 4;
	ZZ_CLOCKCYCLES(4,0x80011C78);
ZZ_11A58_220:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 32;
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80029A90,ZZ_29A58_38);
	ZZ_JUMPREGISTER(0x80029AA8,ZZ_29A58_50);
	ZZ_JUMPREGISTER(0x80011D54,ZZ_11D30_24);
	ZZ_JUMPREGISTER(0x80016CC4,ZZ_16C18_AC);
	ZZ_JUMPREGISTER(0x80015C2C,ZZ_15B58_D4);
	ZZ_JUMPREGISTER(0x8002F8F0,ZZ_2F8C4_2C);
	ZZ_JUMPREGISTER(0x80011CC8,ZZ_11CA0_28);
	ZZ_JUMPREGISTER(0x80011CF4,ZZ_11CA0_54);
	ZZ_JUMPREGISTER(0x80015DD8,ZZ_15B58_280);
	ZZ_JUMPREGISTER(0x80032368,ZZ_322CC_9C);
	ZZ_JUMPREGISTER(0x80015E68,ZZ_15B58_310);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80011A58,0x80011AD0,ZZ_11A58);
ZZ_MARK_TARGET(0x80011AD0,0x80011AF4,ZZ_11A58_78);
ZZ_MARK_TARGET(0x80011AF4,0x80011B10,ZZ_11A58_9C);
ZZ_MARK_TARGET(0x80011B10,0x80011B3C,ZZ_11A58_B8);
ZZ_MARK_TARGET(0x80011B3C,0x80011B5C,ZZ_11A58_E4);
ZZ_MARK_TARGET(0x80011B5C,0x80011BA4,ZZ_11A58_104);
ZZ_MARK_TARGET(0x80011BA4,0x80011BC0,ZZ_11A58_14C);
ZZ_MARK_TARGET(0x80011BC0,0x80011BD0,ZZ_11A58_168);
ZZ_MARK_TARGET(0x80011BD0,0x80011BFC,ZZ_11A58_178);
ZZ_MARK_TARGET(0x80011BFC,0x80011C10,ZZ_11A58_1A4);
ZZ_MARK_TARGET(0x80011C10,0x80011C18,ZZ_11A58_1B8);
ZZ_MARK_TARGET(0x80011C18,0x80011C20,ZZ_11A58_1C0);
ZZ_MARK_TARGET(0x80011C20,0x80011C28,ZZ_11A58_1C8);
ZZ_MARK_TARGET(0x80011C28,0x80011C34,ZZ_11A58_1D0);
ZZ_MARK_TARGET(0x80011C34,0x80011C3C,ZZ_11A58_1DC);
ZZ_MARK_TARGET(0x80011C3C,0x80011C68,ZZ_11A58_1E4);
ZZ_MARK_TARGET(0x80011C68,0x80011C78,ZZ_11A58_210);
ZZ_MARK_TARGET(0x80011C78,0x80011C8C,ZZ_11A58_220);
