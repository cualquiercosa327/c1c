#ifdef ZZ_INCLUDE_CODE
ZZ_2E0A0:
	SP -= 64;
	EMU_Write32(SP + 60,S3); //+ 0x3C
	S3 = A0;
	T4 = R0;
	T6 = R0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 8208); //+ 0xFFFFDFF0
	T5 = 0x80060000;
	T5 -= 12308;
	EMU_Write32(SP + 56,S2); //+ 0x38
	EMU_Write32(SP + 52,S1); //+ 0x34
	if ((int32_t)V0 <= 0)
	{
		EMU_Write32(SP + 48,S0); //+ 0x30
		ZZ_CLOCKCYCLES(13,0x8002E3D8);
		goto ZZ_2E0A0_338;
	}
	EMU_Write32(SP + 48,S0); //+ 0x30
	S2 = 0x1;
	S1 = 0x2;
	V0 = T4 << 3;
	ZZ_CLOCKCYCLES(16,0x8002E0E0);
ZZ_2E0A0_40:
	T0 = T5 + V0;
	V0 = EMU_ReadU16(T0);
	if (V0)
	{
		V0 >>= 2;
		ZZ_CLOCKCYCLES(5,0x8002E138);
		goto ZZ_2E0A0_98;
	}
	V0 >>= 2;
	V0 = EMU_ReadU16(T0 + 2); //+ 0x2
	T4 += 1;
	V0 <<= 8;
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU16(T0 + 4); //+ 0x4
	V1 = T4 << 3;
	V0 <<= 8;
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU16(T0 + 6); //+ 0x6
	T0 = T5 + V1;
	V0 <<= 8;
	EMU_Write32(SP + 32,V0); //+ 0x20
	S0 = EMU_ReadU16(T0 + 2); //+ 0x2
	T9 = EMU_ReadU16(T0 + 4); //+ 0x4
	T8 = EMU_ReadU16(T0 + 6); //+ 0x6
	ZZ_CLOCKCYCLES(22,0x8002E3C4);
	goto ZZ_2E0A0_324;
ZZ_2E0A0_98:
	V0 |= 0x1;
	if (!V0)
	{
		V0 &= 0xE;
		ZZ_CLOCKCYCLES(3,0x8002E150);
		goto ZZ_2E0A0_B0;
	}
	V0 &= 0xE;
	V0 >>= 1;
	V1 = V0 + 1;
	ZZ_CLOCKCYCLES(6,0x8002E154);
	goto ZZ_2E0A0_B4;
ZZ_2E0A0_B0:
	V1 = R0;
	ZZ_CLOCKCYCLES(1,0x8002E154);
ZZ_2E0A0_B4:
	V0 = 0x5;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	if (!V1)
	{
		ZZ_CLOCKCYCLES(5,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	if (!A1)
	{
		ZZ_CLOCKCYCLES(7,0x8002E180);
		goto ZZ_2E0A0_E0;
	}
	if (A1 == S2)
	{
		A3 = T9 & 0xFFFF;
		ZZ_CLOCKCYCLES(9,0x8002E190);
		goto ZZ_2E0A0_F0;
	}
	A3 = T9 & 0xFFFF;
	ZZ_CLOCKCYCLES(11,0x8002E19C);
	goto ZZ_2E0A0_FC;
ZZ_2E0A0_E0:
	if (V1 != S1)
	{
		ZZ_CLOCKCYCLES(2,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	A3 = T9 & 0xFFFF;
	ZZ_CLOCKCYCLES(4,0x8002E19C);
	goto ZZ_2E0A0_FC;
ZZ_2E0A0_F0:
	if (V1 == S1)
	{
		ZZ_CLOCKCYCLES(2,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	A3 = T9 & 0xFFFF;
	ZZ_CLOCKCYCLES(3,0x8002E19C);
ZZ_2E0A0_FC:
	V0 = EMU_ReadS16(T0 + 4); //+ 0x4
	V1 = EMU_ReadU32(T5 + 4108); //+ 0x100C
	A0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 <<= 4;
	V0 += V1;
	A0 = V0 - A0;
	V1 = T7 & 0xFFFF;
	V0 = (int32_t)V1 < (int32_t)A3;
	if (!V0)
	{
		EMU_Write32(SP + 4,A0); //+ 0x4
		ZZ_CLOCKCYCLES(10,0x8002E1C8);
		goto ZZ_2E0A0_128;
	}
	EMU_Write32(SP + 4,A0); //+ 0x4
	A3 = V1;
	ZZ_CLOCKCYCLES(11,0x8002E1C8);
ZZ_2E0A0_128:
	V0 = EMU_ReadU32(SP + 28); //+ 0x1C
	V0 = (int32_t)V0 >> A3;
	V1 = V0 + A0;
	if (!A1)
	{
		EMU_Write32(SP + 16,V1); //+ 0x10
		ZZ_CLOCKCYCLES(6,0x8002E1F0);
		goto ZZ_2E0A0_150;
	}
	EMU_Write32(SP + 16,V1); //+ 0x10
	if (A1 == S2)
	{
		ZZ_CLOCKCYCLES(8,0x8002E214);
		goto ZZ_2E0A0_174;
	}
	ZZ_CLOCKCYCLES(10,0x8002E21C);
	goto ZZ_2E0A0_17C;
ZZ_2E0A0_150:
	V0 = (int32_t)A0 < 25601;
	if (!V0)
	{
		V0 = 0xFFFE0000;
		ZZ_CLOCKCYCLES(3,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	V0 = 0xFFFE0000;
	V0 |= 0x7000;
	V0 = (int32_t)V1 < (int32_t)V0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x8002E21C);
		goto ZZ_2E0A0_17C;
	}
	ZZ_CLOCKCYCLES(9,0x8002E3C4);
	goto ZZ_2E0A0_324;
ZZ_2E0A0_174:
	if ((int32_t)V1 < 0)
	{
		ZZ_CLOCKCYCLES(2,0x8002E3C4);
		goto ZZ_2E0A0_324;
	}
	ZZ_CLOCKCYCLES(2,0x8002E21C);
ZZ_2E0A0_17C:
	V0 = EMU_ReadS16(T0 + 2); //+ 0x2
	V1 = EMU_ReadU32(T5 + 4104); //+ 0x1008
	A0 = EMU_ReadU32(A2);
	V0 <<= 4;
	V0 += V1;
	T1 = V0 - A0;
	EMU_Write32(SP,T1);
	V0 = EMU_ReadS16(T0 + 6); //+ 0x6
	V1 = EMU_ReadU32(T5 + 4112); //+ 0x1010
	A0 = EMU_ReadU32(A2 + 8); //+ 0x8
	V0 <<= 4;
	V0 += V1;
	T2 = V0 - A0;
	EMU_Write32(SP + 8,T2); //+ 0x8
	V0 = EMU_ReadU16(T0);
	V1 = S0 & 0xFFFF;
	T7 = V0 & 0x7;
	A0 = T7 & 0xFFFF;
	V0 = (int32_t)A0 < (int32_t)V1;
	if (!V0)
	{
		A3 = T8 & 0xFFFF;
		ZZ_CLOCKCYCLES(21,0x8002E274);
		goto ZZ_2E0A0_1D4;
	}
	A3 = T8 & 0xFFFF;
	V1 = A0;
	ZZ_CLOCKCYCLES(22,0x8002E274);
ZZ_2E0A0_1D4:
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V0 = (int32_t)V0 >> V1;
	T0 = V0 + T1;
	V0 = (int32_t)A0 < (int32_t)A3;
	if (!V0)
	{
		EMU_Write32(SP + 12,T0); //+ 0xC
		ZZ_CLOCKCYCLES(7,0x8002E294);
		goto ZZ_2E0A0_1F4;
	}
	EMU_Write32(SP + 12,T0); //+ 0xC
	A3 = A0;
	ZZ_CLOCKCYCLES(8,0x8002E294);
ZZ_2E0A0_1F4:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = T1 << 2;
	V0 = (int32_t)V0 >> A3;
	A0 = V0 + T2;
	if ((int32_t)V1 >= 0)
	{
		EMU_Write32(SP + 20,A0); //+ 0x14
		ZZ_CLOCKCYCLES(6,0x8002E2B0);
		goto ZZ_2E0A0_210;
	}
	EMU_Write32(SP + 20,A0); //+ 0x14
	V1 += 8191;
	ZZ_CLOCKCYCLES(7,0x8002E2B0);
ZZ_2E0A0_210:
	V0 = T0 << 2;
	if ((int32_t)V0 >= 0)
	{
		T3 = (int32_t)V1 >> 13;
		ZZ_CLOCKCYCLES(3,0x8002E2C0);
		goto ZZ_2E0A0_220;
	}
	T3 = (int32_t)V1 >> 13;
	V0 += 8191;
	ZZ_CLOCKCYCLES(4,0x8002E2C0);
ZZ_2E0A0_220:
	V1 = T2 << 2;
	if ((int32_t)V1 >= 0)
	{
		T1 = (int32_t)V0 >> 13;
		ZZ_CLOCKCYCLES(3,0x8002E2D0);
		goto ZZ_2E0A0_230;
	}
	T1 = (int32_t)V0 >> 13;
	V1 += 8191;
	ZZ_CLOCKCYCLES(4,0x8002E2D0);
ZZ_2E0A0_230:
	V0 = A0 << 2;
	if ((int32_t)V0 >= 0)
	{
		V1 = (int32_t)V1 >> 13;
		ZZ_CLOCKCYCLES(3,0x8002E2E0);
		goto ZZ_2E0A0_240;
	}
	V1 = (int32_t)V1 >> 13;
	V0 += 8191;
	ZZ_CLOCKCYCLES(4,0x8002E2E0);
ZZ_2E0A0_240:
	A0 = V1;
	T0 = (int32_t)V0 >> 13;
	V1 = T1 + 16;
	V0 = (int32_t)V1 < 32;
	if (!V0)
	{
		A3 = -1;
		ZZ_CLOCKCYCLES(6,0x8002E308);
		goto ZZ_2E0A0_268;
	}
	A3 = -1;
	if ((int32_t)V1 <= 0)
	{
		V0 = 0x20;
		ZZ_CLOCKCYCLES(8,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	V0 = 0x20;
	V0 = V0 - V1;
	A3 <<= V0;
	ZZ_CLOCKCYCLES(10,0x8002E308);
ZZ_2E0A0_268:
	V1 = T3 + 15;
	V0 = (int32_t)V1 < 32;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	if ((int32_t)V1 < 0)
	{
		V0 = 0x80000000;
		ZZ_CLOCKCYCLES(6,0x8002E32C);
		goto ZZ_2E0A0_28C;
	}
	V0 = 0x80000000;
	V0 = (int32_t)V0 >> V1;
	V0 = ~V0;
	A3 &= V0;
	ZZ_CLOCKCYCLES(9,0x8002E32C);
ZZ_2E0A0_28C:
	if (!A3)
	{
		ZZ_CLOCKCYCLES(2,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	A0 += 16;
	if ((int32_t)A0 >= 0)
	{
		T0 += 16;
		ZZ_CLOCKCYCLES(5,0x8002E344);
		goto ZZ_2E0A0_2A4;
	}
	T0 += 16;
	A0 = R0;
	ZZ_CLOCKCYCLES(6,0x8002E344);
ZZ_2E0A0_2A4:
	V0 = (int32_t)T0 < 33;
	if (V0)
	{
		V0 = (int32_t)A0 < 32;
		ZZ_CLOCKCYCLES(3,0x8002E354);
		goto ZZ_2E0A0_2B4;
	}
	V0 = (int32_t)A0 < 32;
	T0 = 0x20;
	ZZ_CLOCKCYCLES(4,0x8002E354);
ZZ_2E0A0_2B4:
	if (!V0)
	{
		V0 = A0 << 2;
		ZZ_CLOCKCYCLES(2,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	V0 = A0 << 2;
	V1 = EMU_ReadU32(GP + 760); //+ 0x2F8
	if (!S3)
	{
		V1 += V0;
		ZZ_CLOCKCYCLES(5,0x8002E398);
		goto ZZ_2E0A0_2F8;
	}
	V1 += V0;
	V0 = (int32_t)A0 < (int32_t)T0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	ZZ_CLOCKCYCLES(8,0x8002E374);
ZZ_2E0A0_2D4:
	V0 = EMU_ReadU32(V1);
	A0 += 1;
	V0 |= A3;
	EMU_Write32(V1,V0);
	V0 = (int32_t)A0 < (int32_t)T0;
	if (V0)
	{
		V1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002E374);
		goto ZZ_2E0A0_2D4;
	}
	V1 += 4;
	T6 += 1;
	ZZ_CLOCKCYCLES(9,0x8002E3C4);
	goto ZZ_2E0A0_324;
ZZ_2E0A0_2F8:
	V0 = (int32_t)A0 < (int32_t)T0;
	if (!V0)
	{
		A3 = ~A3;
		ZZ_CLOCKCYCLES(3,0x8002E3C0);
		goto ZZ_2E0A0_320;
	}
	A3 = ~A3;
	ZZ_CLOCKCYCLES(3,0x8002E3A4);
ZZ_2E0A0_304:
	V0 = EMU_ReadU32(V1);
	A0 += 1;
	V0 &= A3;
	EMU_Write32(V1,V0);
	V0 = (int32_t)A0 < (int32_t)T0;
	if (V0)
	{
		V1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002E3A4);
		goto ZZ_2E0A0_304;
	}
	V1 += 4;
	ZZ_CLOCKCYCLES(7,0x8002E3C0);
ZZ_2E0A0_320:
	T6 += 1;
	ZZ_CLOCKCYCLES(1,0x8002E3C4);
ZZ_2E0A0_324:
	V0 = EMU_ReadU32(T5 + 4100); //+ 0x1004
	T4 += 1;
	V0 = (int32_t)T4 < (int32_t)V0;
	if (V0)
	{
		V0 = T4 << 3;
		ZZ_CLOCKCYCLES(5,0x8002E0E0);
		goto ZZ_2E0A0_40;
	}
	V0 = T4 << 3;
	ZZ_CLOCKCYCLES(5,0x8002E3D8);
ZZ_2E0A0_338:
	V0 = T6;
	S3 = EMU_ReadU32(SP + 60); //+ 0x3C
	S2 = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8002E76C,ZZ_2E3F8_374);
	ZZ_JUMPREGISTER(0x8002E784,ZZ_2E3F8_38C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002E0A0,0x8002E0E0,ZZ_2E0A0);
ZZ_MARK_TARGET(0x8002E0E0,0x8002E138,ZZ_2E0A0_40);
ZZ_MARK_TARGET(0x8002E138,0x8002E150,ZZ_2E0A0_98);
ZZ_MARK_TARGET(0x8002E150,0x8002E154,ZZ_2E0A0_B0);
ZZ_MARK_TARGET(0x8002E154,0x8002E180,ZZ_2E0A0_B4);
ZZ_MARK_TARGET(0x8002E180,0x8002E190,ZZ_2E0A0_E0);
ZZ_MARK_TARGET(0x8002E190,0x8002E19C,ZZ_2E0A0_F0);
ZZ_MARK_TARGET(0x8002E19C,0x8002E1C8,ZZ_2E0A0_FC);
ZZ_MARK_TARGET(0x8002E1C8,0x8002E1F0,ZZ_2E0A0_128);
ZZ_MARK_TARGET(0x8002E1F0,0x8002E214,ZZ_2E0A0_150);
ZZ_MARK_TARGET(0x8002E214,0x8002E21C,ZZ_2E0A0_174);
ZZ_MARK_TARGET(0x8002E21C,0x8002E274,ZZ_2E0A0_17C);
ZZ_MARK_TARGET(0x8002E274,0x8002E294,ZZ_2E0A0_1D4);
ZZ_MARK_TARGET(0x8002E294,0x8002E2B0,ZZ_2E0A0_1F4);
ZZ_MARK_TARGET(0x8002E2B0,0x8002E2C0,ZZ_2E0A0_210);
ZZ_MARK_TARGET(0x8002E2C0,0x8002E2D0,ZZ_2E0A0_220);
ZZ_MARK_TARGET(0x8002E2D0,0x8002E2E0,ZZ_2E0A0_230);
ZZ_MARK_TARGET(0x8002E2E0,0x8002E308,ZZ_2E0A0_240);
ZZ_MARK_TARGET(0x8002E308,0x8002E32C,ZZ_2E0A0_268);
ZZ_MARK_TARGET(0x8002E32C,0x8002E344,ZZ_2E0A0_28C);
ZZ_MARK_TARGET(0x8002E344,0x8002E354,ZZ_2E0A0_2A4);
ZZ_MARK_TARGET(0x8002E354,0x8002E374,ZZ_2E0A0_2B4);
ZZ_MARK_TARGET(0x8002E374,0x8002E398,ZZ_2E0A0_2D4);
ZZ_MARK_TARGET(0x8002E398,0x8002E3A4,ZZ_2E0A0_2F8);
ZZ_MARK_TARGET(0x8002E3A4,0x8002E3C0,ZZ_2E0A0_304);
ZZ_MARK_TARGET(0x8002E3C0,0x8002E3C4,ZZ_2E0A0_320);
ZZ_MARK_TARGET(0x8002E3C4,0x8002E3D8,ZZ_2E0A0_324);
ZZ_MARK_TARGET(0x8002E3D8,0x8002E3F8,ZZ_2E0A0_338);
