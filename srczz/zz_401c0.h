#ifdef ZZ_INCLUDE_CODE
ZZ_401C0:
	SP -= 32;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = 0x80050000;
	S1 += 19054;
	EMU_Write32(SP + 24,RA); //+ 0x18
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU8(S1);
	V0 = V0 < 2;
	if (V0)
	{
		S0 = A0;
		ZZ_CLOCKCYCLES(11,0x80040208);
		goto ZZ_401C0_48;
	}
	S0 = A0;
	A0 = 0x80010000;
	A0 += 4676;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19048); //+ 0x4A68
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x80040208; //ZZ_401C0_48
	A1 = S0;
	ZZ_CLOCKCYCLES_JR(18);
	ZZ_JUMPREGISTER(0x8003D730,ZZ_3D730);
	ZZ_JUMPREGISTER_END();
ZZ_401C0_48:
	if (S0)
	{
		A0 = S1 + 106;
		ZZ_CLOCKCYCLES(2,0x8004021C);
		goto ZZ_401C0_5C;
	}
	A0 = S1 + 106;
	A1 = -1;
	RA = 0x8004021C; //ZZ_401C0_5C
	A2 = 0x14;
	ZZ_CLOCKCYCLES(5,0x80042AE0);
	goto ZZ_42AE0;
ZZ_401C0_5C:
	A0 = 0x3000000;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19044); //+ 0x4A64
	if (!S0)
	{
		A0 |= 0x1;
		ZZ_CLOCKCYCLES(5,0x80040234);
		goto ZZ_401C0_74;
	}
	A0 |= 0x1;
	A0 = 0x3000000;
	ZZ_CLOCKCYCLES(6,0x80040234);
ZZ_401C0_74:
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x80040244; //ZZ_401C0_84
	ZZ_CLOCKCYCLES_JR(4);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004023C)
	ZZ_JUMPREGISTER_END();
ZZ_401C0_84:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x80016BF0,ZZ_16A6C_184);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800401C0,0x80040208,ZZ_401C0);
ZZ_MARK_TARGET(0x80040208,0x8004021C,ZZ_401C0_48);
ZZ_MARK_TARGET(0x8004021C,0x80040234,ZZ_401C0_5C);
ZZ_MARK_TARGET(0x80040234,0x80040244,ZZ_401C0_74);
ZZ_MARK_TARGET(0x80040244,0x8004025C,ZZ_401C0_84);
