#ifdef ZZ_INCLUDE_CODE
ZZ_2D384:
	SP -= 104;
	EMU_Write32(SP + 88,S2); //+ 0x58
	S2 = A0;
	EMU_Write32(SP + 92,S3); //+ 0x5C
	S3 = A1;
	EMU_Write32(SP + 80,S0); //+ 0x50
	S0 = A2;
	A0 = R0;
	V1 = SP + 32;
	EMU_Write32(SP + 100,RA); //+ 0x64
	EMU_Write32(SP + 96,S4); //+ 0x60
	EMU_Write32(SP + 84,S1); //+ 0x54
	ZZ_CLOCKCYCLES(12,0x8002D3B4);
ZZ_2D384_30:
	V0 = EMU_ReadU32(A3);
	A3 += 4;
	A0 += 1;
	EMU_Write32(V1 + 16,V0); //+ 0x10
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		V1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002D3B4);
		goto ZZ_2D384_30;
	}
	V1 += 4;
	A0 = R0;
	A1 = SP + 32;
	A2 = S0;
	ZZ_CLOCKCYCLES(10,0x8002D3DC);
ZZ_2D384_58:
	V0 = EMU_ReadU32(A2);
	A2 += 4;
	V1 = EMU_ReadU32(A1 + 16); //+ 0x10
	A0 += 1;
	V0 += V1;
	EMU_Write32(A1,V0);
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(9,0x8002D3DC);
		goto ZZ_2D384_58;
	}
	A1 += 4;
	A0 = S2;
	A1 = S0;
	A2 = SP + 32;
	A3 = S3;
	V0 = SP + 64;
	RA = 0x8002D41C; //ZZ_2D384_98
	EMU_Write32(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(16,0x8002C8EC);
	goto ZZ_2C8EC;
ZZ_2D384_98:
	A0 = S0;
	A1 = S2;
	RA = 0x8002D42C; //ZZ_2D384_A8
	A2 = S3;
	ZZ_CLOCKCYCLES(4,0x8002DF50);
	goto ZZ_2DF50;
ZZ_2D384_A8:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = EMU_ReadU32(S0);
	V0 = V0 - V1;
	A0 = V0 << 2;
	if ((int32_t)A0 >= 0)
	{
		ZZ_CLOCKCYCLES(7,0x8002D44C);
		goto ZZ_2D384_C8;
	}
	A0 += 8191;
	ZZ_CLOCKCYCLES(8,0x8002D44C);
ZZ_2D384_C8:
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(S0 + 8); //+ 0x8
	V0 = V0 - V1;
	V1 = V0 << 2;
	V0 = (int32_t)A0 >> 13;
	if ((int32_t)V1 >= 0)
	{
		S1 = V0 + 16;
		ZZ_CLOCKCYCLES(8,0x8002D470);
		goto ZZ_2D384_EC;
	}
	S1 = V0 + 16;
	V1 += 8191;
	ZZ_CLOCKCYCLES(9,0x8002D470);
ZZ_2D384_EC:
	A0 = S0;
	A1 = S1;
	V0 = (int32_t)V1 >> 13;
	S4 = V0 + 16;
	A2 = S4;
	A3 = SP + 68;
	V0 = SP + 72;
	EMU_Write32(SP + 16,V0); //+ 0x10
	EMU_Write32(SP + 20,S2); //+ 0x14
	RA = 0x8002D49C; //ZZ_2D384_118
	EMU_Write32(SP + 24,R0); //+ 0x18
	ZZ_CLOCKCYCLES(11,0x8002E3F8);
	goto ZZ_2E3F8;
ZZ_2D384_118:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002D4E0);
		goto ZZ_2D384_15C;
	}
	V0 = EMU_ReadU32(SP + 68); //+ 0x44
	A0 = EMU_ReadU32(S0);
	V1 = EMU_ReadU32(SP + 72); //+ 0x48
	V0 -= 16;
	V0 <<= 13;
	V0 = (int32_t)V0 >> 2;
	V0 += A0;
	V1 -= 16;
	V1 <<= 13;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	V1 = (int32_t)V1 >> 2;
	V1 += V0;
	EMU_Write32(SP + 40,V1); //+ 0x28
	ZZ_CLOCKCYCLES(17,0x8002D4F8);
	goto ZZ_2D384_174;
ZZ_2D384_15C:
	V0 = EMU_ReadU32(S0);
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	EMU_Write32(SP + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(6,0x8002D4F8);
ZZ_2D384_174:
	V0 = EMU_ReadU32(S3 + 4172); //+ 0x104C
	V0 += 1;
	EMU_Write32(S3 + 4172,V0); //+ 0x104C
	V0 = 0x10;
	if (S1 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x8002D51C);
		goto ZZ_2D384_198;
	}
	if (S4 == S1)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(9,0x8002D550);
		goto ZZ_2D384_1CC;
	}
	A0 = S2;
	ZZ_CLOCKCYCLES(9,0x8002D51C);
ZZ_2D384_198:
	V0 = EMU_ReadU32(SP + 68); //+ 0x44
	if (S1 != V0)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(4,0x8002D550);
		goto ZZ_2D384_1CC;
	}
	A0 = S2;
	V0 = EMU_ReadU32(SP + 72); //+ 0x48
	if (S4 != V0)
	{
		S1 = SP + 32;
		ZZ_CLOCKCYCLES(8,0x8002D554);
		goto ZZ_2D384_1D0;
	}
	S1 = SP + 32;
	V0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V0 |= 0x100;
	EMU_Write32(S2 + 200,V0); //+ 0xC8
	A0 = S2;
	ZZ_CLOCKCYCLES(13,0x8002D550);
ZZ_2D384_1CC:
	S1 = SP + 32;
	ZZ_CLOCKCYCLES(1,0x8002D554);
ZZ_2D384_1D0:
	A1 = S1;
	RA = 0x8002D560; //ZZ_2D384_1DC
	A2 = S3;
	ZZ_CLOCKCYCLES(3,0x8002CD9C);
	goto ZZ_2CD9C;
ZZ_2D384_1DC:
	V1 = 0xC4650000;
	V1 |= 0x3601;
	A0 = V0;
	if (A0 != V1)
	{
		ZZ_CLOCKCYCLES(5,0x8002D57C);
		goto ZZ_2D384_1F8;
	}
	EMU_Write32(S3 + 4156,R0); //+ 0x103C
	ZZ_CLOCKCYCLES(7,0x8002D580);
	goto ZZ_2D384_1FC;
ZZ_2D384_1F8:
	EMU_Write32(S3 + 4156,A0); //+ 0x103C
	ZZ_CLOCKCYCLES(1,0x8002D580);
ZZ_2D384_1FC:
	V0 = 0xC4650000;
	V0 |= 0x3601;
	if (A0 == V0)
	{
		V0 = 0x20000;
		ZZ_CLOCKCYCLES(4,0x8002D5E0);
		goto ZZ_2D384_25C;
	}
	V0 = 0x20000;
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 |= 0x9900;
	V1 += V0;
	V0 = A0 - 1;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		V1 = 0xFFFD0000;
		ZZ_CLOCKCYCLES(11,0x8002D5E0);
		goto ZZ_2D384_25C;
	}
	V1 = 0xFFFD0000;
	V1 |= 0x66FF;
	V0 = EMU_ReadU32(S0 + 4); //+ 0x4
	V1 += A0;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(17,0x8002D5C8);
		goto ZZ_2D384_244;
	}
	EMU_Write32(S1 + 4,V1); //+ 0x4
	ZZ_CLOCKCYCLES(18,0x8002D5C8);
ZZ_2D384_244:
	V0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V1 = EMU_ReadU32(S2 + 168); //+ 0xA8
	V0 |= 0x80;
	if ((int32_t)V1 <= 0)
	{
		EMU_Write32(S2 + 200,V0); //+ 0xC8
		ZZ_CLOCKCYCLES(5,0x8002D5E0);
		goto ZZ_2D384_25C;
	}
	EMU_Write32(S2 + 200,V0); //+ 0xC8
	EMU_Write32(S2 + 168,R0); //+ 0xA8
	ZZ_CLOCKCYCLES(6,0x8002D5E0);
ZZ_2D384_25C:
	A0 = S2;
	RA = 0x8002D5EC; //ZZ_2D384_268
	A1 = SP + 32;
	ZZ_CLOCKCYCLES(3,0x8002D18C);
	goto ZZ_2D18C;
ZZ_2D384_268:
	A0 = R0;
	A1 = EMU_ReadU32(SP + 120); //+ 0x78
	V1 = SP + 32;
	ZZ_CLOCKCYCLES(3,0x8002D5F8);
ZZ_2D384_274:
	V0 = EMU_ReadU32(V1);
	V1 += 4;
	A0 += 1;
	EMU_Write32(A1,V0);
	V0 = (int32_t)A0 < 3;
	if (V0)
	{
		A1 += 4;
		ZZ_CLOCKCYCLES(7,0x8002D5F8);
		goto ZZ_2D384_274;
	}
	A1 += 4;
	RA = EMU_ReadU32(SP + 100); //+ 0x64
	S4 = EMU_ReadU32(SP + 96); //+ 0x60
	S3 = EMU_ReadU32(SP + 92); //+ 0x5C
	S2 = EMU_ReadU32(SP + 88); //+ 0x58
	S1 = EMU_ReadU32(SP + 84); //+ 0x54
	S0 = EMU_ReadU32(SP + 80); //+ 0x50
	SP += 104;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(16);
	ZZ_JUMPREGISTER(0x8002C328,ZZ_2C184_1A4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002D384,0x8002D3B4,ZZ_2D384);
ZZ_MARK_TARGET(0x8002D3B4,0x8002D3DC,ZZ_2D384_30);
ZZ_MARK_TARGET(0x8002D3DC,0x8002D41C,ZZ_2D384_58);
ZZ_MARK_TARGET(0x8002D41C,0x8002D42C,ZZ_2D384_98);
ZZ_MARK_TARGET(0x8002D42C,0x8002D44C,ZZ_2D384_A8);
ZZ_MARK_TARGET(0x8002D44C,0x8002D470,ZZ_2D384_C8);
ZZ_MARK_TARGET(0x8002D470,0x8002D49C,ZZ_2D384_EC);
ZZ_MARK_TARGET(0x8002D49C,0x8002D4E0,ZZ_2D384_118);
ZZ_MARK_TARGET(0x8002D4E0,0x8002D4F8,ZZ_2D384_15C);
ZZ_MARK_TARGET(0x8002D4F8,0x8002D51C,ZZ_2D384_174);
ZZ_MARK_TARGET(0x8002D51C,0x8002D550,ZZ_2D384_198);
ZZ_MARK_TARGET(0x8002D550,0x8002D554,ZZ_2D384_1CC);
ZZ_MARK_TARGET(0x8002D554,0x8002D560,ZZ_2D384_1D0);
ZZ_MARK_TARGET(0x8002D560,0x8002D57C,ZZ_2D384_1DC);
ZZ_MARK_TARGET(0x8002D57C,0x8002D580,ZZ_2D384_1F8);
ZZ_MARK_TARGET(0x8002D580,0x8002D5C8,ZZ_2D384_1FC);
ZZ_MARK_TARGET(0x8002D5C8,0x8002D5E0,ZZ_2D384_244);
ZZ_MARK_TARGET(0x8002D5E0,0x8002D5EC,ZZ_2D384_25C);
ZZ_MARK_TARGET(0x8002D5EC,0x8002D5F8,ZZ_2D384_268);
ZZ_MARK_TARGET(0x8002D5F8,0x8002D638,ZZ_2D384_274);
