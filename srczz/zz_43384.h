#ifdef ZZ_INCLUDE_CODE
ZZ_43384:
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	V0 = 0x2;
	if (S0 != V0)
	{
		EMU_Write32(SP + 20,RA); //+ 0x14
		ZZ_CLOCKCYCLES(6,0x800433AC);
		goto ZZ_43384_28;
	}
	EMU_Write32(SP + 20,RA); //+ 0x14
	RA = 0x800433A4; //ZZ_43384_20
	ZZ_CLOCKCYCLES(8,0x80044E1C);
	goto ZZ_44E1C;
ZZ_43384_20:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x800433DC);
	goto ZZ_43384_58;
ZZ_43384_28:
	RA = 0x800433B4; //ZZ_43384_30
	ZZ_CLOCKCYCLES(2,0x80044E8C);
	goto ZZ_44E8C;
ZZ_43384_30:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x800433DC);
		goto ZZ_43384_58;
	}
	V0 = R0;
	V0 = 0x1;
	if (S0 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x800433DC);
		goto ZZ_43384_58;
	}
	RA = 0x800433D0; //ZZ_43384_4C
	ZZ_CLOCKCYCLES(7,0x80044D28);
	goto ZZ_44D28;
ZZ_43384_4C:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x800433DC);
		goto ZZ_43384_58;
	}
	V0 = R0;
	V0 = 0x1;
	ZZ_CLOCKCYCLES(3,0x800433DC);
ZZ_43384_58:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80043264,ZZ_4324C_18);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80043384,0x800433A4,ZZ_43384);
ZZ_MARK_TARGET(0x800433A4,0x800433AC,ZZ_43384_20);
ZZ_MARK_TARGET(0x800433AC,0x800433B4,ZZ_43384_28);
ZZ_MARK_TARGET(0x800433B4,0x800433D0,ZZ_43384_30);
ZZ_MARK_TARGET(0x800433D0,0x800433DC,ZZ_43384_4C);
ZZ_MARK_TARGET(0x800433DC,0x800433F0,ZZ_43384_58);
