#ifdef ZZ_INCLUDE_CODE
ZZ_253A0:
	SP -= 32;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15048); //+ 0xFFFFC538
	V1 = 0x63960000;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	AT = 0x80060000;
	EMU_Write32(AT + 6704,R0); //+ 0x1A30
	V0 = EMU_ReadU32(V0);
	V1 |= 0x347F;
	if (V0 == V1)
	{
		A1 = R0;
		ZZ_CLOCKCYCLES(14,0x800255D0);
		goto ZZ_253A0_230;
	}
	A1 = R0;
	A0 = 0x80060000;
	A0 -= 168;
	V0 = 0xFFFF;
	EMU_Write32(GP + 744,R0); //+ 0x2E8
	AT = 0x80050000;
	EMU_Write32(AT + 26344,R0); //+ 0x66E8
	AT = 0x80060000;
	EMU_Write32(AT + 6300,V0); //+ 0x189C
	AT = 0x80060000;
	EMU_Write32(AT + 6320,V0); //+ 0x18B0
	RA = 0x80025408; //ZZ_253A0_68
	A2 = 0x4C0;
	ZZ_CLOCKCYCLES(26,0x8003D720);
	goto ZZ_3D720;
ZZ_253A0_68:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	A0 = EMU_ReadU32(V0 + 4); //+ 0x4
	RA = 0x80025420; //ZZ_253A0_80
	S1 = R0;
	ZZ_CLOCKCYCLES(6,0x8001B3F0);
	goto ZZ_1B3F0;
ZZ_253A0_80:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 15060); //+ 0xFFFFC52C
	V0 = 0x11;
	if (V1 == V0)
	{
		S0 = 0x2;
		ZZ_CLOCKCYCLES(5,0x80025444);
		goto ZZ_253A0_A4;
	}
	S0 = 0x2;
	V0 = 0x1E;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(8,0x80025444);
		goto ZZ_253A0_A4;
	}
	S0 = 0x1;
	ZZ_CLOCKCYCLES(9,0x80025444);
ZZ_253A0_A4:
	RA = 0x8002544C; //ZZ_253A0_AC
	ZZ_CLOCKCYCLES(2,0x80017790);
	goto ZZ_17790;
ZZ_253A0_AC:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 15060); //+ 0xFFFFC52C
	V0 = 0x19;
	if (V1 != V0)
	{
		V0 = 0x200;
		ZZ_CLOCKCYCLES(5,0x800254A4);
		goto ZZ_253A0_104;
	}
	V0 = 0x200;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 6352); //+ 0x18D0
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x800254A4);
		goto ZZ_253A0_104;
	}
	V0 = EMU_ReadU32(GP + 152); //+ 0x98
	if (V0)
	{
		ZZ_CLOCKCYCLES(14,0x800254A4);
		goto ZZ_253A0_104;
	}
	A0 = 0x80050000;
	A0 += 25752;
	RA = 0x80025494; //ZZ_253A0_F4
	ZZ_CLOCKCYCLES(18,0x80012660);
	goto ZZ_12660;
ZZ_253A0_F4:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 15044); //+ 0xFFFFC53C
	EMU_Write32(V1 + 8,V0); //+ 0x8
	ZZ_CLOCKCYCLES(4,0x800254A4);
ZZ_253A0_104:
	V1 = EMU_ReadU32(GP + 148); //+ 0x94
	V0 = 0x1;
	if (V1 != V0)
	{
		A1 = 0x1;
		ZZ_CLOCKCYCLES(4,0x800254EC);
		goto ZZ_253A0_14C;
	}
	A1 = 0x1;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 15044); //+ 0xFFFFC53C
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31128); //+ 0x7998
	EMU_Write32(V1 + 8,V0); //+ 0x8
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 15044); //+ 0xFFFFC53C
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31132); //+ 0x799C
	EMU_Write32(GP + 148,R0); //+ 0x94
	EMU_Write32(V1 + 12,V0); //+ 0xC
	S1 = 0x80050000;
	S1 = EMU_ReadU32(S1 + 31136); //+ 0x79A0
	ZZ_CLOCKCYCLES(18,0x800254EC);
ZZ_253A0_14C:
	S2 = 0x80060000;
	S2 -= 15044;
	A0 = EMU_ReadU32(S2);
	A2 = S0;
	RA = 0x80025504; //ZZ_253A0_164
	A0 += 8;
	ZZ_CLOCKCYCLES(6,0x80015118);
	goto ZZ_15118;
ZZ_253A0_164:
	V1 = 0x63960000;
	V1 |= 0x347F;
	A0 = 0x80030000;
	A0 = EMU_ReadU32(A0 + 17696); //+ 0x4520
	S0 = V0;
	AT = 0x80050000;
	EMU_Write32(AT + 26288,V1); //+ 0x66B0
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 6352); //+ 0x18D0
	V0 = 0x600;
	AT = 0x80050000;
	EMU_Write32(AT + 30996,R0); //+ 0x7914
	AT = 0x80050000;
	EMU_Write32(AT + 31004,R0); //+ 0x791C
	AT = 0x80050000;
	EMU_Write32(AT + 31008,R0); //+ 0x7920
	AT = 0x80050000;
	EMU_Write8(AT + 31080,R0); //+ 0x7968
	AT = 0x80050000;
	EMU_Write8(AT + 31081,R0); //+ 0x7969
	AT = 0x80050000;
	EMU_Write8(AT + 31082,R0); //+ 0x796A
	AT = 0x80050000;
	EMU_Write8(AT + 31083,R0); //+ 0x796B
	AT = 0x80050000;
	EMU_Write32(AT + 31088,A0); //+ 0x7970
	if (V1 != V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(28,0x80025588);
		goto ZZ_253A0_1E8;
	}
	A0 = S0;
	A0 = 0x80050000;
	A0 += 26288;
	RA = 0x80025584; //ZZ_253A0_1E4
	ZZ_CLOCKCYCLES(32,0x8002EABC);
	goto ZZ_2EABC;
ZZ_253A0_1E4:
	A0 = S0;
	ZZ_CLOCKCYCLES(1,0x80025588);
ZZ_253A0_1E8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	V1 = EMU_ReadU32(A0 + 16); //+ 0x10
	V0 = EMU_ReadU32(V0 + 12); //+ 0xC
	V1 = EMU_ReadU32(V1 + 516); //+ 0x204
	A2 = S1;
	V0 += V1;
	V0 <<= 2;
	V0 += A0;
	A1 = EMU_ReadU32(V0 + 16); //+ 0x10
	RA = 0x800255B8; //ZZ_253A0_218
	A3 = R0;
	ZZ_CLOCKCYCLES(12,0x80025A60);
	goto ZZ_25A60;
ZZ_253A0_218:
	A0 = EMU_ReadU32(S2);
	A1 = 0x1;
	RA = 0x800255C8; //ZZ_253A0_228
	A0 += 8;
	ZZ_CLOCKCYCLES(4,0x80015458);
	goto ZZ_15458;
ZZ_253A0_228:
	ZZ_CLOCKCYCLES(2,0x800255E0);
	goto ZZ_253A0_240;
ZZ_253A0_230:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	EMU_Write32(V0,R0);
	ZZ_CLOCKCYCLES(4,0x800255E0);
ZZ_253A0_240:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 25600); //+ 0x6400
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80025604);
		goto ZZ_253A0_264;
	}
	RA = 0x800255FC; //ZZ_253A0_25C
	A0 = 0x1;
	ZZ_CLOCKCYCLES(7,0x8002EC68);
	goto ZZ_2EC68;
ZZ_253A0_25C:
	RA = 0x80025604; //ZZ_253A0_264
	A0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x8002EBB4);
	goto ZZ_2EBB4;
ZZ_253A0_264:
	EMU_Write32(GP + 152,R0); //+ 0x98
	V0 = -255;
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x800163E8,ZZ_15B58_890);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800253A0,0x80025408,ZZ_253A0);
ZZ_MARK_TARGET(0x80025408,0x80025420,ZZ_253A0_68);
ZZ_MARK_TARGET(0x80025420,0x80025444,ZZ_253A0_80);
ZZ_MARK_TARGET(0x80025444,0x8002544C,ZZ_253A0_A4);
ZZ_MARK_TARGET(0x8002544C,0x80025494,ZZ_253A0_AC);
ZZ_MARK_TARGET(0x80025494,0x800254A4,ZZ_253A0_F4);
ZZ_MARK_TARGET(0x800254A4,0x800254EC,ZZ_253A0_104);
ZZ_MARK_TARGET(0x800254EC,0x80025504,ZZ_253A0_14C);
ZZ_MARK_TARGET(0x80025504,0x80025584,ZZ_253A0_164);
ZZ_MARK_TARGET(0x80025584,0x80025588,ZZ_253A0_1E4);
ZZ_MARK_TARGET(0x80025588,0x800255B8,ZZ_253A0_1E8);
ZZ_MARK_TARGET(0x800255B8,0x800255C8,ZZ_253A0_218);
ZZ_MARK_TARGET(0x800255C8,0x800255D0,ZZ_253A0_228);
ZZ_MARK_TARGET(0x800255D0,0x800255E0,ZZ_253A0_230);
ZZ_MARK_TARGET(0x800255E0,0x800255FC,ZZ_253A0_240);
ZZ_MARK_TARGET(0x800255FC,0x80025604,ZZ_253A0_25C);
ZZ_MARK_TARGET(0x80025604,0x80025628,ZZ_253A0_264);
