#ifdef ZZ_INCLUDE_CODE
ZZ_50868:
	SP -= 24;
	EMU_Write32(SP + 20,RA); //+ 0x14
	V0 = A0 & 0xFFFF;
	V0 = V0 < 16;
	if (!V0)
	{
		EMU_Write32(SP + 16,S0); //+ 0x10
		ZZ_CLOCKCYCLES(6,0x800508D8);
		goto ZZ_50868_70;
	}
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = A0 << 16;
	S0 = (int32_t)V0 >> 16;
	AT = 0x80060000;
	AT += S0;
	V1 = EMU_ReadU8(AT - 6792); //+ 0xFFFFE578
	V0 = 0x1;
	if (V1 != V0)
	{
		V0 = S0 << 2;
		ZZ_CLOCKCYCLES(14,0x800508D8);
		goto ZZ_50868_70;
	}
	V0 = S0 << 2;
	AT = 0x80060000;
	AT += V0;
	A0 = EMU_ReadU32(AT + 3312); //+ 0xCF0
	RA = 0x800508B4; //ZZ_50868_4C
	ZZ_CLOCKCYCLES(19,0x800508E8);
	goto ZZ_508E8;
ZZ_50868_4C:
	AT = 0x80060000;
	AT += S0;
	EMU_Write8(AT - 6792,R0); //+ 0xFFFFE578
	V0 = 0x80060000;
	V0 = EMU_ReadU16(V0 + 3304); //+ 0xCE8
	V0 -= 1;
	AT = 0x80060000;
	EMU_Write16(AT + 3304,V0); //+ 0xCE8
	ZZ_CLOCKCYCLES(9,0x800508D8);
ZZ_50868_70:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 24;
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x80031A28,ZZ_319DC_4C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80050868,0x800508B4,ZZ_50868);
ZZ_MARK_TARGET(0x800508B4,0x800508D8,ZZ_50868_4C);
ZZ_MARK_TARGET(0x800508D8,0x800508E8,ZZ_50868_70);
