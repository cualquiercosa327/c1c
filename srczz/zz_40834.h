#ifdef ZZ_INCLUDE_CODE
ZZ_40834:
	SP -= 32;
	EMU_Write32(SP + 24,S2); //+ 0x18
	S2 = 0x80050000;
	S2 += 19054;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU8(S2);
	V0 = V0 < 2;
	if (V0)
	{
		S1 = A0;
		ZZ_CLOCKCYCLES(12,0x80040880);
		goto ZZ_40834_4C;
	}
	S1 = A0;
	A0 = 0x80010000;
	A0 += 4868;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19048); //+ 0x4A68
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x80040880; //ZZ_40834_4C
	A1 = S1;
	ZZ_CLOCKCYCLES_JR(19);
	ZZ_JUMPREGISTER(0x8003D730,ZZ_3D730);
	ZZ_JUMPREGISTER_END();
ZZ_40834_4C:
	S0 = S1 + 28;
	A0 = S0;
	RA = 0x80040890; //ZZ_40834_5C
	A1 = S1;
	ZZ_CLOCKCYCLES(4,0x800410AC);
	goto ZZ_410AC;
ZZ_40834_5C:
	A0 = 0xFF0000;
	A0 |= 0xFFFF;
	A1 = S0;
	A2 = 0x40;
	V0 = EMU_ReadU32(S1 + 28); //+ 0x1C
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19044); //+ 0x4A64
	V0 |= A0;
	EMU_Write32(S1 + 28,V0); //+ 0x1C
	A0 = EMU_ReadU32(V1 + 24); //+ 0x18
	V0 = EMU_ReadU32(V1 + 8); //+ 0x8
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x800408C8; //ZZ_40834_94
	A3 = R0;
	ZZ_CLOCKCYCLES_JR(14);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,800408C0)
	ZZ_JUMPREGISTER_END();
ZZ_40834_94:
	A0 = S2 + 14;
	A1 = S1;
	RA = 0x800408D8; //ZZ_40834_A4
	A2 = 0x5C;
	ZZ_CLOCKCYCLES(4,0x8003D710);
	goto ZZ_3D710;
ZZ_40834_A4:
	V0 = S1;
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80016AD0,ZZ_16A6C_64);
	ZZ_JUMPREGISTER(0x80016BE8,ZZ_16A6C_17C);
	ZZ_JUMPREGISTER(0x80017344,ZZ_172E8_5C);
	ZZ_JUMPREGISTER(0x80017268,ZZ_16E5C_40C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80040834,0x80040880,ZZ_40834);
ZZ_MARK_TARGET(0x80040880,0x80040890,ZZ_40834_4C);
ZZ_MARK_TARGET(0x80040890,0x800408C8,ZZ_40834_5C);
ZZ_MARK_TARGET(0x800408C8,0x800408D8,ZZ_40834_94);
ZZ_MARK_TARGET(0x800408D8,0x800408F8,ZZ_40834_A4);
