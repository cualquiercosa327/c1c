#ifdef ZZ_INCLUDE_CODE
ZZ_30840:
	SP -= 200;
	EMU_Write32(SP + 168,S2); //+ 0xA8
	S2 = A0;
	EMU_Write32(SP + 180,S5); //+ 0xB4
	S5 = A1;
	EMU_Write32(SP + 164,S1); //+ 0xA4
	S1 = A2;
	EMU_Write32(SP + 176,S4); //+ 0xB0
	S4 = EMU_ReadU32(GP + 620); //+ 0x26C
	V1 = 0x80050000;
	V1 += 26628;
	EMU_Write32(SP + 196,RA); //+ 0xC4
	EMU_Write32(SP + 192,FP); //+ 0xC0
	EMU_Write32(SP + 188,S7); //+ 0xBC
	EMU_Write32(SP + 184,S6); //+ 0xB8
	EMU_Write32(SP + 172,S3); //+ 0xAC
	EMU_Write32(SP + 160,S0); //+ 0xA0
	V0 = S4 << 4;
	V0 += S4;
	V0 <<= 2;
	S3 = V0 + V1;
	V0 = (int32_t)S4 < 24;
	if (!V0)
	{
		EMU_Write32(SP + 152,A3); //+ 0x98
		ZZ_CLOCKCYCLES(24,0x80030C80);
		goto ZZ_30840_440;
	}
	EMU_Write32(SP + 152,A3); //+ 0x98
	S7 = -1;
	V0 = 0xFFF0000;
	V0 |= 0xFFFF;
	S6 = S5 & V0;
	FP = S6 << 2;
	ZZ_CLOCKCYCLES(29,0x800308B4);
ZZ_30840_74:
	if (!S2)
	{
		ZZ_CLOCKCYCLES(2,0x800308D4);
		goto ZZ_30840_94;
	}
	if (S2 == S7)
	{
		ZZ_CLOCKCYCLES(4,0x800308DC);
		goto ZZ_30840_9C;
	}
	V0 = EMU_ReadU32(S3);
	if (V0 != S2)
	{
		ZZ_CLOCKCYCLES(8,0x80030C70);
		goto ZZ_30840_430;
	}
	ZZ_CLOCKCYCLES(8,0x800308D4);
ZZ_30840_94:
	if (S2 != S7)
	{
		ZZ_CLOCKCYCLES(2,0x800308F0);
		goto ZZ_30840_B0;
	}
	ZZ_CLOCKCYCLES(2,0x800308DC);
ZZ_30840_9C:
	V0 = EMU_ReadU32(S3 + 12); //+ 0xC
	T0 = EMU_ReadU32(SP + 152); //+ 0x98
	if (V0 != T0)
	{
		ZZ_CLOCKCYCLES(5,0x80030C70);
		goto ZZ_30840_430;
	}
	ZZ_CLOCKCYCLES(5,0x800308F0);
ZZ_30840_B0:
	S0 = 0x80050000;
	S0 += 28284;
	if (!S2)
	{
		ZZ_CLOCKCYCLES(4,0x80030904);
		goto ZZ_30840_C4;
	}
	S0 = S3 + 4;
	ZZ_CLOCKCYCLES(5,0x80030904);
ZZ_30840_C4:
	if ((int32_t)S5 >= 0)
	{
		V0 = 0x40000000;
		ZZ_CLOCKCYCLES(2,0x80030920);
		goto ZZ_30840_E0;
	}
	V0 = 0x40000000;
	V0 = EMU_ReadU32(S0);
	V0 |= 0x1;
	EMU_Write32(S0,V0);
	V0 = 0x40000000;
	ZZ_CLOCKCYCLES(7,0x80030920);
ZZ_30840_E0:
	V0 &= S5;
	if (!V0)
	{
		V0 = 0x20000000;
		ZZ_CLOCKCYCLES(3,0x80030940);
		goto ZZ_30840_100;
	}
	V0 = 0x20000000;
	V0 = EMU_ReadU32(S0);
	V0 |= 0x2;
	EMU_Write32(S0,V0);
	V0 = 0x20000000;
	ZZ_CLOCKCYCLES(8,0x80030940);
ZZ_30840_100:
	V0 &= S5;
	if (!V0)
	{
		V0 = S6 < 13;
		ZZ_CLOCKCYCLES(3,0x80030960);
		goto ZZ_30840_120;
	}
	V0 = S6 < 13;
	V0 = EMU_ReadU32(S0);
	V0 |= 0x4;
	EMU_Write32(S0,V0);
	V0 = S6 < 13;
	ZZ_CLOCKCYCLES(8,0x80030960);
ZZ_30840_120:
	if (!V0)
	{
		EMU_Write32(SP + 20,R0); //+ 0x14
		ZZ_CLOCKCYCLES(2,0x80030C40);
		goto ZZ_30840_400;
	}
	EMU_Write32(SP + 20,R0); //+ 0x14
	AT = 0x80010000;
	AT += FP;
	V0 = EMU_ReadU32(AT + 3224); //+ 0xC98
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80030980,ZZ_30840_140);
	ZZ_JUMPREGISTER(0x80030A28,ZZ_30840_1E8);
	ZZ_JUMPREGISTER(0x80030ABC,ZZ_30840_27C);
	ZZ_JUMPREGISTER(0x80030AE4,ZZ_30840_2A4);
	ZZ_JUMPREGISTER(0x80030B7C,ZZ_30840_33C);
	ZZ_JUMPREGISTER(0x80030B88,ZZ_30840_348);
	ZZ_JUMPREGISTER(0x80030B94,ZZ_30840_354);
	ZZ_JUMPREGISTER(0x80030BB4,ZZ_30840_374);
	ZZ_JUMPREGISTER(0x80030BCC,ZZ_30840_38C);
	ZZ_JUMPREGISTER(0x80030BE0,ZZ_30840_3A0);
	ZZ_JUMPREGISTER(0x80030BF4,ZZ_30840_3B4);
	ZZ_JUMPREGISTER(0x80030C10,ZZ_30840_3D0);
	ZZ_JUMPREGISTER(0x80030C34,ZZ_30840_3F4);
	ZZ_JUMPREGISTER_END();
ZZ_30840_140:
	V0 = EMU_ReadU32(S0);
	V0 &= 0x4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80030A00);
		goto ZZ_30840_1C0;
	}
	V0 = EMU_ReadU16(S1);
	A0 = EMU_ReadU32(GP + 248); //+ 0xF8
	EMU_Write16(S0 + 44,V0); //+ 0x2C
	if (!S2)
	{
		EMU_Write32(S0 + 48,A0); //+ 0x30
		ZZ_CLOCKCYCLES(10,0x800309EC);
		goto ZZ_30840_1AC;
	}
	EMU_Write32(S0 + 48,A0); //+ 0x30
	V0 = EMU_ReadS16(S0 + 44); //+ 0x2C
	V1 = EMU_ReadS16(S0 + 14); //+ 0xE
	V0 = V0 - V1;
	EMU_SDivide(V0,A0);
	if (A0)
	{
		ZZ_CLOCKCYCLES(17,0x800309C8);
		goto ZZ_30840_188;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(18,0x800309C8);
ZZ_30840_188:
	AT = -1;
	if (A0 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800309E0);
		goto ZZ_30840_1A0;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800309E0);
		goto ZZ_30840_1A0;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800309E0);
ZZ_30840_1A0:
	V0 = LO;
	EMU_Write32(S0 + 52,V0); //+ 0x34
	ZZ_CLOCKCYCLES(3,0x800309EC);
ZZ_30840_1AC:
	V0 = EMU_ReadU32(S0);
	V0 |= 0x40;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_1C0:
	V0 = EMU_ReadU16(S1);
	if (!S2)
	{
		EMU_Write16(S0 + 14,V0); //+ 0xE
		ZZ_CLOCKCYCLES(3,0x80030C40);
		goto ZZ_30840_400;
	}
	EMU_Write16(S0 + 14,V0); //+ 0xE
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 |= 0x3;
	EMU_Write32(SP + 20,V0); //+ 0x14
	A1 = EMU_ReadS16(S0 + 14); //+ 0xE
	A0 = S0 + 20;
	ZZ_CLOCKCYCLES(10,0x80030B58);
	goto ZZ_30840_318;
ZZ_30840_1E8:
	V0 = EMU_ReadU32(S0);
	V0 &= 0x4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80030A9C);
		goto ZZ_30840_25C;
	}
	V0 = EMU_ReadU16(S1);
	EMU_Write16(S0 + 46,V0); //+ 0x2E
	A0 = EMU_ReadU16(S0 + 46); //+ 0x2E
	V0 = EMU_ReadU16(S0 + 18); //+ 0x12
	V1 = EMU_ReadU32(GP + 248); //+ 0xF8
	A0 = A0 - V0;
	EMU_SDivide(A0,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(15,0x80030A68);
		goto ZZ_30840_228;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(16,0x80030A68);
ZZ_30840_228:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x80030A80);
		goto ZZ_30840_240;
	}
	AT = 0x80000000;
	if (A0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x80030A80);
		goto ZZ_30840_240;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x80030A80);
ZZ_30840_240:
	A0 = LO;
	V0 = EMU_ReadU32(S0);
	EMU_Write32(S0 + 56,V1); //+ 0x38
	V0 |= 0x80;
	EMU_Write32(S0,V0);
	EMU_Write32(S0 + 60,A0); //+ 0x3C
	ZZ_CLOCKCYCLES(7,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_25C:
	V0 = EMU_ReadU16(S1);
	if (!S2)
	{
		EMU_Write16(S0 + 18,V0); //+ 0x12
		ZZ_CLOCKCYCLES(3,0x80030C40);
		goto ZZ_30840_400;
	}
	EMU_Write16(S0 + 18,V0); //+ 0x12
	V0 = 0x10;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU16(S0 + 18); //+ 0x12
	EMU_Write16(SP + 36,V0); //+ 0x24
	ZZ_CLOCKCYCLES(8,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_27C:
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	A0 = EMU_ReadU32(S1 + 8); //+ 0x8
	EMU_Write32(SP + 120,V0); //+ 0x78
	EMU_Write32(SP + 124,V1); //+ 0x7C
	EMU_Write32(SP + 128,A0); //+ 0x80
	A0 = SP + 120;
	A1 = S1;
	RA = 0x80030AE4; //ZZ_30840_2A4
	A2 = 0x1;
	ZZ_CLOCKCYCLES(10,0x800248A0);
	goto ZZ_248A0;
ZZ_30840_2A4:
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	A0 = EMU_ReadU32(S1 + 8); //+ 0x8
	EMU_Write32(SP + 136,V0); //+ 0x88
	EMU_Write32(SP + 140,V1); //+ 0x8C
	EMU_Write32(SP + 144,A0); //+ 0x90
	V0 = EMU_ReadU32(S0);
	V0 &= 0x4;
	if (V0)
	{
		ZZ_CLOCKCYCLES(11,0x80030C40);
		goto ZZ_30840_400;
	}
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	A0 = EMU_ReadU32(S1 + 8); //+ 0x8
	EMU_Write32(S0 + 20,V0); //+ 0x14
	EMU_Write32(S0 + 24,V1); //+ 0x18
	EMU_Write32(S0 + 28,A0); //+ 0x1C
	if (!S2)
	{
		A2 = S0 + 20;
		ZZ_CLOCKCYCLES(19,0x80030C40);
		goto ZZ_30840_400;
	}
	A2 = S0 + 20;
	V0 = EMU_ReadU32(S1);
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	A0 = EMU_ReadU32(S1 + 8); //+ 0x8
	EMU_Write32(S3 + 24,V0); //+ 0x18
	EMU_Write32(S3 + 28,V1); //+ 0x1C
	EMU_Write32(S3 + 32,A0); //+ 0x20
	V0 = 0x3;
	EMU_Write32(SP + 20,V0); //+ 0x14
	A1 = EMU_ReadS16(S0 + 14); //+ 0xE
	A0 = A2;
	ZZ_CLOCKCYCLES(29,0x80030B58);
ZZ_30840_318:
	RA = 0x80030B60; //ZZ_30840_320
	ZZ_CLOCKCYCLES(2,0x80030078);
	goto ZZ_30078;
ZZ_30840_320:
	EMU_ReadLeft(V0 + 3,&V1); //+ 0x3
	EMU_ReadRight(V0,&V1);
	EMU_WriteLeft(SP + 27,V1); //+ 0x1B
	EMU_WriteRight(SP + 24,V1); //+ 0x18
	ZZ_CLOCKCYCLES(7,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_33C:
	V0 = EMU_ReadU8(S1);
	EMU_Write8(S0 + 12,V0); //+ 0xC
	ZZ_CLOCKCYCLES(3,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_348:
	V0 = EMU_ReadU32(S1);
	EMU_Write32(S0 + 8,V0); //+ 0x8
	ZZ_CLOCKCYCLES(3,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_354:
	V0 = EMU_ReadU32(S1);
	EMU_Write32(GP + 248,V0); //+ 0xF8
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(5,0x80030C40);
		goto ZZ_30840_400;
	}
	V0 = 0x1;
	EMU_Write32(GP + 248,V0); //+ 0xF8
	ZZ_CLOCKCYCLES(8,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_374:
	V0 = EMU_ReadU32(S0);
	V1 = EMU_ReadU16(S1);
	V0 |= 0x10;
	EMU_Write16(S0 + 16,V1); //+ 0x10
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(6,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_38C:
	V0 = EMU_ReadU32(S0);
	V0 |= 0x200;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_3A0:
	V0 = EMU_ReadU32(S0);
	V1 = -513;
	V0 &= V1;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_3B4:
	A0 = -2049;
	V1 = EMU_ReadU32(S0);
	V0 = EMU_ReadU32(S1);
	V1 &= A0;
	V0 <<= 3;
	V0 &= 0x800;
	ZZ_CLOCKCYCLES(7,0x80030C28);
	goto ZZ_30840_3E8;
ZZ_30840_3D0:
	A0 = -1025;
	V1 = EMU_ReadU32(S0);
	V0 = EMU_ReadU32(S1);
	V1 &= A0;
	V0 <<= 2;
	V0 &= 0x400;
	ZZ_CLOCKCYCLES(6,0x80030C28);
ZZ_30840_3E8:
	V1 |= V0;
	EMU_Write32(S0,V1);
	ZZ_CLOCKCYCLES(3,0x80030C40);
	goto ZZ_30840_400;
ZZ_30840_3F4:
	V0 = EMU_ReadU8(S1);
	EMU_Write8(S0 + 13,V0); //+ 0xD
	ZZ_CLOCKCYCLES(3,0x80030C40);
ZZ_30840_400:
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	if (!V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x80030C60);
		goto ZZ_30840_420;
	}
	V0 = 0x1;
	V0 <<= S4;
	EMU_Write32(SP + 16,V0); //+ 0x10
	RA = 0x80030C60; //ZZ_30840_420
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(8,0x80047F5C);
	goto ZZ_47F5C;
ZZ_30840_420:
	if (S2 == S7)
	{
		S4 += 1;
		ZZ_CLOCKCYCLES(2,0x80030C74);
		goto ZZ_30840_434;
	}
	S4 += 1;
	V0 = R0;
	ZZ_CLOCKCYCLES(4,0x80030C8C);
	goto ZZ_30840_44C;
ZZ_30840_430:
	S4 += 1;
	ZZ_CLOCKCYCLES(1,0x80030C74);
ZZ_30840_434:
	V0 = (int32_t)S4 < 24;
	if (V0)
	{
		S3 += 68;
		ZZ_CLOCKCYCLES(3,0x800308B4);
		goto ZZ_30840_74;
	}
	S3 += 68;
	ZZ_CLOCKCYCLES(3,0x80030C80);
ZZ_30840_440:
	V0 = ~S2;
	V0 = R0 < V0;
	V0 = -V0;
	ZZ_CLOCKCYCLES(3,0x80030C8C);
ZZ_30840_44C:
	RA = EMU_ReadU32(SP + 196); //+ 0xC4
	FP = EMU_ReadU32(SP + 192); //+ 0xC0
	S7 = EMU_ReadU32(SP + 188); //+ 0xBC
	S6 = EMU_ReadU32(SP + 184); //+ 0xB8
	S5 = EMU_ReadU32(SP + 180); //+ 0xB4
	S4 = EMU_ReadU32(SP + 176); //+ 0xB0
	S3 = EMU_ReadU32(SP + 172); //+ 0xAC
	S2 = EMU_ReadU32(SP + 168); //+ 0xA8
	S1 = EMU_ReadU32(SP + 164); //+ 0xA4
	S0 = EMU_ReadU32(SP + 160); //+ 0xA0
	SP += 200;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x800302EC,ZZ_30260_8C);
	//ZZ_JUMPREGISTER(0x80024000,ZZ_201DC_3E24);
	ZZ_JUMPREGISTER(0x8002F600,ZZ_2EC68_998);
	ZZ_JUMPREGISTER(0x8002F624,ZZ_2EC68_9BC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80030840,0x800308B4,ZZ_30840);
ZZ_MARK_TARGET(0x800308B4,0x800308D4,ZZ_30840_74);
ZZ_MARK_TARGET(0x800308D4,0x800308DC,ZZ_30840_94);
ZZ_MARK_TARGET(0x800308DC,0x800308F0,ZZ_30840_9C);
ZZ_MARK_TARGET(0x800308F0,0x80030904,ZZ_30840_B0);
ZZ_MARK_TARGET(0x80030904,0x80030920,ZZ_30840_C4);
ZZ_MARK_TARGET(0x80030920,0x80030940,ZZ_30840_E0);
ZZ_MARK_TARGET(0x80030940,0x80030960,ZZ_30840_100);
ZZ_MARK_TARGET(0x80030960,0x80030980,ZZ_30840_120);
ZZ_MARK_TARGET(0x80030980,0x800309C8,ZZ_30840_140);
ZZ_MARK_TARGET(0x800309C8,0x800309E0,ZZ_30840_188);
ZZ_MARK_TARGET(0x800309E0,0x800309EC,ZZ_30840_1A0);
ZZ_MARK_TARGET(0x800309EC,0x80030A00,ZZ_30840_1AC);
ZZ_MARK_TARGET(0x80030A00,0x80030A28,ZZ_30840_1C0);
ZZ_MARK_TARGET(0x80030A28,0x80030A68,ZZ_30840_1E8);
ZZ_MARK_TARGET(0x80030A68,0x80030A80,ZZ_30840_228);
ZZ_MARK_TARGET(0x80030A80,0x80030A9C,ZZ_30840_240);
ZZ_MARK_TARGET(0x80030A9C,0x80030ABC,ZZ_30840_25C);
ZZ_MARK_TARGET(0x80030ABC,0x80030AE4,ZZ_30840_27C);
ZZ_MARK_TARGET(0x80030AE4,0x80030B58,ZZ_30840_2A4);
ZZ_MARK_TARGET(0x80030B58,0x80030B60,ZZ_30840_318);
ZZ_MARK_TARGET(0x80030B60,0x80030B7C,ZZ_30840_320);
ZZ_MARK_TARGET(0x80030B7C,0x80030B88,ZZ_30840_33C);
ZZ_MARK_TARGET(0x80030B88,0x80030B94,ZZ_30840_348);
ZZ_MARK_TARGET(0x80030B94,0x80030BB4,ZZ_30840_354);
ZZ_MARK_TARGET(0x80030BB4,0x80030BCC,ZZ_30840_374);
ZZ_MARK_TARGET(0x80030BCC,0x80030BE0,ZZ_30840_38C);
ZZ_MARK_TARGET(0x80030BE0,0x80030BF4,ZZ_30840_3A0);
ZZ_MARK_TARGET(0x80030BF4,0x80030C10,ZZ_30840_3B4);
ZZ_MARK_TARGET(0x80030C10,0x80030C28,ZZ_30840_3D0);
ZZ_MARK_TARGET(0x80030C28,0x80030C34,ZZ_30840_3E8);
ZZ_MARK_TARGET(0x80030C34,0x80030C40,ZZ_30840_3F4);
ZZ_MARK_TARGET(0x80030C40,0x80030C60,ZZ_30840_400);
ZZ_MARK_TARGET(0x80030C60,0x80030C70,ZZ_30840_420);
ZZ_MARK_TARGET(0x80030C70,0x80030C74,ZZ_30840_430);
ZZ_MARK_TARGET(0x80030C74,0x80030C80,ZZ_30840_434);
ZZ_MARK_TARGET(0x80030C80,0x80030C8C,ZZ_30840_440);
ZZ_MARK_TARGET(0x80030C8C,0x80030CC0,ZZ_30840_44C);
