#ifdef ZZ_INCLUDE_CODE
ZZ_14D00:
	SP -= 32;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = A2;
	if (!A1)
	{
		EMU_Write32(SP + 28,RA); //+ 0x1C
		ZZ_CLOCKCYCLES(5,0x80014D24);
		goto ZZ_14D00_24;
	}
	EMU_Write32(SP + 28,RA); //+ 0x1C
	RA = 0x80014D1C; //ZZ_14D00_1C
	A1 = A3;
	ZZ_CLOCKCYCLES(7,0x80014C08);
	goto ZZ_14C08;
ZZ_14D00_1C:
	A0 = V0;
	ZZ_CLOCKCYCLES(2,0x80014DFC);
	goto ZZ_14D00_FC;
ZZ_14D00_24:
	V0 = (int32_t)A0 >> 1;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12356); //+ 0xFFFFCFBC
	V0 <<= 2;
	V0 += V1;
	V1 = EMU_ReadU32(V0);
	V0 = -18;
	if (V1 == V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(9,0x80014DB0);
		goto ZZ_14D00_B0;
	}
	V0 = -255;
	if (V1 == V0)
	{
		A0 = V1;
		ZZ_CLOCKCYCLES(11,0x80014E00);
		goto ZZ_14D00_100;
	}
	A0 = V1;
	EMU_Write32(V1 + 24,A3); //+ 0x18
	ZZ_CLOCKCYCLES(13,0x80014E00);
	goto ZZ_14D00_100;
ZZ_14D00_58:
	V1 = 0x80030000;
	V1 = EMU_ReadU32(V1 + 17696); //+ 0x4520
	V0 = 0x2;
	EMU_Write16(A1 + 4,V0); //+ 0x4
	V0 = (int32_t)A0 >> 1;
	EMU_Write32(A1 + 20,A0); //+ 0x14
	EMU_Write16(A1 + 10,R0); //+ 0xA
	EMU_Write32(A1 + 24,A3); //+ 0x18
	EMU_Write32(A1 + 40,V1); //+ 0x28
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12356); //+ 0xFFFFCFBC
	V0 <<= 2;
	V0 += V1;
	EMU_Write32(V0,A1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12376); //+ 0xFFFFCFA8
	V0 += 1;
	AT = 0x80060000;
	EMU_Write32(AT - 12376,V0); //+ 0xFFFFCFA8
	V1 = A1;
	ZZ_CLOCKCYCLES(22,0x80014DF8);
	goto ZZ_14D00_F8;
ZZ_14D00_B0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 14052); //+ 0xFFFFC91C
	if ((int32_t)V0 <= 0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(5,0x80014DF4);
		goto ZZ_14D00_F4;
	}
	V1 = R0;
	T0 = 0x1;
	A2 = V0;
	A1 = 0x80060000;
	A1 -= 14048;
	ZZ_CLOCKCYCLES(9,0x80014DD4);
ZZ_14D00_D4:
	V0 = EMU_ReadS16(A1 + 4); //+ 0x4
	if (V0 == T0)
	{
		ZZ_CLOCKCYCLES(4,0x80014D58);
		goto ZZ_14D00_58;
	}
	V1 += 1;
	V0 = (int32_t)V1 < (int32_t)A2;
	if (V0)
	{
		A1 += 44;
		ZZ_CLOCKCYCLES(8,0x80014DD4);
		goto ZZ_14D00_D4;
	}
	A1 += 44;
	ZZ_CLOCKCYCLES(8,0x80014DF4);
ZZ_14D00_F4:
	V1 = R0;
	ZZ_CLOCKCYCLES(1,0x80014DF8);
ZZ_14D00_F8:
	A0 = V1;
	ZZ_CLOCKCYCLES(1,0x80014DFC);
ZZ_14D00_FC:
	V0 = -255;
	ZZ_CLOCKCYCLES(1,0x80014E00);
ZZ_14D00_100:
	if (A0 == V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x80014E20);
		goto ZZ_14D00_120;
	}
	V0 = 0x1;
	V1 = EMU_ReadU16(A0 + 10); //+ 0xA
	V1 += S0;
	V0 = V1 << 16;
	V0 = (int32_t)V0 >> 16;
	EMU_Write16(A0 + 10,V1); //+ 0xA
	ZZ_CLOCKCYCLES(8,0x80014E20);
ZZ_14D00_120:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80025EE0,ZZ_25A60_480);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014D00,0x80014D1C,ZZ_14D00);
ZZ_MARK_TARGET(0x80014D1C,0x80014D24,ZZ_14D00_1C);
ZZ_MARK_TARGET(0x80014D24,0x80014D58,ZZ_14D00_24);
ZZ_MARK_TARGET(0x80014D58,0x80014DB0,ZZ_14D00_58);
ZZ_MARK_TARGET(0x80014DB0,0x80014DD4,ZZ_14D00_B0);
ZZ_MARK_TARGET(0x80014DD4,0x80014DF4,ZZ_14D00_D4);
ZZ_MARK_TARGET(0x80014DF4,0x80014DF8,ZZ_14D00_F4);
ZZ_MARK_TARGET(0x80014DF8,0x80014DFC,ZZ_14D00_F8);
ZZ_MARK_TARGET(0x80014DFC,0x80014E00,ZZ_14D00_FC);
ZZ_MARK_TARGET(0x80014E00,0x80014E20,ZZ_14D00_100);
ZZ_MARK_TARGET(0x80014E20,0x80014E34,ZZ_14D00_120);
