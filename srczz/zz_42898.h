#ifdef ZZ_INCLUDE_CODE
ZZ_42898:
	SP -= 32;
	EMU_Write32(SP + 24,RA); //+ 0x18
	RA = 0x800428A8; //ZZ_42898_10
	A0 = -1;
	ZZ_CLOCKCYCLES(4,0x8003E4F0);
	goto ZZ_3E4F0;
ZZ_42898_10:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19332); //+ 0x4B84
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		ZZ_CLOCKCYCLES(6,0x800428E8);
		goto ZZ_42898_50;
	}
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19336); //+ 0x4B88
	V0 = V1 + 1;
	AT = 0x80050000;
	EMU_Write32(AT + 19336,V0); //+ 0x4B88
	V0 = 0xF0000;
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(16,0x800429F0);
		goto ZZ_42898_158;
	}
	ZZ_CLOCKCYCLES(16,0x800428E8);
ZZ_42898_50:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19264); //+ 0x4B40
	A0 = 0x80010000;
	A0 += 4944;
	V0 = EMU_ReadU32(V1);
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 19312); //+ 0x4B70
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19268); //+ 0x4B44
	T0 = 0x80050000;
	T0 = EMU_ReadU32(T0 + 19316); //+ 0x4B74
	V0 = EMU_ReadU32(V0);
	A1 = A1 - T0;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19276); //+ 0x4B4C
	A2 = EMU_ReadU32(V1);
	A3 = EMU_ReadU32(V0);
	RA = 0x80042938; //ZZ_42898_A0
	A1 &= 0x3F;
	ZZ_CLOCKCYCLES(20,0x8003D730);
	goto ZZ_3D730;
ZZ_42898_A0:
	V0 = 0x80050000;
	V0 += 19296;
	A1 = EMU_ReadU32(V0);
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 19300); //+ 0x4B64
	A3 = 0x80050000;
	A3 = EMU_ReadU32(A3 + 19304); //+ 0x4B68
	A0 = 0x80010000;
	A0 += 4996;
	RA = 0x80042964; //ZZ_42898_CC
	ZZ_CLOCKCYCLES(11,0x8003D730);
	goto ZZ_3D730;
ZZ_42898_CC:
	RA = 0x8004296C; //ZZ_42898_D4
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003E870);
	goto ZZ_3E870;
ZZ_42898_D4:
	AT = 0x80050000;
	EMU_Write32(AT + 19316,R0); //+ 0x4B74
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19316); //+ 0x4B74
	AT = 0x80050000;
	EMU_Write32(AT + 19328,V0); //+ 0x4B80
	AT = 0x80050000;
	EMU_Write32(AT + 19312,V1); //+ 0x4B70
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19276); //+ 0x4B4C
	V0 = 0x401;
	EMU_Write32(V1,V0);
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19292); //+ 0x4B5C
	V0 = EMU_ReadU32(V1);
	V0 |= 0x800;
	EMU_Write32(V1,V0);
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19264); //+ 0x4B40
	V0 = 0x2000000;
	EMU_Write32(V1,V0);
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19264); //+ 0x4B40
	V0 = 0x1000000;
	EMU_Write32(V1,V0);
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 19328); //+ 0x4B80
	RA = 0x800429E8; //ZZ_42898_150
	ZZ_CLOCKCYCLES(31,0x8003E870);
	goto ZZ_3E870;
ZZ_42898_150:
	V0 = -1;
	ZZ_CLOCKCYCLES(2,0x800429F4);
	goto ZZ_42898_15C;
ZZ_42898_158:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x800429F4);
ZZ_42898_15C:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8004274C,ZZ_4271C_30);
	ZZ_JUMPREGISTER(0x80042780,ZZ_4271C_64);
	ZZ_JUMPREGISTER(0x8004203C,ZZ_42000_3C);
	ZZ_JUMPREGISTER(0x8004178C,ZZ_416E4_A8);
	ZZ_JUMPREGISTER(0x80041D58,ZZ_41C38_120);
	ZZ_JUMPREGISTER(0x80041B08,ZZ_419E4_124);
	ZZ_JUMPREGISTER(0x80041E04,ZZ_41C38_1CC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80042898,0x800428A8,ZZ_42898);
ZZ_MARK_TARGET(0x800428A8,0x800428E8,ZZ_42898_10);
ZZ_MARK_TARGET(0x800428E8,0x80042938,ZZ_42898_50);
ZZ_MARK_TARGET(0x80042938,0x80042964,ZZ_42898_A0);
ZZ_MARK_TARGET(0x80042964,0x8004296C,ZZ_42898_CC);
ZZ_MARK_TARGET(0x8004296C,0x800429E8,ZZ_42898_D4);
ZZ_MARK_TARGET(0x800429E8,0x800429F0,ZZ_42898_150);
ZZ_MARK_TARGET(0x800429F0,0x800429F4,ZZ_42898_158);
ZZ_MARK_TARGET(0x800429F4,0x80042A04,ZZ_42898_15C);
