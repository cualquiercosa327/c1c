#ifdef ZZ_INCLUDE_CODE
ZZ_32FDC:
	SP -= 136;
	EMU_Write32(SP + 116,S5); //+ 0x74
	S5 = A2;
	EMU_Write32(SP + 132,RA); //+ 0x84
	EMU_Write32(SP + 128,FP); //+ 0x80
	EMU_Write32(SP + 124,S7); //+ 0x7C
	EMU_Write32(SP + 120,S6); //+ 0x78
	EMU_Write32(SP + 112,S4); //+ 0x70
	EMU_Write32(SP + 108,S3); //+ 0x6C
	EMU_Write32(SP + 104,S2); //+ 0x68
	EMU_Write32(SP + 100,S1); //+ 0x64
	EMU_Write32(SP + 96,S0); //+ 0x60
	EMU_Write32(SP + 40,A1); //+ 0x28
	A2 = 0x80050000;
	A2 += 25948;
	EMU_ReadLeft(A2 + 3,&V0); //+ 0x3
	EMU_ReadRight(A2,&V0);
	V1 = EMU_ReadS8(A2 + 4); //+ 0x4
	A1 = EMU_ReadS8(A2 + 5); //+ 0x5
	EMU_WriteLeft(SP + 19,V0); //+ 0x13
	EMU_WriteRight(SP + 16,V0); //+ 0x10
	EMU_Write8(SP + 20,V1); //+ 0x14
	EMU_Write8(SP + 21,A1); //+ 0x15
	RA = 0x80033040; //ZZ_32FDC_64
	ZZ_CLOCKCYCLES(25,0x80012820);
	goto ZZ_12820;
ZZ_32FDC_64:
	A0 = SP + 16;
	RA = 0x8003304C; //ZZ_32FDC_70
	EMU_Write8(SP + 16,V0); //+ 0x10
	ZZ_CLOCKCYCLES(3,0x80012660);
	goto ZZ_12660;
ZZ_32FDC_70:
	V1 = 0x63960000;
	V1 |= 0x347F;
	if (V0 == V1)
	{
		EMU_Write32(SP + 32,V0); //+ 0x20
		ZZ_CLOCKCYCLES(4,0x80033080);
		goto ZZ_32FDC_A4;
	}
	EMU_Write32(SP + 32,V0); //+ 0x20
	if ((int32_t)S5 <= 0)
	{
		A0 = SP + 32;
		ZZ_CLOCKCYCLES(6,0x80033078);
		goto ZZ_32FDC_9C;
	}
	A0 = SP + 32;
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	RA = 0x80033070; //ZZ_32FDC_94
	A2 = S5;
	ZZ_CLOCKCYCLES(9,0x80015118);
	goto ZZ_15118;
ZZ_32FDC_94:
	ZZ_CLOCKCYCLES(2,0x80033080);
	goto ZZ_32FDC_A4;
ZZ_32FDC_9C:
	RA = 0x80033080; //ZZ_32FDC_A4
	A1 = -S5;
	ZZ_CLOCKCYCLES(2,0x80015458);
	goto ZZ_15458;
ZZ_32FDC_A4:
	RA = 0x80033088; //ZZ_32FDC_AC
	A0 = SP + 32;
	ZZ_CLOCKCYCLES(2,0x80015A98);
	goto ZZ_15A98;
ZZ_32FDC_AC:
	EMU_Write32(SP + 48,V0); //+ 0x30
	FP = EMU_ReadU32(V0 + 16); //+ 0x10
	if ((int32_t)S5 <= 0)
	{
		S6 = FP + 24;
		ZZ_CLOCKCYCLES(4,0x80033328);
		goto ZZ_32FDC_34C;
	}
	S6 = FP + 24;
	S3 = R0;
	S7 = EMU_ReadU32(FP + 8); //+ 0x8
	if ((int32_t)S7 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(9,0x80033230);
		goto ZZ_32FDC_254;
	}
	S1 = R0;
	A3 = 0x88880000;
	A3 |= 0x8889;
	EMU_Write32(SP + 56,A3); //+ 0x38
	A3 = 0x63960000;
	A3 |= 0x347F;
	EMU_Write32(SP + 64,A3); //+ 0x40
	ZZ_CLOCKCYCLES(15,0x800330C4);
ZZ_32FDC_E8:
	A3 = EMU_ReadU32(SP + 56); //+ 0x38
	EMU_SMultiply(S1,A3);
	V1 = (int32_t)S1 >> 31;
	A3 = EMU_ReadU32(SP + 64); //+ 0x40
	V0 = HI;
	V0 += S1;
	V0 = (int32_t)V0 >> 6;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 += FP;
	V0 = EMU_ReadU32(V0 + 120); //+ 0x78
	if (V0 == A3)
	{
		EMU_Write32(SP + 32,V0); //+ 0x20
		ZZ_CLOCKCYCLES(15,0x80033124);
		goto ZZ_32FDC_148;
	}
	EMU_Write32(SP + 32,V0); //+ 0x20
	if ((int32_t)S5 <= 0)
	{
		A0 = SP + 32;
		ZZ_CLOCKCYCLES(17,0x8003311C);
		goto ZZ_32FDC_140;
	}
	A0 = SP + 32;
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	RA = 0x80033114; //ZZ_32FDC_138
	A2 = S5;
	ZZ_CLOCKCYCLES(20,0x80015118);
	goto ZZ_15118;
ZZ_32FDC_138:
	V0 = S7 - S1;
	ZZ_CLOCKCYCLES(2,0x80033128);
	goto ZZ_32FDC_14C;
ZZ_32FDC_140:
	RA = 0x80033124; //ZZ_32FDC_148
	A1 = -S5;
	ZZ_CLOCKCYCLES(2,0x80015458);
	goto ZZ_15458;
ZZ_32FDC_148:
	V0 = S7 - S1;
	ZZ_CLOCKCYCLES(1,0x80033128);
ZZ_32FDC_14C:
	V0 = (int32_t)V0 < 120;
	if (V0)
	{
		S4 = S7;
		ZZ_CLOCKCYCLES(3,0x80033138);
		goto ZZ_32FDC_15C;
	}
	S4 = S7;
	S4 = S1 + 120;
	ZZ_CLOCKCYCLES(4,0x80033138);
ZZ_32FDC_15C:
	V0 = (int32_t)S1 < (int32_t)S4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x800331EC);
		goto ZZ_32FDC_210;
	}
	S2 = S6 + 4;
	ZZ_CLOCKCYCLES(4,0x80033148);
ZZ_32FDC_16C:
	A3 = EMU_ReadU32(SP + 56); //+ 0x38
	EMU_SMultiply(S1,A3);
	V0 = (int32_t)S1 >> 31;
	A3 = EMU_ReadU32(SP + 48); //+ 0x30
	S0 = HI;
	S0 += S1;
	S0 = (int32_t)S0 >> 6;
	S0 = S0 - V0;
	A0 = S0 << 2;
	V0 = EMU_ReadU32(A3 + 16); //+ 0x10
	A0 += 120;
	RA = 0x80033180; //ZZ_32FDC_1A4
	A0 += V0;
	ZZ_CLOCKCYCLES(14,0x80015A98);
	goto ZZ_15A98;
ZZ_32FDC_1A4:
	V1 = S0 << 4;
	V1 = V1 - S0;
	V1 <<= 3;
	V1 = S1 - V1;
	V1 <<= 2;
	V1 += V0;
	A0 = EMU_ReadU32(S2 + 4); //+ 0x4
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	A0 = (int32_t)S3 < (int32_t)A0;
	if (A0)
	{
		A0 = V0;
		ZZ_CLOCKCYCLES(11,0x800331B8);
		goto ZZ_32FDC_1DC;
	}
	A0 = V0;
	S2 += 12;
	S6 += 12;
	S3 = R0;
	ZZ_CLOCKCYCLES(14,0x800331B8);
ZZ_32FDC_1DC:
	A2 = EMU_ReadU32(S2);
	A1 = EMU_ReadU32(S6);
	RA = 0x800331C8; //ZZ_32FDC_1EC
	A2 += S3;
	ZZ_CLOCKCYCLES(4,0x8003F338);
	goto ZZ_3F338;
ZZ_32FDC_1EC:
	V1 = S1 << 1;
	S1 += 1;
	A0 = EMU_ReadU32(GP + 740); //+ 0x2E4
	V1 += A0;
	EMU_Write16(V1 + 12704,V0); //+ 0x31A0
	V0 = (int32_t)S1 < (int32_t)S4;
	if (V0)
	{
		S3 += 1;
		ZZ_CLOCKCYCLES(9,0x80033148);
		goto ZZ_32FDC_16C;
	}
	S3 += 1;
	ZZ_CLOCKCYCLES(9,0x800331EC);
ZZ_32FDC_210:
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	A3 = EMU_ReadU32(SP + 64); //+ 0x40
	if (V0 == A3)
	{
		A2 = -S5;
		ZZ_CLOCKCYCLES(5,0x80033224);
		goto ZZ_32FDC_248;
	}
	A2 = -S5;
	if ((int32_t)A2 <= 0)
	{
		A0 = SP + 32;
		ZZ_CLOCKCYCLES(7,0x8003321C);
		goto ZZ_32FDC_240;
	}
	A0 = SP + 32;
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	RA = 0x80033214; //ZZ_32FDC_238
	A0 = SP + 32;
	ZZ_CLOCKCYCLES(10,0x80015118);
	goto ZZ_15118;
ZZ_32FDC_238:
	V0 = (int32_t)S1 < (int32_t)S7;
	ZZ_CLOCKCYCLES(2,0x80033228);
	goto ZZ_32FDC_24C;
ZZ_32FDC_240:
	RA = 0x80033224; //ZZ_32FDC_248
	A1 = S5;
	ZZ_CLOCKCYCLES(2,0x80015458);
	goto ZZ_15458;
ZZ_32FDC_248:
	V0 = (int32_t)S1 < (int32_t)S7;
	ZZ_CLOCKCYCLES(1,0x80033228);
ZZ_32FDC_24C:
	if (V0)
	{
		ZZ_CLOCKCYCLES(2,0x800330C4);
		goto ZZ_32FDC_E8;
	}
	ZZ_CLOCKCYCLES(2,0x80033230);
ZZ_32FDC_254:
	RA = 0x80033238; //ZZ_32FDC_25C
	A0 = 0x9;
	ZZ_CLOCKCYCLES(2,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_25C:
	S0 = 0x1E;
	AT = 0x80060000;
	EMU_Write16(AT - 32208,S0); //+ 0xFFFF8230
	RA = 0x8003324C; //ZZ_32FDC_270
	A0 = 0xA;
	ZZ_CLOCKCYCLES(5,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_270:
	AT = 0x80060000;
	EMU_Write16(AT - 32164,S0); //+ 0xFFFF825C
	RA = 0x8003325C; //ZZ_32FDC_280
	A0 = 0xD;
	ZZ_CLOCKCYCLES(4,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_280:
	V0 = (int32_t)S7 < 161;
	V0 ^= 0x1;
	AT = 0x80060000;
	EMU_Write16(AT - 32032,S0); //+ 0xFFFF82E0
	if (!V0)
	{
		V0 = 0x1E;
		ZZ_CLOCKCYCLES(6,0x8003328C);
		goto ZZ_32FDC_2B0;
	}
	V0 = 0x1E;
	RA = 0x8003327C; //ZZ_32FDC_2A0
	A0 = 0x8;
	ZZ_CLOCKCYCLES(8,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_2A0:
	AT = 0x80060000;
	EMU_Write16(AT - 32252,S0); //+ 0xFFFF8204
	V0 = (int32_t)S7 < 289;
	ZZ_CLOCKCYCLES(4,0x800332B0);
	goto ZZ_32FDC_2D4;
ZZ_32FDC_2B0:
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 - 32252); //+ 0xFFFF8204
	if (V1 != V0)
	{
		V0 = (int32_t)S7 < 289;
		ZZ_CLOCKCYCLES(5,0x800332B0);
		goto ZZ_32FDC_2D4;
	}
	V0 = (int32_t)S7 < 289;
	V0 = 0x1;
	AT = 0x80060000;
	EMU_Write16(AT - 32252,V0); //+ 0xFFFF8204
	V0 = (int32_t)S7 < 289;
	ZZ_CLOCKCYCLES(9,0x800332B0);
ZZ_32FDC_2D4:
	V0 ^= 0x1;
	if (!V0)
	{
		V0 = 0x1E;
		ZZ_CLOCKCYCLES(3,0x800332CC);
		goto ZZ_32FDC_2F0;
	}
	V0 = 0x1E;
	RA = 0x800332C4; //ZZ_32FDC_2E8
	A0 = 0xC;
	ZZ_CLOCKCYCLES(5,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_2E8:
	V0 = 0x1E;
	ZZ_CLOCKCYCLES(2,0x800332E4);
	goto ZZ_32FDC_308;
ZZ_32FDC_2F0:
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 - 32076); //+ 0xFFFF82B4
	if (V1 != V0)
	{
		V0 = (int32_t)S7 < 417;
		ZZ_CLOCKCYCLES(5,0x800332F0);
		goto ZZ_32FDC_314;
	}
	V0 = (int32_t)S7 < 417;
	V0 = 0x1;
	ZZ_CLOCKCYCLES(6,0x800332E4);
ZZ_32FDC_308:
	AT = 0x80060000;
	EMU_Write16(AT - 32076,V0); //+ 0xFFFF82B4
	V0 = (int32_t)S7 < 417;
	ZZ_CLOCKCYCLES(3,0x800332F0);
ZZ_32FDC_314:
	V0 ^= 0x1;
	if (!V0)
	{
		V0 = 0x1E;
		ZZ_CLOCKCYCLES(3,0x8003330C);
		goto ZZ_32FDC_330;
	}
	V0 = 0x1E;
	RA = 0x80033304; //ZZ_32FDC_328
	A0 = 0xE;
	ZZ_CLOCKCYCLES(5,0x80014514);
	goto ZZ_14514;
ZZ_32FDC_328:
	V0 = 0x1E;
	ZZ_CLOCKCYCLES(2,0x80033320);
	goto ZZ_32FDC_344;
ZZ_32FDC_330:
	V1 = 0x80060000;
	V1 = EMU_ReadS16(V1 - 31988); //+ 0xFFFF830C
	if (V1 != V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(5,0x80033328);
		goto ZZ_32FDC_34C;
	}
	V0 = 0x1;
	ZZ_CLOCKCYCLES(5,0x80033320);
ZZ_32FDC_344:
	AT = 0x80060000;
	EMU_Write16(AT - 31988,V0); //+ 0xFFFF830C
	ZZ_CLOCKCYCLES(2,0x80033328);
ZZ_32FDC_34C:
	V0 = EMU_ReadU32(FP);
	if ((int32_t)V0 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(4,0x80033394);
		goto ZZ_32FDC_3B8;
	}
	S1 = R0;
	S0 = 0x63960000;
	S0 |= 0x347F;
	V0 = S1 << 2;
	ZZ_CLOCKCYCLES(7,0x80033344);
ZZ_32FDC_368:
	A0 = V0 + FP;
	A0 += 432;
	V0 = EMU_ReadU32(A0);
	if (V0 == S0)
	{
		ZZ_CLOCKCYCLES(6,0x80033380);
		goto ZZ_32FDC_3A4;
	}
	if ((int32_t)S5 <= 0)
	{
		ZZ_CLOCKCYCLES(8,0x80033378);
		goto ZZ_32FDC_39C;
	}
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	RA = 0x80033370; //ZZ_32FDC_394
	A2 = S5;
	ZZ_CLOCKCYCLES(11,0x80015118);
	goto ZZ_15118;
ZZ_32FDC_394:
	ZZ_CLOCKCYCLES(2,0x80033380);
	goto ZZ_32FDC_3A4;
ZZ_32FDC_39C:
	RA = 0x80033380; //ZZ_32FDC_3A4
	A1 = -S5;
	ZZ_CLOCKCYCLES(2,0x80015458);
	goto ZZ_15458;
ZZ_32FDC_3A4:
	V0 = EMU_ReadU32(FP);
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		V0 = S1 << 2;
		ZZ_CLOCKCYCLES(5,0x80033344);
		goto ZZ_32FDC_368;
	}
	V0 = S1 << 2;
	ZZ_CLOCKCYCLES(5,0x80033394);
ZZ_32FDC_3B8:
	V0 = EMU_ReadU32(FP + 20); //+ 0x14
	if ((int32_t)V0 <= 0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(4,0x80033430);
		goto ZZ_32FDC_454;
	}
	S1 = R0;
	V0 = S1 << 2;
	ZZ_CLOCKCYCLES(5,0x800333A8);
ZZ_32FDC_3CC:
	A0 = V0 + FP;
	A0 += 304;
	V1 = 0x63960000;
	V0 = EMU_ReadU32(A0);
	V1 |= 0x347F;
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(7,0x800333E8);
		goto ZZ_32FDC_40C;
	}
	if ((int32_t)S5 <= 0)
	{
		ZZ_CLOCKCYCLES(9,0x800333E0);
		goto ZZ_32FDC_404;
	}
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	RA = 0x800333D8; //ZZ_32FDC_3FC
	A2 = S5;
	ZZ_CLOCKCYCLES(12,0x80015118);
	goto ZZ_15118;
ZZ_32FDC_3FC:
	A0 = V0;
	ZZ_CLOCKCYCLES(2,0x800333EC);
	goto ZZ_32FDC_410;
ZZ_32FDC_404:
	RA = 0x800333E8; //ZZ_32FDC_40C
	A1 = -S5;
	ZZ_CLOCKCYCLES(2,0x80015458);
	goto ZZ_15458;
ZZ_32FDC_40C:
	A0 = R0;
	ZZ_CLOCKCYCLES(1,0x800333EC);
ZZ_32FDC_410:
	A3 = EMU_ReadU32(SP + 40); //+ 0x28
	if (!A3)
	{
		S1 += 1;
		ZZ_CLOCKCYCLES(4,0x8003341C);
		goto ZZ_32FDC_440;
	}
	S1 += 1;
	if ((int32_t)S5 <= 0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(6,0x8003341C);
		goto ZZ_32FDC_440;
	}
	V0 = 0x2;
	V1 = EMU_ReadU32(A0 + 8); //+ 0x8
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x8003341C);
		goto ZZ_32FDC_440;
	}
	RA = 0x8003341C; //ZZ_32FDC_440
	ZZ_CLOCKCYCLES(12,0x8001767C);
	goto ZZ_1767C;
ZZ_32FDC_440:
	V0 = EMU_ReadU32(FP + 20); //+ 0x14
	V0 = (int32_t)S1 < (int32_t)V0;
	if (V0)
	{
		V0 = S1 << 2;
		ZZ_CLOCKCYCLES(5,0x800333A8);
		goto ZZ_32FDC_3CC;
	}
	V0 = S1 << 2;
	ZZ_CLOCKCYCLES(5,0x80033430);
ZZ_32FDC_454:
	RA = EMU_ReadU32(SP + 132); //+ 0x84
	FP = EMU_ReadU32(SP + 128); //+ 0x80
	S7 = EMU_ReadU32(SP + 124); //+ 0x7C
	S6 = EMU_ReadU32(SP + 120); //+ 0x78
	S5 = EMU_ReadU32(SP + 116); //+ 0x74
	S4 = EMU_ReadU32(SP + 112); //+ 0x70
	S3 = EMU_ReadU32(SP + 108); //+ 0x6C
	S2 = EMU_ReadU32(SP + 104); //+ 0x68
	S1 = EMU_ReadU32(SP + 100); //+ 0x64
	S0 = EMU_ReadU32(SP + 96); //+ 0x60
	SP += 136;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80032194,ZZ_31EB4_2E0);
	ZZ_JUMPREGISTER(0x80032A00,ZZ_326D8_328);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80032FDC,0x80033040,ZZ_32FDC);
ZZ_MARK_TARGET(0x80033040,0x8003304C,ZZ_32FDC_64);
ZZ_MARK_TARGET(0x8003304C,0x80033070,ZZ_32FDC_70);
ZZ_MARK_TARGET(0x80033070,0x80033078,ZZ_32FDC_94);
ZZ_MARK_TARGET(0x80033078,0x80033080,ZZ_32FDC_9C);
ZZ_MARK_TARGET(0x80033080,0x80033088,ZZ_32FDC_A4);
ZZ_MARK_TARGET(0x80033088,0x800330C4,ZZ_32FDC_AC);
ZZ_MARK_TARGET(0x800330C4,0x80033114,ZZ_32FDC_E8);
ZZ_MARK_TARGET(0x80033114,0x8003311C,ZZ_32FDC_138);
ZZ_MARK_TARGET(0x8003311C,0x80033124,ZZ_32FDC_140);
ZZ_MARK_TARGET(0x80033124,0x80033128,ZZ_32FDC_148);
ZZ_MARK_TARGET(0x80033128,0x80033138,ZZ_32FDC_14C);
ZZ_MARK_TARGET(0x80033138,0x80033148,ZZ_32FDC_15C);
ZZ_MARK_TARGET(0x80033148,0x80033180,ZZ_32FDC_16C);
ZZ_MARK_TARGET(0x80033180,0x800331B8,ZZ_32FDC_1A4);
ZZ_MARK_TARGET(0x800331B8,0x800331C8,ZZ_32FDC_1DC);
ZZ_MARK_TARGET(0x800331C8,0x800331EC,ZZ_32FDC_1EC);
ZZ_MARK_TARGET(0x800331EC,0x80033214,ZZ_32FDC_210);
ZZ_MARK_TARGET(0x80033214,0x8003321C,ZZ_32FDC_238);
ZZ_MARK_TARGET(0x8003321C,0x80033224,ZZ_32FDC_240);
ZZ_MARK_TARGET(0x80033224,0x80033228,ZZ_32FDC_248);
ZZ_MARK_TARGET(0x80033228,0x80033230,ZZ_32FDC_24C);
ZZ_MARK_TARGET(0x80033230,0x80033238,ZZ_32FDC_254);
ZZ_MARK_TARGET(0x80033238,0x8003324C,ZZ_32FDC_25C);
ZZ_MARK_TARGET(0x8003324C,0x8003325C,ZZ_32FDC_270);
ZZ_MARK_TARGET(0x8003325C,0x8003327C,ZZ_32FDC_280);
ZZ_MARK_TARGET(0x8003327C,0x8003328C,ZZ_32FDC_2A0);
ZZ_MARK_TARGET(0x8003328C,0x800332B0,ZZ_32FDC_2B0);
ZZ_MARK_TARGET(0x800332B0,0x800332C4,ZZ_32FDC_2D4);
ZZ_MARK_TARGET(0x800332C4,0x800332CC,ZZ_32FDC_2E8);
ZZ_MARK_TARGET(0x800332CC,0x800332E4,ZZ_32FDC_2F0);
ZZ_MARK_TARGET(0x800332E4,0x800332F0,ZZ_32FDC_308);
ZZ_MARK_TARGET(0x800332F0,0x80033304,ZZ_32FDC_314);
ZZ_MARK_TARGET(0x80033304,0x8003330C,ZZ_32FDC_328);
ZZ_MARK_TARGET(0x8003330C,0x80033320,ZZ_32FDC_330);
ZZ_MARK_TARGET(0x80033320,0x80033328,ZZ_32FDC_344);
ZZ_MARK_TARGET(0x80033328,0x80033344,ZZ_32FDC_34C);
ZZ_MARK_TARGET(0x80033344,0x80033370,ZZ_32FDC_368);
ZZ_MARK_TARGET(0x80033370,0x80033378,ZZ_32FDC_394);
ZZ_MARK_TARGET(0x80033378,0x80033380,ZZ_32FDC_39C);
ZZ_MARK_TARGET(0x80033380,0x80033394,ZZ_32FDC_3A4);
ZZ_MARK_TARGET(0x80033394,0x800333A8,ZZ_32FDC_3B8);
ZZ_MARK_TARGET(0x800333A8,0x800333D8,ZZ_32FDC_3CC);
ZZ_MARK_TARGET(0x800333D8,0x800333E0,ZZ_32FDC_3FC);
ZZ_MARK_TARGET(0x800333E0,0x800333E8,ZZ_32FDC_404);
ZZ_MARK_TARGET(0x800333E8,0x800333EC,ZZ_32FDC_40C);
ZZ_MARK_TARGET(0x800333EC,0x8003341C,ZZ_32FDC_410);
ZZ_MARK_TARGET(0x8003341C,0x80033430,ZZ_32FDC_440);
ZZ_MARK_TARGET(0x80033430,0x80033464,ZZ_32FDC_454);
