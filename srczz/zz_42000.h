#ifdef ZZ_INCLUDE_CODE
ZZ_42000:
	SP -= 40;
	EMU_Write32(SP + 28,S3); //+ 0x1C
	S3 = A0;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A1;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A2;
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 32,RA); //+ 0x20
	RA = 0x8004202C; //ZZ_42000_2C
	S2 = A3;
	ZZ_CLOCKCYCLES(11,0x80042864);
	goto ZZ_42864;
ZZ_42000_2C:
	ZZ_CLOCKCYCLES(2,0x8004204C);
	goto ZZ_42000_4C;
ZZ_42000_34:
	RA = 0x8004203C; //ZZ_42000_3C
	ZZ_CLOCKCYCLES(2,0x80042898);
	goto ZZ_42898;
ZZ_42000_3C:
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(2,0x800422C4);
		goto ZZ_42000_2C4;
	}
	V0 = -1;
	RA = 0x8004204C; //ZZ_42000_4C
	ZZ_CLOCKCYCLES(4,0x800422E4);
	goto ZZ_422E4;
ZZ_42000_4C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19312); //+ 0x4B70
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19316); //+ 0x4B74
	V0 += 1;
	V0 &= 0x3F;
	if (V0 == V1)
	{
		ZZ_CLOCKCYCLES(8,0x80042034);
		goto ZZ_42000_34;
	}
	RA = 0x80042074; //ZZ_42000_74
	A0 = R0;
	ZZ_CLOCKCYCLES(10,0x8003E870);
	goto ZZ_3E870;
ZZ_42000_74:
	V1 = 0x80050000;
	V1 += 19060;
	A0 = 0x1;
	EMU_Write32(V1,A0);
	V1 = 0x80050000;
	V1 = EMU_ReadU8(V1 + 19053); //+ 0x4A6D
	AT = 0x80050000;
	EMU_Write32(AT + 19320,V0); //+ 0x4B78
	if (!V1)
	{
		A0 = 0x4000000;
		ZZ_CLOCKCYCLES(10,0x800420EC);
		goto ZZ_42000_EC;
	}
	A0 = 0x4000000;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19316); //+ 0x4B74
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(17,0x8004214C);
		goto ZZ_42000_14C;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19276); //+ 0x4B4C
	V0 = EMU_ReadU32(V0);
	V1 = 0x1000000;
	V0 &= V1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(25,0x8004214C);
		goto ZZ_42000_14C;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19064); //+ 0x4A78
	if (V0)
	{
		ZZ_CLOCKCYCLES(30,0x8004214C);
		goto ZZ_42000_14C;
	}
	ZZ_CLOCKCYCLES(30,0x800420EC);
ZZ_42000_EC:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19264); //+ 0x4B40
	ZZ_CLOCKCYCLES(2,0x800420F4);
ZZ_42000_F4:
	V0 = EMU_ReadU32(V1);
	V0 &= A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x800420F4);
		goto ZZ_42000_F4;
	}
	A0 = S0;
	ZZ_JUMPREGISTER_BEGIN(S3);
	RA = 0x80042118; //ZZ_42000_118
	A1 = S2;
	ZZ_CLOCKCYCLES_JR(9);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (S3,80042110)
	ZZ_JUMPREGISTER_END();
ZZ_42000_118:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 19320); //+ 0x4B78
	V0 = 0x80050000;
	V0 += 19296;
	EMU_Write32(V0,S3);
	AT = 0x80050000;
	EMU_Write32(AT + 19300,S0); //+ 0x4B64
	AT = 0x80050000;
	EMU_Write32(AT + 19304,S2); //+ 0x4B68
	RA = 0x80042144; //ZZ_42000_144
	ZZ_CLOCKCYCLES(11,0x8003E870);
	goto ZZ_3E870;
ZZ_42000_144:
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x800422C4);
	goto ZZ_42000_2C4;
ZZ_42000_14C:
	A1 = 0x80040000;
	A1 += 8932;
	RA = 0x8004215C; //ZZ_42000_15C
	A0 = 0x2;
	ZZ_CLOCKCYCLES(4,0x8003E754);
	goto ZZ_3E754;
ZZ_42000_15C:
	if (!S1)
	{
		A2 = R0;
		ZZ_CLOCKCYCLES(2,0x8004220C);
		goto ZZ_42000_20C;
	}
	A2 = R0;
	T0 = 0x80060000;
	T0 -= 6312;
	A3 = S0;
	V0 = S1;
	ZZ_CLOCKCYCLES(6,0x80042174);
ZZ_42000_174:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x80042180);
		goto ZZ_42000_180;
	}
	V0 += 3;
	ZZ_CLOCKCYCLES(3,0x80042180);
ZZ_42000_180:
	V0 = (int32_t)V0 >> 2;
	V0 = (int32_t)A2 < (int32_t)V0;
	if (!V0)
	{
		A0 = A2 << 2;
		ZZ_CLOCKCYCLES(4,0x800421C4);
		goto ZZ_42000_1C4;
	}
	A0 = A2 << 2;
	A1 = EMU_ReadU32(A3);
	A3 += 4;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	A2 += 1;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 5;
	V0 += T0;
	A0 += V0;
	EMU_Write32(A0,A1);
	V0 = S1;
	ZZ_CLOCKCYCLES(17,0x80042174);
	goto ZZ_42000_174;
ZZ_42000_1C4:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19312); //+ 0x4B70
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	A0 = V0 << 1;
	A0 += V0;
	A0 <<= 5;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 5;
	V1 = 0x80060000;
	V1 -= 6312;
	V0 += V1;
	AT = 0x80060000;
	AT += A0;
	EMU_Write32(AT - 6320,V0); //+ 0xFFFFE750
	ZZ_CLOCKCYCLES(18,0x80042230);
	goto ZZ_42000_230;
ZZ_42000_20C:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 5;
	AT = 0x80060000;
	AT += V0;
	EMU_Write32(AT - 6320,S0); //+ 0xFFFFE750
	ZZ_CLOCKCYCLES(9,0x80042230);
ZZ_42000_230:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 5;
	AT = 0x80060000;
	AT += V0;
	EMU_Write32(AT - 6316,S2); //+ 0xFFFFE754
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19312); //+ 0x4B70
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 5;
	AT = 0x80060000;
	AT += V0;
	EMU_Write32(AT - 6324,S3); //+ 0xFFFFE74C
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19312); //+ 0x4B70
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 19320); //+ 0x4B78
	V0 += 1;
	V0 &= 0x3F;
	AT = 0x80050000;
	EMU_Write32(AT + 19312,V0); //+ 0x4B70
	RA = 0x800422A0; //ZZ_42000_2A0
	ZZ_CLOCKCYCLES(28,0x8003E870);
	goto ZZ_3E870;
ZZ_42000_2A0:
	RA = 0x800422A8; //ZZ_42000_2A8
	ZZ_CLOCKCYCLES(2,0x800422E4);
	goto ZZ_422E4;
ZZ_42000_2A8:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19312); //+ 0x4B70
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 19316); //+ 0x4B74
	V0 = V0 - V1;
	V0 &= 0x3F;
	ZZ_CLOCKCYCLES(7,0x800422C4);
ZZ_42000_2C4:
	RA = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80041FF0,ZZ_41FDC_14);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80042000,0x8004202C,ZZ_42000);
ZZ_MARK_TARGET(0x8004202C,0x80042034,ZZ_42000_2C);
ZZ_MARK_TARGET(0x80042034,0x8004203C,ZZ_42000_34);
ZZ_MARK_TARGET(0x8004203C,0x8004204C,ZZ_42000_3C);
ZZ_MARK_TARGET(0x8004204C,0x80042074,ZZ_42000_4C);
ZZ_MARK_TARGET(0x80042074,0x800420EC,ZZ_42000_74);
ZZ_MARK_TARGET(0x800420EC,0x800420F4,ZZ_42000_EC);
ZZ_MARK_TARGET(0x800420F4,0x80042118,ZZ_42000_F4);
ZZ_MARK_TARGET(0x80042118,0x80042144,ZZ_42000_118);
ZZ_MARK_TARGET(0x80042144,0x8004214C,ZZ_42000_144);
ZZ_MARK_TARGET(0x8004214C,0x8004215C,ZZ_42000_14C);
ZZ_MARK_TARGET(0x8004215C,0x80042174,ZZ_42000_15C);
ZZ_MARK_TARGET(0x80042174,0x80042180,ZZ_42000_174);
ZZ_MARK_TARGET(0x80042180,0x800421C4,ZZ_42000_180);
ZZ_MARK_TARGET(0x800421C4,0x8004220C,ZZ_42000_1C4);
ZZ_MARK_TARGET(0x8004220C,0x80042230,ZZ_42000_20C);
ZZ_MARK_TARGET(0x80042230,0x800422A0,ZZ_42000_230);
ZZ_MARK_TARGET(0x800422A0,0x800422A8,ZZ_42000_2A0);
ZZ_MARK_TARGET(0x800422A8,0x800422C4,ZZ_42000_2A8);
ZZ_MARK_TARGET(0x800422C4,0x800422E4,ZZ_42000_2C4);
