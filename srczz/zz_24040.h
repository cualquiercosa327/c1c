#ifdef ZZ_INCLUDE_CODE
ZZ_24040:
	SP -= 64;
	EMU_Write32(SP + 36,S1); //+ 0x24
	S1 = A0;
	EMU_Write32(SP + 32,S0); //+ 0x20
	S0 = A1;
	EMU_Write32(SP + 40,S2); //+ 0x28
	S2 = A2;
	EMU_Write32(SP + 48,S4); //+ 0x30
	S4 = A3;
	EMU_Write32(SP + 52,S5); //+ 0x34
	S5 = EMU_ReadU32(SP + 80); //+ 0x50
	V1 = -26;
	EMU_Write32(SP + 56,RA); //+ 0x38
	if (!S0)
	{
		EMU_Write32(SP + 44,S3); //+ 0x2C
		ZZ_CLOCKCYCLES(15,0x80024368);
		goto ZZ_24040_328;
	}
	EMU_Write32(SP + 44,S3); //+ 0x2C
	if (!S1)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(17,0x80024088);
		goto ZZ_24040_48;
	}
	V0 = 0x1;
	EMU_Write32(S1 + 244,V0); //+ 0xF4
	ZZ_CLOCKCYCLES(18,0x80024088);
ZZ_24040_48:
	V0 = EMU_ReadU32(S0 + 236); //+ 0xEC
	if (!V0)
	{
		EMU_Write32(S0 + 124,S1); //+ 0x7C
		ZZ_CLOCKCYCLES(4,0x80024160);
		goto ZZ_24040_120;
	}
	EMU_Write32(S0 + 124,S1); //+ 0x7C
	V1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	V0 = V1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(V1,S2);
	V1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A0 = S0;
	V0 = V1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(V1,S5);
	V1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A2 = EMU_ReadU32(S0 + 228); //+ 0xE4
	V0 = A1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	V0 = 0xFFFF;
	EMU_Write32(S0 + 228,V1); //+ 0xE4
	V1 -= 104;
	V1 = V1 - S0;
	A2 -= 96;
	A2 = A2 - S0;
	A2 <<= 16;
	V1 |= A2;
	EMU_Write32(A1,V0);
	A1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A3 = EMU_ReadU32(S0 + 224); //+ 0xE0
	V0 = A1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(A1,A3);
	A3 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A2 = SP + 16;
	V0 = A3 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(A3,V1);
	V0 = EMU_ReadU32(S0 + 236); //+ 0xEC
	A1 = 0x8;
	RA = 0x80024130; //ZZ_24040_F0
	EMU_Write32(S0 + 224,V0); //+ 0xE0
	ZZ_CLOCKCYCLES(42,0x800201DC);
	goto ZZ_201DC;
ZZ_24040_F0:
	V1 = V0;
	V0 = -26;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < -254;
		ZZ_CLOCKCYCLES(4,0x8002414C);
		goto ZZ_24040_10C;
	}
	V0 = (int32_t)V1 < -254;
	if (!V0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(6,0x80024378);
		goto ZZ_24040_338;
	}
	V0 = V1;
	S3 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(7,0x8002414C);
ZZ_24040_10C:
	if (!S1)
	{
		V0 = (int32_t)V1 < -254;
		ZZ_CLOCKCYCLES(2,0x80024164);
		goto ZZ_24040_124;
	}
	V0 = (int32_t)V1 < -254;
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	EMU_Write32(S1 + 244,V0); //+ 0xF4
	ZZ_CLOCKCYCLES(5,0x80024160);
ZZ_24040_120:
	V0 = (int32_t)V1 < -254;
	ZZ_CLOCKCYCLES(1,0x80024164);
ZZ_24040_124:
	if (V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(2,0x80024298);
		goto ZZ_24040_258;
	}
	V0 = 0xFF;
	V1 = EMU_ReadU32(S0 + 32); //+ 0x20
	V0 = EMU_ReadU32(V1 + 16); //+ 0x10
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	A0 = (int32_t)S2 >> 8;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (!V0)
	{
		V0 = A0 << 1;
		ZZ_CLOCKCYCLES(11,0x800241A8);
		goto ZZ_24040_168;
	}
	V0 = A0 << 1;
	V1 = EMU_ReadU32(V1 + 28); //+ 0x1C
	V0 += V1;
	S3 = EMU_ReadU16(V0);
	ZZ_CLOCKCYCLES(17,0x800241AC);
	goto ZZ_24040_16C;
ZZ_24040_168:
	S3 = 0xFF;
	ZZ_CLOCKCYCLES(1,0x800241AC);
ZZ_24040_16C:
	if (!S1)
	{
		V0 = S3 ^ 0xFF;
		ZZ_CLOCKCYCLES(2,0x800241BC);
		goto ZZ_24040_17C;
	}
	V0 = S3 ^ 0xFF;
	V0 = R0 < V0;
	EMU_Write32(S1 + 244,V0); //+ 0xF4
	ZZ_CLOCKCYCLES(4,0x800241BC);
ZZ_24040_17C:
	V0 = S3 & 0x8000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x80024294);
		goto ZZ_24040_254;
	}
	EMU_Write32(S0 + 316,S2); //+ 0x13C
	if ((int32_t)S4 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(6,0x80024200);
		goto ZZ_24040_1C0;
	}
	A0 = R0;
	A3 = S5;
	ZZ_CLOCKCYCLES(7,0x800241D8);
ZZ_24040_198:
	V1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A0 += 1;
	V0 = V1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	V0 = EMU_ReadU32(A3);
	EMU_Write32(V1,V0);
	V0 = (int32_t)A0 < (int32_t)S4;
	if (V0)
	{
		A3 += 4;
		ZZ_CLOCKCYCLES(10,0x800241D8);
		goto ZZ_24040_198;
	}
	A3 += 4;
	ZZ_CLOCKCYCLES(10,0x80024200);
ZZ_24040_1C0:
	A0 = S0;
	A1 = 0x3;
	V1 = EMU_ReadU32(A0 + 220); //+ 0xDC
	A2 = EMU_ReadU32(A0 + 220); //+ 0xDC
	A3 = EMU_ReadU32(A0 + 228); //+ 0xE4
	V0 = A2 + 4;
	EMU_Write32(A0 + 220,V0); //+ 0xDC
	V0 = 0xFFFF;
	A3 -= 96;
	A3 = A3 - A0;
	A3 <<= 16;
	EMU_Write32(A0 + 228,V1); //+ 0xE4
	EMU_Write32(A2,V0);
	A2 = EMU_ReadU32(A0 + 220); //+ 0xDC
	T0 = EMU_ReadU32(A0 + 224); //+ 0xE0
	V0 = A2 + 4;
	EMU_Write32(A0 + 220,V0); //+ 0xDC
	EMU_Write32(A2,T0);
	T0 = EMU_ReadU32(A0 + 220); //+ 0xDC
	A2 = R0;
	V0 = T0 + 4;
	EMU_Write32(A0 + 220,V0); //+ 0xDC
	V0 = S4 << 2;
	V1 = V1 - V0;
	V1 -= 96;
	V1 = V1 - A0;
	V1 |= A3;
	EMU_Write32(T0,V1);
	V1 = EMU_ReadU32(A0 + 32); //+ 0x20
	V0 = S3 & 0x7FFF;
	V1 = EMU_ReadU32(V1 + 20); //+ 0x14
	V0 <<= 2;
	V0 += V1;
	RA = 0x8002428C; //ZZ_24040_24C
	EMU_Write32(A0 + 224,V0); //+ 0xE0
	ZZ_CLOCKCYCLES(35,0x800201DC);
	goto ZZ_201DC;
ZZ_24040_24C:
	ZZ_CLOCKCYCLES(2,0x80024378);
	goto ZZ_24040_338;
ZZ_24040_254:
	V0 = 0xFF;
	ZZ_CLOCKCYCLES(1,0x80024298);
ZZ_24040_258:
	if (S3 == V0)
	{
		V0 = 0x1800;
		ZZ_CLOCKCYCLES(2,0x80024374);
		goto ZZ_24040_334;
	}
	V0 = 0x1800;
	A0 = EMU_ReadU32(S0 + 208); //+ 0xD0
	if (S2 == V0)
	{
		V0 = 0x1900;
		ZZ_CLOCKCYCLES(5,0x800242BC);
		goto ZZ_24040_27C;
	}
	V0 = 0x1900;
	if (S2 == V0)
	{
		V0 = 0x2500;
		ZZ_CLOCKCYCLES(7,0x800242BC);
		goto ZZ_24040_27C;
	}
	V0 = 0x2500;
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(9,0x800242C4);
		goto ZZ_24040_284;
	}
	ZZ_CLOCKCYCLES(9,0x800242BC);
ZZ_24040_27C:
	V0 = -3;
	A0 &= V0;
	ZZ_CLOCKCYCLES(2,0x800242C4);
ZZ_24040_284:
	V0 = EMU_ReadU32(S0 + 32); //+ 0x20
	V1 = EMU_ReadU32(V0 + 32); //+ 0x20
	V0 = S3 << 4;
	V0 += V1;
	V1 = EMU_ReadU32(GP + 696); //+ 0x2B8
	A1 = EMU_ReadU32(V0);
	if (S0 != V1)
	{
		V0 = A0 & A1;
		ZZ_CLOCKCYCLES(9,0x80024314);
		goto ZZ_24040_2D4;
	}
	V0 = A0 & A1;
	V1 = EMU_ReadU32(S0 + 296); //+ 0x128
	V0 = V1 - 3;
	V0 = V0 < 2;
	if (V0)
	{
		V0 = A0 | 0x1002;
		ZZ_CLOCKCYCLES(15,0x80024310);
		goto ZZ_24040_2D0;
	}
	V0 = A0 | 0x1002;
	V0 = 0x2;
	if (V1 != V0)
	{
		V0 = A0 & A1;
		ZZ_CLOCKCYCLES(18,0x80024314);
		goto ZZ_24040_2D4;
	}
	V0 = A0 & A1;
	V0 = A0 | 0x1002;
	ZZ_CLOCKCYCLES(19,0x80024310);
ZZ_24040_2D0:
	V0 &= A1;
	ZZ_CLOCKCYCLES(1,0x80024314);
ZZ_24040_2D4:
	if (V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(2,0x80024360);
		goto ZZ_24040_320;
	}
	V0 = 0xFF;
	V0 = 0x1800;
	if (S2 == V0)
	{
		EMU_Write32(S0 + 316,S2); //+ 0x13C
		ZZ_CLOCKCYCLES(5,0x80024334);
		goto ZZ_24040_2F4;
	}
	EMU_Write32(S0 + 316,S2); //+ 0x13C
	V0 = 0x1900;
	if (S2 != V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(8,0x80024348);
		goto ZZ_24040_308;
	}
	A0 = S0;
	ZZ_CLOCKCYCLES(8,0x80024334);
ZZ_24040_2F4:
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	V1 = 0x10000;
	V0 |= V1;
	EMU_Write32(S0 + 200,V0); //+ 0xC8
	A0 = S0;
	ZZ_CLOCKCYCLES(5,0x80024348);
ZZ_24040_308:
	A1 = S3;
	A2 = S4;
	RA = 0x80024358; //ZZ_24040_318
	A3 = S5;
	ZZ_CLOCKCYCLES(4,0x8001D698);
	goto ZZ_1D698;
ZZ_24040_318:
	V0 = -255;
	ZZ_CLOCKCYCLES(2,0x80024378);
	goto ZZ_24040_338;
ZZ_24040_320:
	if (S3 == V0)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(2,0x80024378);
		goto ZZ_24040_338;
	}
	V0 = -255;
	ZZ_CLOCKCYCLES(2,0x80024368);
ZZ_24040_328:
	if (!S1)
	{
		V0 = -255;
		ZZ_CLOCKCYCLES(2,0x80024378);
		goto ZZ_24040_338;
	}
	V0 = -255;
	EMU_Write32(S1 + 244,R0); //+ 0xF4
	ZZ_CLOCKCYCLES(3,0x80024374);
ZZ_24040_334:
	V0 = -255;
	ZZ_CLOCKCYCLES(1,0x80024378);
ZZ_24040_338:
	RA = EMU_ReadU32(SP + 56); //+ 0x38
	S5 = EMU_ReadU32(SP + 52); //+ 0x34
	S4 = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
	ZZ_JUMPREGISTER(0x80025118,ZZ_24CC8_450);
	ZZ_JUMPREGISTER(0x8001CE38,ZZ_1CDD0_68);
	ZZ_JUMPREGISTER(0x8001D190,ZZ_1D11C_74);
	ZZ_JUMPREGISTER(0x8001690C,ZZ_167A4_168);
	ZZ_JUMPREGISTER(0x8001ED54,ZZ_1EB28_22C);
	//ZZ_JUMPREGISTER(0x80023D18,ZZ_201DC_3B3C);
  ZZ_JUMPREGISTER(0x8002C168,ZZ_2BE8C_2DC);
	ZZ_JUMPREGISTER(0x80032A90,ZZ_326D8_3B8);
	ZZ_JUMPREGISTER(0x8002D230,ZZ_2D18C_A4);
	ZZ_JUMPREGISTER(0x8002D360,ZZ_2D18C_1D4);
	ZZ_JUMPREGISTER(0x8002D284,ZZ_2D18C_F8);
	ZZ_JUMPREGISTER(0x8002D084,ZZ_2CD9C_2E8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80024040,0x80024088,ZZ_24040);
ZZ_MARK_TARGET(0x80024088,0x80024130,ZZ_24040_48);
ZZ_MARK_TARGET(0x80024130,0x8002414C,ZZ_24040_F0);
ZZ_MARK_TARGET(0x8002414C,0x80024160,ZZ_24040_10C);
ZZ_MARK_TARGET(0x80024160,0x80024164,ZZ_24040_120);
ZZ_MARK_TARGET(0x80024164,0x800241A8,ZZ_24040_124);
ZZ_MARK_TARGET(0x800241A8,0x800241AC,ZZ_24040_168);
ZZ_MARK_TARGET(0x800241AC,0x800241BC,ZZ_24040_16C);
ZZ_MARK_TARGET(0x800241BC,0x800241D8,ZZ_24040_17C);
ZZ_MARK_TARGET(0x800241D8,0x80024200,ZZ_24040_198);
ZZ_MARK_TARGET(0x80024200,0x8002428C,ZZ_24040_1C0);
ZZ_MARK_TARGET(0x8002428C,0x80024294,ZZ_24040_24C);
ZZ_MARK_TARGET(0x80024294,0x80024298,ZZ_24040_254);
ZZ_MARK_TARGET(0x80024298,0x800242BC,ZZ_24040_258);
ZZ_MARK_TARGET(0x800242BC,0x800242C4,ZZ_24040_27C);
ZZ_MARK_TARGET(0x800242C4,0x80024310,ZZ_24040_284);
ZZ_MARK_TARGET(0x80024310,0x80024314,ZZ_24040_2D0);
ZZ_MARK_TARGET(0x80024314,0x80024334,ZZ_24040_2D4);
ZZ_MARK_TARGET(0x80024334,0x80024348,ZZ_24040_2F4);
ZZ_MARK_TARGET(0x80024348,0x80024358,ZZ_24040_308);
ZZ_MARK_TARGET(0x80024358,0x80024360,ZZ_24040_318);
ZZ_MARK_TARGET(0x80024360,0x80024368,ZZ_24040_320);
ZZ_MARK_TARGET(0x80024368,0x80024374,ZZ_24040_328);
ZZ_MARK_TARGET(0x80024374,0x80024378,ZZ_24040_334);
ZZ_MARK_TARGET(0x80024378,0x800243A0,ZZ_24040_338);
