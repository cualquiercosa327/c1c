#ifdef ZZ_INCLUDE_CODE
ZZ_45E50:
	SP -= 32;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = A0;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22772); //+ 0x58F4
	EMU_Write32(SP + 28,RA); //+ 0x1C
	V0 = EMU_ReadU32(A0);
	V1 = 0xB0000;
	V0 |= V1;
	EMU_Write32(A0,V0);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	EMU_Write16(V0 + 384,R0); //+ 0x180
	EMU_Write16(V0 + 386,R0); //+ 0x182
	EMU_Write16(V0 + 426,R0); //+ 0x1AA
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	AT = 0x80050000;
	EMU_Write32(AT + 22780,R0); //+ 0x58FC
	AT = 0x80050000;
	EMU_Write32(AT + 22784,R0); //+ 0x5900
	AT = 0x80050000;
	EMU_Write16(AT + 22752,R0); //+ 0x58E0
	V0 = (int32_t)V0 < 240;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(29,0x80045F00);
		goto ZZ_45E50_B0;
	}
	ZZ_CLOCKCYCLES(29,0x80045EC4);
ZZ_45E50_74:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(15,0x80045EC4);
		goto ZZ_45E50_74;
	}
	ZZ_CLOCKCYCLES(15,0x80045F00);
ZZ_45E50_B0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	EMU_Write16(V0 + 384,R0); //+ 0x180
	EMU_Write16(V0 + 386,R0); //+ 0x182
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	AT = 0x80050000;
	EMU_Write32(AT + 22748,R0); //+ 0x58DC
	V0 &= 0x7FF;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80045F90);
		goto ZZ_45E50_140;
	}
	ZZ_CLOCKCYCLES(11,0x80045F2C);
ZZ_45E50_DC:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22748); //+ 0x58DC
	V0 += 1;
	AT = 0x80050000;
	EMU_Write32(AT + 22748,V0); //+ 0x58DC
	V0 = (int32_t)V0 < 5001;
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x80045F70);
		goto ZZ_45E50_120;
	}
	A0 = 0x80010000;
	A0 += 5728;
	A1 = 0x80010000;
	A1 += 5744;
	RA = 0x80045F68; //ZZ_45E50_118
	ZZ_CLOCKCYCLES(15,0x8003D730);
	goto ZZ_3D730;
ZZ_45E50_118:
	ZZ_CLOCKCYCLES(2,0x80045F90);
	goto ZZ_45E50_140;
ZZ_45E50_120:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	V0 &= 0x7FF;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x80045F2C);
		goto ZZ_45E50_DC;
	}
	ZZ_CLOCKCYCLES(8,0x80045F90);
ZZ_45E50_140:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	V0 = 0x2;
	AT = 0x80050000;
	EMU_Write32(AT + 22788,V0); //+ 0x5904
	V0 = 0x3;
	AT = 0x80050000;
	EMU_Write32(AT + 22792,V0); //+ 0x5908
	V0 = 0x8;
	AT = 0x80050000;
	EMU_Write32(AT + 22796,V0); //+ 0x590C
	V0 = 0x7;
	AT = 0x80050000;
	EMU_Write32(AT + 22800,V0); //+ 0x5910
	V0 = 0x4;
	EMU_Write16(V1 + 428,V0); //+ 0x1AC
	V0 = 0xFFFF;
	EMU_Write16(V1 + 388,R0); //+ 0x184
	EMU_Write16(V1 + 390,R0); //+ 0x186
	EMU_Write16(V1 + 396,V0); //+ 0x18C
	EMU_Write16(V1 + 398,V0); //+ 0x18E
	EMU_Write16(V1 + 408,R0); //+ 0x198
	EMU_Write16(V1 + 410,R0); //+ 0x19A
	if (S0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(25,0x8004632C);
		goto ZZ_45E50_4DC;
	}
	V0 = R0;
	A0 = 0x80050000;
	A0 += 22816;
	A1 = 0x10;
	V0 = 0x200;
	EMU_Write16(V1 + 400,R0); //+ 0x190
	EMU_Write16(V1 + 402,R0); //+ 0x192
	EMU_Write16(V1 + 404,R0); //+ 0x194
	EMU_Write16(V1 + 406,R0); //+ 0x196
	EMU_Write16(V1 + 432,R0); //+ 0x1B0
	EMU_Write16(V1 + 434,R0); //+ 0x1B2
	EMU_Write16(V1 + 436,R0); //+ 0x1B4
	EMU_Write16(V1 + 438,R0); //+ 0x1B6
	AT = 0x80050000;
	EMU_Write16(AT + 22752,V0); //+ 0x58E0
	RA = 0x80046034; //ZZ_45E50_1E4
	ZZ_CLOCKCYCLES(41,0x8004636C);
	goto ZZ_4636C;
ZZ_45E50_1E4:
	A0 = R0;
	A2 = 0x3FFF;
	A1 = 0x200;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	ZZ_CLOCKCYCLES(5,0x80046048);
ZZ_45E50_1F8:
	EMU_Write16(V1,R0);
	EMU_Write16(V1 + 2,R0); //+ 0x2
	EMU_Write16(V1 + 4,A2); //+ 0x4
	EMU_Write16(V1 + 6,A1); //+ 0x6
	EMU_Write16(V1 + 8,R0); //+ 0x8
	EMU_Write16(V1 + 10,R0); //+ 0xA
	A0 += 1;
	V0 = (int32_t)A0 < 24;
	if (V0)
	{
		V1 += 16;
		ZZ_CLOCKCYCLES(11,0x80046048);
		goto ZZ_45E50_1F8;
	}
	V1 += 16;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V1 + 392); //+ 0x188
	V0 = 0xFFFF;
	EMU_Write16(V1 + 392,V0); //+ 0x188
	V0 = EMU_ReadU16(V1 + 394); //+ 0x18A
	V0 |= 0xFF;
	EMU_Write16(V1 + 394,V0); //+ 0x18A
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(26,0x800460D8);
	goto ZZ_45E50_288;
ZZ_45E50_260:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800460D8);
ZZ_45E50_288:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x800460B0);
		goto ZZ_45E50_260;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x80046124);
	goto ZZ_45E50_2D4;
ZZ_45E50_2AC:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046124);
ZZ_45E50_2D4:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x800460FC);
		goto ZZ_45E50_2AC;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x80046170);
	goto ZZ_45E50_320;
ZZ_45E50_2F8:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046170);
ZZ_45E50_320:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x80046148);
		goto ZZ_45E50_2F8;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x800461BC);
	goto ZZ_45E50_36C;
ZZ_45E50_344:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800461BC);
ZZ_45E50_36C:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80046194);
		goto ZZ_45E50_344;
	}
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V1 + 396); //+ 0x18C
	V0 = 0xFFFF;
	EMU_Write16(V1 + 396,V0); //+ 0x18C
	V0 = EMU_ReadU16(V1 + 398); //+ 0x18E
	V0 |= 0xFF;
	EMU_Write16(V1 + 398,V0); //+ 0x18E
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(20,0x80046234);
	goto ZZ_45E50_3E4;
ZZ_45E50_3BC:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046234);
ZZ_45E50_3E4:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x8004620C);
		goto ZZ_45E50_3BC;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x80046280);
	goto ZZ_45E50_430;
ZZ_45E50_408:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046280);
ZZ_45E50_430:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x80046258);
		goto ZZ_45E50_408;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x800462CC);
	goto ZZ_45E50_47C;
ZZ_45E50_454:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800462CC);
ZZ_45E50_47C:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x800462A4);
		goto ZZ_45E50_454;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x80046318);
	goto ZZ_45E50_4C8;
ZZ_45E50_4A0:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046318);
ZZ_45E50_4C8:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(5,0x800462F0);
		goto ZZ_45E50_4A0;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(5,0x8004632C);
ZZ_45E50_4DC:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22756); //+ 0x58E4
	V1 = 0x1;
	AT = 0x80050000;
	EMU_Write32(AT + 22804,V1); //+ 0x5914
	V1 = 0xC000;
	EMU_Write16(A0 + 426,V1); //+ 0x1AA
	AT = 0x80050000;
	EMU_Write32(AT + 22808,R0); //+ 0x5918
	AT = 0x80050000;
	EMU_Write32(AT + 22812,R0); //+ 0x591C
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(16);
	ZZ_JUMPREGISTER(0x80046FCC,ZZ_46FB0_1C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80045E50,0x80045EC4,ZZ_45E50);
ZZ_MARK_TARGET(0x80045EC4,0x80045F00,ZZ_45E50_74);
ZZ_MARK_TARGET(0x80045F00,0x80045F2C,ZZ_45E50_B0);
ZZ_MARK_TARGET(0x80045F2C,0x80045F68,ZZ_45E50_DC);
ZZ_MARK_TARGET(0x80045F68,0x80045F70,ZZ_45E50_118);
ZZ_MARK_TARGET(0x80045F70,0x80045F90,ZZ_45E50_120);
ZZ_MARK_TARGET(0x80045F90,0x80046034,ZZ_45E50_140);
ZZ_MARK_TARGET(0x80046034,0x80046048,ZZ_45E50_1E4);
ZZ_MARK_TARGET(0x80046048,0x800460B0,ZZ_45E50_1F8);
ZZ_MARK_TARGET(0x800460B0,0x800460D8,ZZ_45E50_260);
ZZ_MARK_TARGET(0x800460D8,0x800460FC,ZZ_45E50_288);
ZZ_MARK_TARGET(0x800460FC,0x80046124,ZZ_45E50_2AC);
ZZ_MARK_TARGET(0x80046124,0x80046148,ZZ_45E50_2D4);
ZZ_MARK_TARGET(0x80046148,0x80046170,ZZ_45E50_2F8);
ZZ_MARK_TARGET(0x80046170,0x80046194,ZZ_45E50_320);
ZZ_MARK_TARGET(0x80046194,0x800461BC,ZZ_45E50_344);
ZZ_MARK_TARGET(0x800461BC,0x8004620C,ZZ_45E50_36C);
ZZ_MARK_TARGET(0x8004620C,0x80046234,ZZ_45E50_3BC);
ZZ_MARK_TARGET(0x80046234,0x80046258,ZZ_45E50_3E4);
ZZ_MARK_TARGET(0x80046258,0x80046280,ZZ_45E50_408);
ZZ_MARK_TARGET(0x80046280,0x800462A4,ZZ_45E50_430);
ZZ_MARK_TARGET(0x800462A4,0x800462CC,ZZ_45E50_454);
ZZ_MARK_TARGET(0x800462CC,0x800462F0,ZZ_45E50_47C);
ZZ_MARK_TARGET(0x800462F0,0x80046318,ZZ_45E50_4A0);
ZZ_MARK_TARGET(0x80046318,0x8004632C,ZZ_45E50_4C8);
ZZ_MARK_TARGET(0x8004632C,0x8004636C,ZZ_45E50_4DC);
