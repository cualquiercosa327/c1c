#ifdef ZZ_INCLUDE_CODE
ZZ_1F30C:
	SP -= 96;
	EMU_Write32(SP + 72,S0); //+ 0x48
	S0 = A0;
	EMU_Write32(SP + 92,RA); //+ 0x5C
	EMU_Write32(SP + 88,S4); //+ 0x58
	EMU_Write32(SP + 84,S3); //+ 0x54
	EMU_Write32(SP + 80,S2); //+ 0x50
	EMU_Write32(SP + 76,S1); //+ 0x4C
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x80;
	if (!V0)
	{
		V0 = 0x100;
		ZZ_CLOCKCYCLES(13,0x8001F6AC);
		goto ZZ_1F30C_3A0;
	}
	V0 = 0x100;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 6352); //+ 0x18D0
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(18,0x8001F6AC);
		goto ZZ_1F30C_3A0;
	}
	V0 = EMU_ReadU32(S0 + 288); //+ 0x120
	S2 = 0x80050000;
	S2 += 11300;
	V0 &= 0x4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(24,0x8001F384);
		goto ZZ_1F30C_78;
	}
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	V0 &= 0x2000;
	if (!V0)
	{
		S2 += 16;
		ZZ_CLOCKCYCLES(29,0x8001F384);
		goto ZZ_1F30C_78;
	}
	S2 += 16;
	S2 += 64;
	ZZ_CLOCKCYCLES(30,0x8001F384);
ZZ_1F30C_78:
	V1 = EMU_ReadU32(S0 + 296); //+ 0x128
	V0 = 0x5;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(4,0x8001F39C);
		goto ZZ_1F30C_90;
	}
	S2 = 0x80050000;
	S2 += 11364;
	ZZ_CLOCKCYCLES(6,0x8001F39C);
ZZ_1F30C_90:
	V0 = EMU_ReadU32(S0 + 288); //+ 0x120
	V0 &= 0x8;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001F3CC);
		goto ZZ_1F30C_C0;
	}
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	S2 = 0x80050000;
	S2 += 11332;
	V0 &= 0x2000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001F3CC);
		goto ZZ_1F30C_C0;
	}
	S2 += 64;
	ZZ_CLOCKCYCLES(12,0x8001F3CC);
ZZ_1F30C_C0:
	A1 = EMU_ReadU32(S0 + 288); //+ 0x120
	V0 = A1 & 0x10;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001F3E8);
		goto ZZ_1F30C_DC;
	}
	S2 = 0x80050000;
	S2 += 11348;
	ZZ_CLOCKCYCLES(7,0x8001F3E8);
ZZ_1F30C_DC:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 6368); //+ 0xFFFFE720
	V1 &= 0xF000;
	V1 >>= 12;
	V0 = V1 << 1;
	V0 += V1;
	A0 = V0 << 2;
	V0 = 0x8;
	AT = 0x80050000;
	AT += A0;
	V1 = EMU_ReadU32(AT + 11108); //+ 0x2B64
	AT = 0x80050000;
	AT += A0;
	S4 = EMU_ReadU32(AT + 11116); //+ 0x2B6C
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(17,0x8001F608);
		goto ZZ_1F30C_2FC;
	}
	AT = 0x80050000;
	AT += A0;
	V0 = EMU_ReadU32(AT + 11112); //+ 0x2B68
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 31024); //+ 0x7930
	V0 += V1;
	V1 = EMU_ReadU32(S0 + 180); //+ 0xB4
	S3 = V0 & 0xFFF;
	S1 = S3 - V1;
	if ((int32_t)S1 >= 0)
	{
		V0 = (int32_t)S1 < 2049;
		ZZ_CLOCKCYCLES(29,0x8001F464);
		goto ZZ_1F30C_158;
	}
	V0 = (int32_t)S1 < 2049;
	S1 = V1 - S3;
	V0 = (int32_t)S1 < 2049;
	ZZ_CLOCKCYCLES(31,0x8001F464);
ZZ_1F30C_158:
	if (V0)
	{
		V0 = A1 & 0x8;
		ZZ_CLOCKCYCLES(2,0x8001F478);
		goto ZZ_1F30C_16C;
	}
	V0 = A1 & 0x8;
	V0 = 0x1000;
	S1 = V0 - S1;
	V0 = A1 & 0x8;
	ZZ_CLOCKCYCLES(5,0x8001F478);
ZZ_1F30C_16C:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001F570);
		goto ZZ_1F30C_264;
	}
	RA = 0x8001F488; //ZZ_1F30C_17C
	A0 = S1;
	ZZ_CLOCKCYCLES(4,0x800390D0);
	goto ZZ_390D0;
ZZ_1F30C_17C:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(V1 + 132); //+ 0x84
	A0 = V0;
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001F4AC);
		goto ZZ_1F30C_1A0;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(9,0x8001F4AC);
ZZ_1F30C_1A0:
	V0 = EMU_ReadU32(S2);
	EMU_SMultiply(V1,V0);
	V1 = LO;
	if ((int32_t)V1 >= 0)
	{
		V0 = (int32_t)A0 >> 6;
		ZZ_CLOCKCYCLES(6,0x8001F4C8);
		goto ZZ_1F30C_1BC;
	}
	V0 = (int32_t)A0 >> 6;
	V1 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F4C8);
ZZ_1F30C_1BC:
	V1 = (int32_t)V1 >> 10;
	EMU_SMultiply(V1,V0);
	V1 = EMU_ReadU32(S0 + 292); //+ 0x124
	V0 = LO;
	V0 = (int32_t)V0 >> 6;
	A0 = V0 + V1;
	V0 = (int32_t)A0 < 257;
	if (!V0)
	{
		EMU_Write32(S0 + 292,A0); //+ 0x124
		ZZ_CLOCKCYCLES(9,0x8001F4F4);
		goto ZZ_1F30C_1E8;
	}
	EMU_Write32(S0 + 292,A0); //+ 0x124
	EMU_Write32(S0 + 180,S3); //+ 0xB4
	ZZ_CLOCKCYCLES(11,0x8001F5E8);
	goto ZZ_1F30C_2DC;
ZZ_1F30C_1E8:
	V0 = (int32_t)S1 < 1992;
	if (!V0)
	{
		A1 = S3;
		ZZ_CLOCKCYCLES(3,0x8001F518);
		goto ZZ_1F30C_20C;
	}
	A1 = S3;
	A2 = 0xF00;
	A0 = EMU_ReadU32(S0 + 180); //+ 0xB4
	RA = 0x8001F510; //ZZ_1F30C_204
	A3 = R0;
	ZZ_CLOCKCYCLES(7,0x800243A0);
	goto ZZ_243A0;
ZZ_1F30C_204:
	EMU_Write32(S0 + 180,V0); //+ 0xB4
	ZZ_CLOCKCYCLES(2,0x8001F5E8);
	goto ZZ_1F30C_2DC;
ZZ_1F30C_20C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(V0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001F53C);
		goto ZZ_1F30C_230;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(9,0x8001F53C);
ZZ_1F30C_230:
	V0 = EMU_ReadU32(S2 + 12); //+ 0xC
	EMU_SMultiply(V1,V0);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F558);
		goto ZZ_1F30C_24C;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F558);
ZZ_1F30C_24C:
	V0 = (int32_t)V0 >> 10;
	V0 = A0 - V0;
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(S0 + 292,V0); //+ 0x124
		ZZ_CLOCKCYCLES(4,0x8001F5E8);
		goto ZZ_1F30C_2DC;
	}
	EMU_Write32(S0 + 292,V0); //+ 0x124
	EMU_Write32(S0 + 292,R0); //+ 0x124
	ZZ_CLOCKCYCLES(6,0x8001F5E8);
	goto ZZ_1F30C_2DC;
ZZ_1F30C_264:
	V0 = EMU_ReadU32(S0 + 292); //+ 0x124
	V0 = (int32_t)V0 < 257;
	if (V0)
	{
		V0 = (int32_t)S1 < 1025;
		ZZ_CLOCKCYCLES(5,0x8001F58C);
		goto ZZ_1F30C_280;
	}
	V0 = (int32_t)S1 < 1025;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001F5E4);
		goto ZZ_1F30C_2D8;
	}
	ZZ_CLOCKCYCLES(7,0x8001F58C);
ZZ_1F30C_280:
	EMU_Write32(S0 + 180,S3); //+ 0xB4
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(V0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x8001F5B4);
		goto ZZ_1F30C_2A8;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(10,0x8001F5B4);
ZZ_1F30C_2A8:
	V0 = EMU_ReadU32(S2);
	EMU_SMultiply(V1,V0);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F5D0);
		goto ZZ_1F30C_2C4;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F5D0);
ZZ_1F30C_2C4:
	V1 = EMU_ReadU32(S0 + 292); //+ 0x124
	V0 = (int32_t)V0 >> 10;
	V0 += V1;
	EMU_Write32(S0 + 292,V0); //+ 0x124
	ZZ_CLOCKCYCLES(5,0x8001F5E8);
	goto ZZ_1F30C_2DC;
ZZ_1F30C_2D8:
	EMU_Write32(S0 + 292,R0); //+ 0x124
	ZZ_CLOCKCYCLES(1,0x8001F5E8);
ZZ_1F30C_2DC:
	V0 = EMU_ReadU32(S0 + 292); //+ 0x124
	V1 = EMU_ReadU32(S2 + 4); //+ 0x4
	V0 = (int32_t)V1 < (int32_t)V0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F660);
		goto ZZ_1F30C_354;
	}
	EMU_Write32(S0 + 292,V1); //+ 0x124
	ZZ_CLOCKCYCLES(8,0x8001F660);
	goto ZZ_1F30C_354;
ZZ_1F30C_2FC:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(V0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001F62C);
		goto ZZ_1F30C_320;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(9,0x8001F62C);
ZZ_1F30C_320:
	V0 = EMU_ReadU32(S2 + 12); //+ 0xC
	EMU_SMultiply(V1,V0);
	V1 = LO;
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F648);
		goto ZZ_1F30C_33C;
	}
	V1 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F648);
ZZ_1F30C_33C:
	V0 = EMU_ReadU32(S0 + 292); //+ 0x124
	V1 = (int32_t)V1 >> 10;
	V0 = V0 - V1;
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(S0 + 292,V0); //+ 0x124
		ZZ_CLOCKCYCLES(5,0x8001F660);
		goto ZZ_1F30C_354;
	}
	EMU_Write32(S0 + 292,V0); //+ 0x124
	EMU_Write32(S0 + 292,R0); //+ 0x124
	ZZ_CLOCKCYCLES(6,0x8001F660);
ZZ_1F30C_354:
	V0 = EMU_ReadU32(S0 + 292); //+ 0x124
	EMU_SMultiply(S4,V0);
	A0 = EMU_ReadU32(S0 + 180); //+ 0xB4
	V0 = LO;
	RA = 0x8001F67C; //ZZ_1F30C_370
	S4 = (int32_t)V0 >> 8;
	ZZ_CLOCKCYCLES(7,0x8003905C);
	goto ZZ_3905C;
ZZ_1F30C_370:
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V0,S4);
	A0 = EMU_ReadU32(S0 + 180); //+ 0xB4
	V0 = LO;
	V0 = (int32_t)V0 >> 8;
	RA = 0x8001F698; //ZZ_1F30C_38C
	EMU_Write32(S0 + 164,V0); //+ 0xA4
	ZZ_CLOCKCYCLES(7,0x800390D0);
	goto ZZ_390D0;
ZZ_1F30C_38C:
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V0,S4);
	V0 = LO;
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(S0 + 172,V0); //+ 0xAC
	ZZ_CLOCKCYCLES(5,0x8001F6AC);
ZZ_1F30C_3A0:
	A0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	V0 = A0 & 0x1;
	if (!V0)
	{
		V0 = 0x1200;
		ZZ_CLOCKCYCLES(5,0x8001F6D8);
		goto ZZ_1F30C_3CC;
	}
	V0 = 0x1200;
	V1 = EMU_ReadU32(S0 + 316); //+ 0x13C
	if (V1 == V0)
	{
		V0 = -8193;
		ZZ_CLOCKCYCLES(9,0x8001F6D8);
		goto ZZ_1F30C_3CC;
	}
	V0 = -8193;
	V0 &= A0;
	EMU_Write32(S0 + 200,V0); //+ 0xC8
	ZZ_CLOCKCYCLES(11,0x8001F6D8);
ZZ_1F30C_3CC:
	V0 = 0xFFCA0000;
	V0 |= 0xA07E;
	V1 = EMU_ReadU32(S0 + 200); //+ 0xC8
	A0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V1 &= V0;
	A0 &= 0x1;
	if (!A0)
	{
		EMU_Write32(S0 + 200,V1); //+ 0xC8
		ZZ_CLOCKCYCLES(8,0x8001F710);
		goto ZZ_1F30C_404;
	}
	EMU_Write32(S0 + 200,V1); //+ 0xC8
	A0 = EMU_ReadU32(S0 + 144); //+ 0x90
	A1 = EMU_ReadU32(S0 + 180); //+ 0xB4
	A2 = EMU_ReadU32(S0 + 176); //+ 0xB0
	RA = 0x8001F70C; //ZZ_1F30C_400
	A3 = S0;
	ZZ_CLOCKCYCLES(13,0x800243A0);
	goto ZZ_243A0;
ZZ_1F30C_400:
	EMU_Write32(S0 + 144,V0); //+ 0x90
	ZZ_CLOCKCYCLES(1,0x8001F710);
ZZ_1F30C_404:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V1 = 0x80000;
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001F73C);
		goto ZZ_1F30C_430;
	}
	A0 = EMU_ReadU32(S0 + 144); //+ 0x90
	A1 = EMU_ReadU32(S0 + 180); //+ 0xB4
	A2 = EMU_ReadU32(S0 + 176); //+ 0xB0
	RA = 0x8001F738; //ZZ_1F30C_42C
	A3 = S0;
	ZZ_CLOCKCYCLES(10,0x80024528);
	goto ZZ_24528;
ZZ_1F30C_42C:
	EMU_Write32(S0 + 144,V0); //+ 0x90
	ZZ_CLOCKCYCLES(1,0x8001F73C);
ZZ_1F30C_430:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x2000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001F768);
		goto ZZ_1F30C_45C;
	}
	A0 = EMU_ReadU32(S0 + 140); //+ 0x8C
	A1 = EMU_ReadU32(S0 + 184); //+ 0xB8
	A2 = EMU_ReadU32(S0 + 324); //+ 0x144
	RA = 0x8001F764; //ZZ_1F30C_458
	A3 = R0;
	ZZ_CLOCKCYCLES(10,0x800243A0);
	goto ZZ_243A0;
ZZ_1F30C_458:
	EMU_Write32(S0 + 140,V0); //+ 0x8C
	ZZ_CLOCKCYCLES(1,0x8001F768);
ZZ_1F30C_45C:
	V0 = EMU_ReadU32(S0 + 32); //+ 0x20
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	V1 = EMU_ReadU32(V0);
	V0 = 0x5;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001F78C);
		goto ZZ_1F30C_480;
	}
	EMU_Write32(S0 + 120,R0); //+ 0x78
	ZZ_CLOCKCYCLES(9,0x8001F78C);
ZZ_1F30C_480:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x40;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001FA28);
		goto ZZ_1F30C_71C;
	}
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(A0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(13,0x8001F7C4);
		goto ZZ_1F30C_4B8;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(14,0x8001F7C4);
ZZ_1F30C_4B8:
	V0 = EMU_ReadU32(S0 + 164); //+ 0xA4
	EMU_SMultiply(V1,V0);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F7E0);
		goto ZZ_1F30C_4D4;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F7E0);
ZZ_1F30C_4D4:
	V0 = (int32_t)V0 >> 10;
	EMU_Write32(SP + 24,V0); //+ 0x18
	V1 = EMU_ReadU32(A0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001F800);
		goto ZZ_1F30C_4F4;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(8,0x8001F800);
ZZ_1F30C_4F4:
	V0 = EMU_ReadU32(S0 + 168); //+ 0xA8
	EMU_SMultiply(V1,V0);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F81C);
		goto ZZ_1F30C_510;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F81C);
ZZ_1F30C_510:
	V0 = (int32_t)V0 >> 10;
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V1 = EMU_ReadU32(A0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001F83C);
		goto ZZ_1F30C_530;
	}
	V1 = 0x66;
	ZZ_CLOCKCYCLES(8,0x8001F83C);
ZZ_1F30C_530:
	V0 = EMU_ReadU32(S0 + 172); //+ 0xAC
	EMU_SMultiply(V1,V0);
	V0 = LO;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8001F858);
		goto ZZ_1F30C_54C;
	}
	V0 += 1023;
	ZZ_CLOCKCYCLES(7,0x8001F858);
ZZ_1F30C_54C:
	V0 = (int32_t)V0 >> 10;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S0 + 128); //+ 0x80
	V1 = EMU_ReadU32(S0 + 132); //+ 0x84
	A0 = EMU_ReadU32(S0 + 136); //+ 0x88
	EMU_Write32(SP + 40,V0); //+ 0x28
	EMU_Write32(SP + 44,V1); //+ 0x2C
	EMU_Write32(SP + 48,A0); //+ 0x30
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x8;
	if (!V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(13,0x8001F8AC);
		goto ZZ_1F30C_5A0;
	}
	V0 = 0xFF;
	EMU_Write32(S0 + 316,V0); //+ 0x13C
	A0 = S0;
	A2 = 0x80060000;
	A2 -= 12308;
	RA = 0x8001F8A4; //ZZ_1F30C_598
	A1 = SP + 24;
	ZZ_CLOCKCYCLES(19,0x8002BE8C);
	goto ZZ_2BE8C;
ZZ_1F30C_598:
	ZZ_CLOCKCYCLES(2,0x8001F8E8);
	goto ZZ_1F30C_5DC;
ZZ_1F30C_5A0:
	V0 = EMU_ReadU32(S0 + 128); //+ 0x80
	V1 = EMU_ReadU32(SP + 24); //+ 0x18
	V0 += V1;
	EMU_Write32(S0 + 128,V0); //+ 0x80
	V0 = EMU_ReadU32(S0 + 132); //+ 0x84
	V1 = EMU_ReadU32(SP + 28); //+ 0x1C
	V0 += V1;
	EMU_Write32(S0 + 132,V0); //+ 0x84
	V0 = EMU_ReadU32(S0 + 136); //+ 0x88
	V1 = EMU_ReadU32(SP + 32); //+ 0x20
	V0 += V1;
	EMU_Write32(S0 + 136,V0); //+ 0x88
	ZZ_CLOCKCYCLES(15,0x8001F8E8);
ZZ_1F30C_5DC:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x8000;
	if (!V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(5,0x8001F934);
		goto ZZ_1F30C_628;
	}
	A0 = S0;
	A1 = R0;
	RA = 0x8001F908; //ZZ_1F30C_5FC
	A2 = SP + 56;
	ZZ_CLOCKCYCLES(8,0x8001AC9C);
	goto ZZ_1AC9C;
ZZ_1F30C_5FC:
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	V1 = EMU_ReadU32(SP + 60); //+ 0x3C
	V0 &= 0x200;
	if (!V0)
	{
		EMU_Write32(S0 + 284,V1); //+ 0x11C
		ZZ_CLOCKCYCLES(5,0x8001F934);
		goto ZZ_1F30C_628;
	}
	EMU_Write32(S0 + 284,V1); //+ 0x11C
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	V1 = EMU_ReadU32(SP + 44); //+ 0x2C
	A0 = EMU_ReadU32(SP + 48); //+ 0x30
	EMU_Write32(S0 + 128,V0); //+ 0x80
	EMU_Write32(S0 + 132,V1); //+ 0x84
	EMU_Write32(S0 + 136,A0); //+ 0x88
	ZZ_CLOCKCYCLES(11,0x8001F934);
ZZ_1F30C_628:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x1000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001F9D0);
		goto ZZ_1F30C_6C4;
	}
	A0 = EMU_ReadU32(S0 + 164); //+ 0xA4
	V1 = EMU_ReadU32(S0 + 184); //+ 0xB8
	V0 = (int32_t)A0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001F970);
		goto ZZ_1F30C_664;
	}
	V1 = -V1;
	V0 = (int32_t)A0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(15,0x8001F974);
		goto ZZ_1F30C_668;
	}
	ZZ_CLOCKCYCLES(15,0x8001F970);
ZZ_1F30C_664:
	A0 = V1;
	ZZ_CLOCKCYCLES(1,0x8001F974);
ZZ_1F30C_668:
	A1 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V1 = EMU_ReadU32(S0 + 184); //+ 0xB8
	V0 = (int32_t)A1 < (int32_t)V1;
	if (!V0)
	{
		EMU_Write32(S0 + 164,A0); //+ 0xA4
		ZZ_CLOCKCYCLES(6,0x8001F99C);
		goto ZZ_1F30C_690;
	}
	EMU_Write32(S0 + 164,A0); //+ 0xA4
	V1 = -V1;
	V0 = (int32_t)A1 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8001F9A0);
		goto ZZ_1F30C_694;
	}
	ZZ_CLOCKCYCLES(10,0x8001F99C);
ZZ_1F30C_690:
	A1 = V1;
	ZZ_CLOCKCYCLES(1,0x8001F9A0);
ZZ_1F30C_694:
	V1 = EMU_ReadU32(S0 + 172); //+ 0xAC
	A0 = EMU_ReadU32(S0 + 184); //+ 0xB8
	V0 = (int32_t)V1 < (int32_t)A0;
	if (!V0)
	{
		EMU_Write32(S0 + 168,A1); //+ 0xA8
		ZZ_CLOCKCYCLES(6,0x8001F9C8);
		goto ZZ_1F30C_6BC;
	}
	EMU_Write32(S0 + 168,A1); //+ 0xA8
	A0 = -A0;
	V0 = (int32_t)V1 < (int32_t)A0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8001F9CC);
		goto ZZ_1F30C_6C0;
	}
	ZZ_CLOCKCYCLES(10,0x8001F9C8);
ZZ_1F30C_6BC:
	V1 = A0;
	ZZ_CLOCKCYCLES(1,0x8001F9CC);
ZZ_1F30C_6C0:
	EMU_Write32(S0 + 172,V1); //+ 0xAC
	ZZ_CLOCKCYCLES(1,0x8001F9D0);
ZZ_1F30C_6C4:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x4000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001FA28);
		goto ZZ_1F30C_71C;
	}
	V0 = EMU_ReadU32(S0 + 132); //+ 0x84
	V1 = EMU_ReadU32(S0 + 284); //+ 0x11C
	V0 = (int32_t)V1 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(11,0x8001FA28);
		goto ZZ_1F30C_71C;
	}
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	EMU_Write32(S0 + 132,V1); //+ 0x84
	V1 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V0 |= 0x1;
	EMU_Write32(S0 + 200,V0); //+ 0xC8
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 3588); //+ 0xE04
	if ((int32_t)V1 >= 0)
	{
		EMU_Write32(S0 + 304,V0); //+ 0x130
		ZZ_CLOCKCYCLES(20,0x8001FA28);
		goto ZZ_1F30C_71C;
	}
	EMU_Write32(S0 + 304,V0); //+ 0x130
	EMU_Write32(S0 + 308,V1); //+ 0x134
	EMU_Write32(S0 + 168,R0); //+ 0xA8
	ZZ_CLOCKCYCLES(22,0x8001FA28);
ZZ_1F30C_71C:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x20;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001FA94);
		goto ZZ_1F30C_788;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31740); //+ 0xFFFF8404
	V1 = EMU_ReadU32(V0 + 132); //+ 0x84
	V0 = V1 < 103;
	if (V0)
	{
		A0 = 0xFFD10000;
		ZZ_CLOCKCYCLES(13,0x8001FA60);
		goto ZZ_1F30C_754;
	}
	A0 = 0xFFD10000;
	V1 = 0x66;
	ZZ_CLOCKCYCLES(14,0x8001FA60);
ZZ_1F30C_754:
	A0 |= 0x2000;
	V0 = V1 << 5;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 += V1;
	V1 = EMU_ReadU32(S0 + 168); //+ 0xA8
	V0 <<= 5;
	V1 = V1 - V0;
	EMU_Write32(S0 + 168,V1); //+ 0xA8
	V1 = (int32_t)V1 < (int32_t)A0;
	if (!V1)
	{
		ZZ_CLOCKCYCLES(12,0x8001FA94);
		goto ZZ_1F30C_788;
	}
	EMU_Write32(S0 + 168,A0); //+ 0xA8
	ZZ_CLOCKCYCLES(13,0x8001FA94);
ZZ_1F30C_788:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= 0x10;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8001FAFC);
		goto ZZ_1F30C_7F0;
	}
	A2 = EMU_ReadU32(GP + 696); //+ 0x2B8
	V0 = EMU_ReadU32(S0 + 252); //+ 0xFC
	V1 = EMU_ReadU32(A2 + 252); //+ 0xFC
	if (V1 == V0)
	{
		V1 = 0xA0000;
		ZZ_CLOCKCYCLES(11,0x8001FAFC);
		goto ZZ_1F30C_7F0;
	}
	V1 = 0xA0000;
	V1 |= 0xF000;
	V0 = 0x70000;
	V0 |= 0xD000;
	A0 = S0;
	A1 = S0 + 128;
	A2 += 128;
	A3 = 0x70000;
	A3 |= 0xD000;
	EMU_Write32(SP + 16,V1); //+ 0x10
	RA = 0x8001FAEC; //ZZ_1F30C_7E0
	EMU_Write32(SP + 20,V0); //+ 0x14
	ZZ_CLOCKCYCLES(22,0x80029C90);
	goto ZZ_29C90;
ZZ_1F30C_7E0:
	if (V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001FAFC);
		goto ZZ_1F30C_7F0;
	}
	RA = 0x8001FAFC; //ZZ_1F30C_7F0
	A0 = S0;
	ZZ_CLOCKCYCLES(4,0x8001EEA8);
	goto ZZ_1EEA8;
ZZ_1F30C_7F0:
	RA = EMU_ReadU32(SP + 92); //+ 0x5C
	S4 = EMU_ReadU32(SP + 88); //+ 0x58
	S3 = EMU_ReadU32(SP + 84); //+ 0x54
	S2 = EMU_ReadU32(SP + 80); //+ 0x50
	S1 = EMU_ReadU32(SP + 76); //+ 0x4C
	S0 = EMU_ReadU32(SP + 72); //+ 0x48
	SP += 96;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001F30C,0x8001F384,ZZ_1F30C);
ZZ_MARK_TARGET(0x8001F384,0x8001F39C,ZZ_1F30C_78);
ZZ_MARK_TARGET(0x8001F39C,0x8001F3CC,ZZ_1F30C_90);
ZZ_MARK_TARGET(0x8001F3CC,0x8001F3E8,ZZ_1F30C_C0);
ZZ_MARK_TARGET(0x8001F3E8,0x8001F464,ZZ_1F30C_DC);
ZZ_MARK_TARGET(0x8001F464,0x8001F478,ZZ_1F30C_158);
ZZ_MARK_TARGET(0x8001F478,0x8001F488,ZZ_1F30C_16C);
ZZ_MARK_TARGET(0x8001F488,0x8001F4AC,ZZ_1F30C_17C);
ZZ_MARK_TARGET(0x8001F4AC,0x8001F4C8,ZZ_1F30C_1A0);
ZZ_MARK_TARGET(0x8001F4C8,0x8001F4F4,ZZ_1F30C_1BC);
ZZ_MARK_TARGET(0x8001F4F4,0x8001F510,ZZ_1F30C_1E8);
ZZ_MARK_TARGET(0x8001F510,0x8001F518,ZZ_1F30C_204);
ZZ_MARK_TARGET(0x8001F518,0x8001F53C,ZZ_1F30C_20C);
ZZ_MARK_TARGET(0x8001F53C,0x8001F558,ZZ_1F30C_230);
ZZ_MARK_TARGET(0x8001F558,0x8001F570,ZZ_1F30C_24C);
ZZ_MARK_TARGET(0x8001F570,0x8001F58C,ZZ_1F30C_264);
ZZ_MARK_TARGET(0x8001F58C,0x8001F5B4,ZZ_1F30C_280);
ZZ_MARK_TARGET(0x8001F5B4,0x8001F5D0,ZZ_1F30C_2A8);
ZZ_MARK_TARGET(0x8001F5D0,0x8001F5E4,ZZ_1F30C_2C4);
ZZ_MARK_TARGET(0x8001F5E4,0x8001F5E8,ZZ_1F30C_2D8);
ZZ_MARK_TARGET(0x8001F5E8,0x8001F608,ZZ_1F30C_2DC);
ZZ_MARK_TARGET(0x8001F608,0x8001F62C,ZZ_1F30C_2FC);
ZZ_MARK_TARGET(0x8001F62C,0x8001F648,ZZ_1F30C_320);
ZZ_MARK_TARGET(0x8001F648,0x8001F660,ZZ_1F30C_33C);
ZZ_MARK_TARGET(0x8001F660,0x8001F67C,ZZ_1F30C_354);
ZZ_MARK_TARGET(0x8001F67C,0x8001F698,ZZ_1F30C_370);
ZZ_MARK_TARGET(0x8001F698,0x8001F6AC,ZZ_1F30C_38C);
ZZ_MARK_TARGET(0x8001F6AC,0x8001F6D8,ZZ_1F30C_3A0);
ZZ_MARK_TARGET(0x8001F6D8,0x8001F70C,ZZ_1F30C_3CC);
ZZ_MARK_TARGET(0x8001F70C,0x8001F710,ZZ_1F30C_400);
ZZ_MARK_TARGET(0x8001F710,0x8001F738,ZZ_1F30C_404);
ZZ_MARK_TARGET(0x8001F738,0x8001F73C,ZZ_1F30C_42C);
ZZ_MARK_TARGET(0x8001F73C,0x8001F764,ZZ_1F30C_430);
ZZ_MARK_TARGET(0x8001F764,0x8001F768,ZZ_1F30C_458);
ZZ_MARK_TARGET(0x8001F768,0x8001F78C,ZZ_1F30C_45C);
ZZ_MARK_TARGET(0x8001F78C,0x8001F7C4,ZZ_1F30C_480);
ZZ_MARK_TARGET(0x8001F7C4,0x8001F7E0,ZZ_1F30C_4B8);
ZZ_MARK_TARGET(0x8001F7E0,0x8001F800,ZZ_1F30C_4D4);
ZZ_MARK_TARGET(0x8001F800,0x8001F81C,ZZ_1F30C_4F4);
ZZ_MARK_TARGET(0x8001F81C,0x8001F83C,ZZ_1F30C_510);
ZZ_MARK_TARGET(0x8001F83C,0x8001F858,ZZ_1F30C_530);
ZZ_MARK_TARGET(0x8001F858,0x8001F8A4,ZZ_1F30C_54C);
ZZ_MARK_TARGET(0x8001F8A4,0x8001F8AC,ZZ_1F30C_598);
ZZ_MARK_TARGET(0x8001F8AC,0x8001F8E8,ZZ_1F30C_5A0);
ZZ_MARK_TARGET(0x8001F8E8,0x8001F908,ZZ_1F30C_5DC);
ZZ_MARK_TARGET(0x8001F908,0x8001F934,ZZ_1F30C_5FC);
ZZ_MARK_TARGET(0x8001F934,0x8001F970,ZZ_1F30C_628);
ZZ_MARK_TARGET(0x8001F970,0x8001F974,ZZ_1F30C_664);
ZZ_MARK_TARGET(0x8001F974,0x8001F99C,ZZ_1F30C_668);
ZZ_MARK_TARGET(0x8001F99C,0x8001F9A0,ZZ_1F30C_690);
ZZ_MARK_TARGET(0x8001F9A0,0x8001F9C8,ZZ_1F30C_694);
ZZ_MARK_TARGET(0x8001F9C8,0x8001F9CC,ZZ_1F30C_6BC);
ZZ_MARK_TARGET(0x8001F9CC,0x8001F9D0,ZZ_1F30C_6C0);
ZZ_MARK_TARGET(0x8001F9D0,0x8001FA28,ZZ_1F30C_6C4);
ZZ_MARK_TARGET(0x8001FA28,0x8001FA60,ZZ_1F30C_71C);
ZZ_MARK_TARGET(0x8001FA60,0x8001FA94,ZZ_1F30C_754);
ZZ_MARK_TARGET(0x8001FA94,0x8001FAEC,ZZ_1F30C_788);
ZZ_MARK_TARGET(0x8001FAEC,0x8001FAFC,ZZ_1F30C_7E0);
ZZ_MARK_TARGET(0x8001FAFC,0x8001FB20,ZZ_1F30C_7F0);
