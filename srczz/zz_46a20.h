#ifdef ZZ_INCLUDE_CODE
ZZ_46A20:
	EMU_Write32(SP + 8,A2); //+ 0x8
	A2 = SP + 4;
	EMU_Write32(SP + 12,A3); //+ 0xC
	A3 = 0x1;
	EMU_Write32(SP,A0);
	EMU_Write32(SP + 4,A1); //+ 0x4
	if (A0 == A3)
	{
		EMU_Write32(SP,A0);
		ZZ_CLOCKCYCLES(8,0x80046AA4);
		goto ZZ_46A20_84;
	}
	EMU_Write32(SP,A0);
	V0 = (int32_t)A0 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80046A5C);
		goto ZZ_46A20_3C;
	}
	if (!A0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(13,0x80046B14);
		goto ZZ_46A20_F4;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(15,0x80046CC0);
	goto ZZ_46A20_2A0;
ZZ_46A20_3C:
	V0 = 0x2;
	if (A0 == V0)
	{
		V0 = 0x3;
		ZZ_CLOCKCYCLES(3,0x80046A78);
		goto ZZ_46A20_58;
	}
	V0 = 0x3;
	if (A0 == V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(5,0x80046B80);
		goto ZZ_46A20_160;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(7,0x80046CC0);
	goto ZZ_46A20_2A0;
ZZ_46A20_58:
	A0 = EMU_ReadU32(SP + 4); //+ 0x4
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22792); //+ 0x5908
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	V0 = A0 >> V0;
	AT = 0x80050000;
	EMU_Write16(AT + 22752,V0); //+ 0x58E0
	EMU_Write16(V1 + 422,V0); //+ 0x1A6
	V0 = R0;
	ZZ_CLOCKCYCLES(11,0x80046CC0);
	goto ZZ_46A20_2A0;
ZZ_46A20_84:
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 22756); //+ 0x58E4
	A0 = 0x80050000;
	A0 = EMU_ReadU16(A0 + 22752); //+ 0x58E0
	V0 = EMU_ReadU16(A1 + 422); //+ 0x1A6
	AT = 0x80050000;
	EMU_Write32(AT + 22832,R0); //+ 0x5930
	V0 &= 0xFFFF;
	if (V0 == A0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(10,0x80046AEC);
		goto ZZ_46A20_CC;
	}
	V1 = R0;
	V1 += 1;
	ZZ_CLOCKCYCLES(11,0x80046AD0);
ZZ_46A20_B0:
	V0 = (int32_t)V1 < 3841;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(3,0x80046CC0);
		goto ZZ_46A20_2A0;
	}
	V0 = -2;
	V0 = EMU_ReadU16(A1 + 422); //+ 0x1A6
	if (V0 != A0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(7,0x80046AD0);
		goto ZZ_46A20_B0;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(7,0x80046AEC);
ZZ_46A20_CC:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	A0 = EMU_ReadU16(V1 + 426); //+ 0x1AA
	V0 = A0 & 0xFFCF;
	A0 = V0 | 0x20;
	EMU_Write16(V1 + 426,A0); //+ 0x1AA
	V0 = R0;
	ZZ_CLOCKCYCLES(10,0x80046CC0);
	goto ZZ_46A20_2A0;
ZZ_46A20_F4:
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 22756); //+ 0x58E4
	A0 = 0x80050000;
	A0 = EMU_ReadU16(A0 + 22752); //+ 0x58E0
	V0 = EMU_ReadU16(A1 + 422); //+ 0x1A6
	AT = 0x80050000;
	EMU_Write32(AT + 22832,A3); //+ 0x5930
	V0 &= 0xFFFF;
	if (V0 == A0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(10,0x80046B5C);
		goto ZZ_46A20_13C;
	}
	V1 = R0;
	V1 += 1;
	ZZ_CLOCKCYCLES(11,0x80046B40);
ZZ_46A20_120:
	V0 = (int32_t)V1 < 3841;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(3,0x80046CC0);
		goto ZZ_46A20_2A0;
	}
	V0 = -2;
	V0 = EMU_ReadU16(A1 + 422); //+ 0x1A6
	if (V0 != A0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(7,0x80046B40);
		goto ZZ_46A20_120;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(7,0x80046B5C);
ZZ_46A20_13C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	A0 = EMU_ReadU16(V0 + 426); //+ 0x1AA
	A0 |= 0x30;
	EMU_Write16(V0 + 426,A0); //+ 0x1AA
	V0 = R0;
	ZZ_CLOCKCYCLES(9,0x80046CC0);
	goto ZZ_46A20_2A0;
ZZ_46A20_160:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22832); //+ 0x5930
	if (V0 != A3)
	{
		A0 = 0x20;
		ZZ_CLOCKCYCLES(5,0x80046B98);
		goto ZZ_46A20_178;
	}
	A0 = 0x20;
	A0 = 0x30;
	ZZ_CLOCKCYCLES(6,0x80046B98);
ZZ_46A20_178:
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 22756); //+ 0x58E4
	V1 = R0;
	V0 = EMU_ReadU16(A1 + 426); //+ 0x1AA
	A0 &= 0xFFFF;
	V0 &= 0x30;
	if (V0 == A0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(8,0x80046BD8);
		goto ZZ_46A20_1B8;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(8,0x80046BB8);
ZZ_46A20_198:
	V0 = (int32_t)V1 < 3841;
	if (!V0)
	{
		V0 = -2;
		ZZ_CLOCKCYCLES(3,0x80046CC0);
		goto ZZ_46A20_2A0;
	}
	V0 = -2;
	V0 = EMU_ReadU16(A1 + 426); //+ 0x1AA
	V0 &= 0x30;
	if (V0 != A0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(8,0x80046BB8);
		goto ZZ_46A20_198;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(8,0x80046BD8);
ZZ_46A20_1B8:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22832); //+ 0x5930
	V0 = 0x1;
	if (V1 != V0)
	{
		V1 = 0xF0FF0000;
		ZZ_CLOCKCYCLES(5,0x80046C0C);
		goto ZZ_46A20_1EC;
	}
	V1 = 0xF0FF0000;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22776); //+ 0x58F8
	V0 = EMU_ReadU32(A0);
	V1 |= 0xFFFF;
	V0 &= V1;
	V1 = 0x22000000;
	ZZ_CLOCKCYCLES(13,0x80046C28);
	goto ZZ_46A20_208;
ZZ_46A20_1EC:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22776); //+ 0x58F8
	V0 = EMU_ReadU32(A0);
	V1 |= 0xFFFF;
	V0 &= V1;
	V1 = 0x20000000;
	ZZ_CLOCKCYCLES(7,0x80046C28);
ZZ_46A20_208:
	V0 |= V1;
	EMU_Write32(A0,V0);
	A2 += 4;
	A0 = EMU_ReadU32(A2 - 4); //+ 0xFFFFFFFC
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 22760); //+ 0x58E8
	AT = 0x80050000;
	EMU_Write32(AT + 22836,A0); //+ 0x5934
	A0 = EMU_ReadU32(A2);
	A2 = 0x1000000;
	V1 = A0 >> 6;
	V0 = A0 & 0x3F;
	V0 = R0 < V0;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22836); //+ 0x5934
	V1 += V0;
	AT = 0x80050000;
	EMU_Write32(AT + 22840,V1); //+ 0x5938
	EMU_Write32(A1,A0);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22840); //+ 0x5938
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22764); //+ 0x58EC
	V0 <<= 16;
	V0 |= 0x10;
	EMU_Write32(V1,V0);
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22832); //+ 0x5930
	V0 = 0x1;
	if (V1 != V0)
	{
		A2 |= 0x201;
		ZZ_CLOCKCYCLES(31,0x80046CAC);
		goto ZZ_46A20_28C;
	}
	A2 |= 0x201;
	A2 = 0x1000000;
	A2 |= 0x200;
	ZZ_CLOCKCYCLES(33,0x80046CAC);
ZZ_46A20_28C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22768); //+ 0x58F0
	EMU_Write32(V0,A2);
	V0 = R0;
	ZZ_CLOCKCYCLES(5,0x80046CC0);
ZZ_46A20_2A0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80047E44,ZZ_47D38_10C);
	ZZ_JUMPREGISTER(0x80047E4C,ZZ_47D38_114);
	ZZ_JUMPREGISTER(0x80047E60,ZZ_47D38_128);
	ZZ_JUMPREGISTER(0x80046D08,ZZ_46CC8_40);
	ZZ_JUMPREGISTER(0x80046D10,ZZ_46CC8_48);
	ZZ_JUMPREGISTER(0x80046D20,ZZ_46CC8_58);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80046A20,0x80046A5C,ZZ_46A20);
ZZ_MARK_TARGET(0x80046A5C,0x80046A78,ZZ_46A20_3C);
ZZ_MARK_TARGET(0x80046A78,0x80046AA4,ZZ_46A20_58);
ZZ_MARK_TARGET(0x80046AA4,0x80046AD0,ZZ_46A20_84);
ZZ_MARK_TARGET(0x80046AD0,0x80046AEC,ZZ_46A20_B0);
ZZ_MARK_TARGET(0x80046AEC,0x80046B14,ZZ_46A20_CC);
ZZ_MARK_TARGET(0x80046B14,0x80046B40,ZZ_46A20_F4);
ZZ_MARK_TARGET(0x80046B40,0x80046B5C,ZZ_46A20_120);
ZZ_MARK_TARGET(0x80046B5C,0x80046B80,ZZ_46A20_13C);
ZZ_MARK_TARGET(0x80046B80,0x80046B98,ZZ_46A20_160);
ZZ_MARK_TARGET(0x80046B98,0x80046BB8,ZZ_46A20_178);
ZZ_MARK_TARGET(0x80046BB8,0x80046BD8,ZZ_46A20_198);
ZZ_MARK_TARGET(0x80046BD8,0x80046C0C,ZZ_46A20_1B8);
ZZ_MARK_TARGET(0x80046C0C,0x80046C28,ZZ_46A20_1EC);
ZZ_MARK_TARGET(0x80046C28,0x80046CAC,ZZ_46A20_208);
ZZ_MARK_TARGET(0x80046CAC,0x80046CC0,ZZ_46A20_28C);
ZZ_MARK_TARGET(0x80046CC0,0x80046CC8,ZZ_46A20_2A0);
