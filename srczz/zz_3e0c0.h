#ifdef ZZ_INCLUDE_CODE
	ZZ_CLOCKCYCLES(1,0x8003E0C0);
ZZ_3E0C0:
	T0 = 0x80050000;
	T0 = EMU_ReadU32(T0 + 14568); //+ 0x38E8
	SP -= 16;
	EMU_Write32(SP + 4,S0); //+ 0x4
	EMU_Write32(SP + 8,S1); //+ 0x8
	EMU_Write32(SP + 12,RA); //+ 0xC
	if (T0)
	{
		T0 = 0x1;
		ZZ_CLOCKCYCLES(8,0x8003E118);
		goto ZZ_3E0C0_58;
	}
	T0 = 0x1;
	AT = 0x80050000;
	EMU_Write32(AT + 14568,T0); //+ 0x38E8
	S0 = 0x80010000;
	S0 += 0;
	S1 = 0x00000;
	S1 += 0;
	if (!S1)
	{
		ZZ_CLOCKCYCLES(16,0x8003E118);
		goto ZZ_3E0C0_58;
	}
	ZZ_CLOCKCYCLES(16,0x8003E100);
ZZ_3E0C0_40:
	T0 = EMU_ReadU32(S0);
	S0 += 4;
	ZZ_JUMPREGISTER_BEGIN(T0);
	RA = 0x8003E110; //ZZ_3E0C0_50
	S1 -= 1;
	ZZ_CLOCKCYCLES_JR(4);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (T0,8003E108)
	ZZ_JUMPREGISTER_END();
ZZ_3E0C0_50:
	if (S1)
	{
		ZZ_CLOCKCYCLES(2,0x8003E100);
		goto ZZ_3E0C0_40;
	}
	ZZ_CLOCKCYCLES(2,0x8003E118);
ZZ_3E0C0_58:
	RA = EMU_ReadU32(SP + 12); //+ 0xC
	S1 = EMU_ReadU32(SP + 8); //+ 0x8
	S0 = EMU_ReadU32(SP + 4); //+ 0x4
	SP += 16;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003E0C0,0x8003E100,ZZ_3E0C0);
ZZ_MARK_TARGET(0x8003E100,0x8003E110,ZZ_3E0C0_40);
ZZ_MARK_TARGET(0x8003E110,0x8003E118,ZZ_3E0C0_50);
ZZ_MARK_TARGET(0x8003E118,0x8003E130,ZZ_3E0C0_58);
