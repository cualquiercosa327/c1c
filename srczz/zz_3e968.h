#ifdef ZZ_INCLUDE_CODE
ZZ_3E968:
	SP -= 40;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = 0x80050000;
	S1 += 14644;
	EMU_Write32(SP + 36,RA); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU16(S1);
	if (V0)
	{
		ZZ_CLOCKCYCLES(13,0x8003E9C4);
		goto ZZ_3E968_5C;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18880); //+ 0x49C0
	A1 = EMU_ReadU16(V0);
	A0 = 0x80010000;
	A0 += 4148;
	RA = 0x8003E9BC; //ZZ_3E968_54
	ZZ_CLOCKCYCLES(21,0x8003D730);
	goto ZZ_3D730;
ZZ_3E968_54:
	RA = 0x8003E9C4; //ZZ_3E968_5C
	ZZ_CLOCKCYCLES(2,0x8003EE24);
	goto ZZ_3EE24;
ZZ_3E968_5C:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 18880); //+ 0x49C0
	V0 = 0x1;
	AT = 0x80050000;
	EMU_Write16(AT + 14646,V0); //+ 0x3936
	V0 = 0x80050000;
	V0 = EMU_ReadU16(V0 + 14692); //+ 0x3964
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 18884); //+ 0x49C4
	A0 = EMU_ReadU16(A0);
	V1 = EMU_ReadU16(V1);
	V0 &= A0;
	S0 = V1 & V0;
	if (!S0)
	{
		ZZ_CLOCKCYCLES(15,0x8003EA94);
		goto ZZ_3E968_12C;
	}
	S3 = 0x1;
	S4 = S1 + 4;
	ZZ_CLOCKCYCLES(17,0x8003EA08);
ZZ_3E968_A0:
	if (!S0)
	{
		S1 = R0;
		ZZ_CLOCKCYCLES(2,0x8003EA64);
		goto ZZ_3E968_FC;
	}
	S1 = R0;
	S2 = S4;
	ZZ_CLOCKCYCLES(3,0x8003EA14);
ZZ_3E968_AC:
	V0 = (int32_t)S1 < 11;
	if (!V0)
	{
		V0 = S0 & 0x1;
		ZZ_CLOCKCYCLES(3,0x8003EA64);
		goto ZZ_3E968_FC;
	}
	V0 = S0 & 0x1;
	if (!V0)
	{
		V0 = S3 << S1;
		ZZ_CLOCKCYCLES(5,0x8003EA50);
		goto ZZ_3E968_E8;
	}
	V0 = S3 << S1;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 18880); //+ 0x49C0
	V0 = ~V0;
	EMU_Write16(V1,V0);
	V0 = EMU_ReadU32(S2);
	if (!V0)
	{
		ZZ_CLOCKCYCLES(13,0x8003EA50);
		goto ZZ_3E968_E8;
	}
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8003EA50; //ZZ_3E968_E8
	ZZ_CLOCKCYCLES_JR(15);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8003EA48)
	ZZ_JUMPREGISTER_END();
ZZ_3E968_E8:
	S2 += 4;
	S0 >>= 1;
	V0 = S0 & 0xFFFF;
	if (V0)
	{
		S1 += 1;
		ZZ_CLOCKCYCLES(5,0x8003EA14);
		goto ZZ_3E968_AC;
	}
	S1 += 1;
	ZZ_CLOCKCYCLES(5,0x8003EA64);
ZZ_3E968_FC:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 18880); //+ 0x49C0
	V0 = 0x80050000;
	V0 = EMU_ReadU16(V0 + 14692); //+ 0x3964
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 18884); //+ 0x49C4
	A0 = EMU_ReadU16(A0);
	V1 = EMU_ReadU16(V1);
	V0 &= A0;
	S0 = V1 & V0;
	if (S0)
	{
		ZZ_CLOCKCYCLES(12,0x8003EA08);
		goto ZZ_3E968_A0;
	}
	ZZ_CLOCKCYCLES(12,0x8003EA94);
ZZ_3E968_12C:
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 18880); //+ 0x49C0
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 18884); //+ 0x49C4
	V0 = EMU_ReadU16(A1);
	V1 = EMU_ReadU16(A2);
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(10,0x8003EB14);
		goto ZZ_3E968_1AC;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18892); //+ 0x49CC
	V1 = V0 + 1;
	V0 = (int32_t)V0 < 2049;
	AT = 0x80050000;
	EMU_Write32(AT + 18892,V1); //+ 0x49CC
	if (V0)
	{
		ZZ_CLOCKCYCLES(19,0x8003EB1C);
		goto ZZ_3E968_1B4;
	}
	A0 = 0x80010000;
	A0 += 4176;
	A1 = EMU_ReadU16(A1);
	A2 = EMU_ReadU16(A2);
	RA = 0x8003EAF8; //ZZ_3E968_190
	ZZ_CLOCKCYCLES(25,0x8003D730);
	goto ZZ_3D730;
ZZ_3E968_190:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18880); //+ 0x49C0
	AT = 0x80050000;
	EMU_Write32(AT + 18892,R0); //+ 0x49CC
	EMU_Write16(V0,R0);
	ZZ_CLOCKCYCLES(7,0x8003EB1C);
	goto ZZ_3E968_1B4;
ZZ_3E968_1AC:
	AT = 0x80050000;
	EMU_Write32(AT + 18892,R0); //+ 0x49CC
	ZZ_CLOCKCYCLES(2,0x8003EB1C);
ZZ_3E968_1B4:
	AT = 0x80050000;
	EMU_Write16(AT + 14646,R0); //+ 0x3936
	RA = 0x8003EB2C; //ZZ_3E968_1C4
	ZZ_CLOCKCYCLES(4,0x8003EE24);
	goto ZZ_3EE24;
ZZ_3E968_1C4:
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x8003E904,ZZ_3E88C_78);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003E968,0x8003E9BC,ZZ_3E968);
ZZ_MARK_TARGET(0x8003E9BC,0x8003E9C4,ZZ_3E968_54);
ZZ_MARK_TARGET(0x8003E9C4,0x8003EA08,ZZ_3E968_5C);
ZZ_MARK_TARGET(0x8003EA08,0x8003EA14,ZZ_3E968_A0);
ZZ_MARK_TARGET(0x8003EA14,0x8003EA50,ZZ_3E968_AC);
ZZ_MARK_TARGET(0x8003EA50,0x8003EA64,ZZ_3E968_E8);
ZZ_MARK_TARGET(0x8003EA64,0x8003EA94,ZZ_3E968_FC);
ZZ_MARK_TARGET(0x8003EA94,0x8003EAF8,ZZ_3E968_12C);
ZZ_MARK_TARGET(0x8003EAF8,0x8003EB14,ZZ_3E968_190);
ZZ_MARK_TARGET(0x8003EB14,0x8003EB1C,ZZ_3E968_1AC);
ZZ_MARK_TARGET(0x8003EB1C,0x8003EB2C,ZZ_3E968_1B4);
ZZ_MARK_TARGET(0x8003EB2C,0x8003EB50,ZZ_3E968_1C4);
