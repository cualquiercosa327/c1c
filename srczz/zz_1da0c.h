#ifdef ZZ_INCLUDE_CODE
ZZ_1DA0C:
	SP -= 32;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 24,RA); //+ 0x18
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	V0 = 0x3;
	if (V1 != V0)
	{
		S1 = A1;
		ZZ_CLOCKCYCLES(9,0x8001DE5C);
		goto ZZ_1DA0C_450;
	}
	S1 = A1;
	V0 = EMU_ReadU32(GP + 696); //+ 0x2B8
  /* begin extending code */
  #ifdef C1C_ENABLE_INGAMEMENU
  uint32_t eq = 0;
  #endif
  /* end extending code */
	if (S0 != V0)
	{
		ZZ_CLOCKCYCLES(13,0x8001DA48);
		goto ZZ_1DA0C_3C;
	}
  #ifdef C1C_ENABLE_INGAMEMENU
  /* begin extending code */
  eq = 1;
  /* end extending code */
  #endif C1C_ENABLE_INGAMEMENU
	RA = 0x8001DA48; //ZZ_1DA0C_3C
	ZZ_CLOCKCYCLES(15,0x800167A4);
	goto ZZ_167A4;
ZZ_1DA0C_3C:
  /* begin extending code */
  #ifdef C1C_ENABLE_INGAMEMENU
  do {} while(0);
  uint32_t padpress = EMU_ReadU32(0x8005E71C);
  uint32_t padheld = EMU_ReadU32(0x8005E720);
  // if handling crash object
  if (eq)
  {
    // if select held
    if (padheld & 0x100)
    {
      // cause game to ignore all other buttons
      padheld &= 0x100; 
      padpress &= 0x100;
      EMU_Write32(0x8005E71C,padpress);
      EMU_Write32(0x8005E720,padheld);
    }
  }
  #endif
  /* end extending code */
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 6320); //+ 0x18B0
	AT = 0x80060000;
	EMU_Write32(AT + 3584,S0); //+ 0xE00
	A1 = A0 & 0x8;
	if (!A1)
	{
		V1 = 0x2000000;
		ZZ_CLOCKCYCLES(7,0x8001DB80);
		goto ZZ_1DA0C_174;
	}
	V1 = 0x2000000;
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= V1;
	if (V0)
	{
		V0 = A0 & 0x8000;
		ZZ_CLOCKCYCLES(12,0x8001DA8C);
		goto ZZ_1DA0C_80;
	}
	V0 = A0 & 0x8000;
	V0 = EMU_ReadU32(S0 + 288); //+ 0x120
	V1 = 0x20000;
	V0 &= V1;
	if (!V0)
	{
		V0 = A0 & 0x8000;
		ZZ_CLOCKCYCLES(17,0x8001DA9C);
		goto ZZ_1DA0C_90;
	}
	V0 = A0 & 0x8000;
	ZZ_CLOCKCYCLES(17,0x8001DA8C);
ZZ_1DA0C_80:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001DA9C);
		goto ZZ_1DA0C_90;
	}
	A1 = 0x1;
	ZZ_CLOCKCYCLES(4,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_90:
	V0 = EMU_ReadU32(S0 + 32); //+ 0x20
	A0 = EMU_ReadU32(V0 + 16); //+ 0x10
	V1 = EMU_ReadU32(A0 + 4); //+ 0x4
	V0 = 0x300;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 769;
		ZZ_CLOCKCYCLES(8,0x8001DB24);
		goto ZZ_1DA0C_118;
	}
	V0 = (int32_t)V1 < 769;
	if (!V0)
	{
		V0 = 0x100;
		ZZ_CLOCKCYCLES(10,0x8001DADC);
		goto ZZ_1DA0C_D0;
	}
	V0 = 0x100;
	if (V1 == V0)
	{
		V0 = 0x200;
		ZZ_CLOCKCYCLES(12,0x8001DB14);
		goto ZZ_1DA0C_108;
	}
	V0 = 0x200;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(14,0x8001DB34);
		goto ZZ_1DA0C_128;
	}
	ZZ_CLOCKCYCLES(16,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_D0:
	V0 = 0x500;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 1281;
		ZZ_CLOCKCYCLES(3,0x8001DB24);
		goto ZZ_1DA0C_118;
	}
	V0 = (int32_t)V1 < 1281;
	if (!V0)
	{
		V0 = 0x400;
		ZZ_CLOCKCYCLES(5,0x8001DB00);
		goto ZZ_1DA0C_F4;
	}
	V0 = 0x400;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001DB70);
		goto ZZ_1DA0C_164;
	}
	ZZ_CLOCKCYCLES(9,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_F4:
	V0 = 0x600;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001DB24);
		goto ZZ_1DA0C_118;
	}
	ZZ_CLOCKCYCLES(5,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_108:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x20;
	ZZ_CLOCKCYCLES(4,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_118:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x80;
	ZZ_CLOCKCYCLES(4,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_128:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A0 = EMU_ReadU32(A0);
	A1 = V0 & 0x100;
	V0 = 0x4;
	if (A0 != V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001DB80);
		goto ZZ_1DA0C_174;
	}
	V1 = EMU_ReadU32(S0 + 212); //+ 0xD4
	if (V1 == A0)
	{
		V0 = 0x7;
		ZZ_CLOCKCYCLES(11,0x8001DB68);
		goto ZZ_1DA0C_15C;
	}
	V0 = 0x7;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(13,0x8001DB80);
		goto ZZ_1DA0C_174;
	}
	ZZ_CLOCKCYCLES(13,0x8001DB68);
ZZ_1DA0C_15C:
	S1 = 0x1;
	ZZ_CLOCKCYCLES(2,0x8001DB80);
	goto ZZ_1DA0C_174;
ZZ_1DA0C_164:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x400;
	ZZ_CLOCKCYCLES(4,0x8001DB80);
ZZ_1DA0C_174:
	if (!S1)
	{
		ZZ_CLOCKCYCLES(2,0x8001DD1C);
		goto ZZ_1DA0C_310;
	}
	if (!A1)
	{
		V1 = 0x10000000;
		ZZ_CLOCKCYCLES(4,0x8001DD1C);
		goto ZZ_1DA0C_310;
	}
	V1 = 0x10000000;
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x8001DBD4);
		goto ZZ_1DA0C_1C8;
	}
	V0 = EMU_ReadU32(S0 + 260); //+ 0x104
	if (!V0)
	{
		V0 -= 1;
		ZZ_CLOCKCYCLES(13,0x8001DBD4);
		goto ZZ_1DA0C_1C8;
	}
	V0 -= 1;
	if (V0)
	{
		EMU_Write32(S0 + 260,V0); //+ 0x104
		ZZ_CLOCKCYCLES(15,0x8001DD1C);
		goto ZZ_1DA0C_310;
	}
	EMU_Write32(S0 + 260,V0); //+ 0x104
	V1 = 0xEFFF0000;
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V1 |= 0xFFFF;
	V0 &= V1;
	EMU_Write32(S0 + 204,V0); //+ 0xCC
	ZZ_CLOCKCYCLES(21,0x8001DD1C);
	goto ZZ_1DA0C_310;
ZZ_1DA0C_1C8:
	V0 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 3588); //+ 0xE04
	V0 &= 0x10;
	if (!V0)
	{
		EMU_Write32(S0 + 252,V1); //+ 0xFC
		ZZ_CLOCKCYCLES(6,0x8001DC0C);
		goto ZZ_1DA0C_200;
	}
	EMU_Write32(S0 + 252,V1); //+ 0xFC
	V0 = EMU_ReadU32(GP + 696); //+ 0x2B8
	V0 = EMU_ReadU32(V0 + 252); //+ 0xFC
	if (V0 != V1)
	{
		ZZ_CLOCKCYCLES(12,0x8001DC0C);
		goto ZZ_1DA0C_200;
	}
	RA = 0x8001DC0C; //ZZ_1DA0C_200
	A0 = S0;
	ZZ_CLOCKCYCLES(14,0x8001EEA8);
	goto ZZ_1EEA8;
ZZ_1DA0C_200:
	V0 = EMU_ReadU32(S0 + 232); //+ 0xE8
	if (!V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(4,0x8001DC9C);
		goto ZZ_1DA0C_290;
	}
	A0 = S0;
	V1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A2 = EMU_ReadU32(S0 + 228); //+ 0xE4
	V0 = A1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	V0 = 0xFFFF;
	EMU_Write32(S0 + 228,V1); //+ 0xE4
	V1 -= 96;
	V1 = V1 - S0;
	A2 -= 96;
	A2 = A2 - S0;
	A2 <<= 16;
	V1 |= A2;
	EMU_Write32(A1,V0);
	A1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A3 = EMU_ReadU32(S0 + 224); //+ 0xE0
	V0 = A1 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(A1,A3);
	A3 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A2 = R0;
	V0 = A3 + 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	EMU_Write32(A3,V1);
	V0 = EMU_ReadU32(S0 + 232); //+ 0xE8
	A1 = 0x3;
	RA = 0x8001DC8C; //ZZ_1DA0C_280
	EMU_Write32(S0 + 224,V0); //+ 0xE0
	ZZ_CLOCKCYCLES(32,0x800201DC);
	goto ZZ_201DC;
ZZ_1DA0C_280:
	V1 = V0;
	V0 = (int32_t)V1 < -254;
	if (!V0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(4,0x8001DE60);
		goto ZZ_1DA0C_454;
	}
	V0 = V1;
	ZZ_CLOCKCYCLES(4,0x8001DC9C);
ZZ_1DA0C_290:
	A0 = 0xFF0000;
	A1 = EMU_ReadU32(S0 + 220); //+ 0xDC
	A0 |= 0xFFFF;
	V1 = EMU_ReadU32(A1 - 4); //+ 0xFFFFFFFC
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 3588); //+ 0xE04
	A0 &= V1;
	V0 = V0 - A0;
	V1 >>= 24;
	V0 = V0 < V1;
	if (V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(12,0x8001DCF8);
		goto ZZ_1DA0C_2EC;
	}
	A0 = S0;
	V0 = A1 - 4;
	EMU_Write32(S0 + 220,V0); //+ 0xDC
	A1 = 0x4;
	RA = 0x8001DCE0; //ZZ_1DA0C_2D4
	A2 = R0;
	ZZ_CLOCKCYCLES(17,0x800201DC);
	goto ZZ_201DC;
ZZ_1DA0C_2D4:
	V1 = V0;
	V0 = (int32_t)V1 < -254;
	if (V0)
	{
		A0 = S0;
		ZZ_CLOCKCYCLES(4,0x8001DCF8);
		goto ZZ_1DA0C_2EC;
	}
	A0 = S0;
	V0 = V1;
	ZZ_CLOCKCYCLES(6,0x8001DE60);
	goto ZZ_1DA0C_454;
ZZ_1DA0C_2EC:
	RA = 0x8001DD00; //ZZ_1DA0C_2F4
	A1 = S1;
	ZZ_CLOCKCYCLES(2,0x8001EB28);
	goto ZZ_1EB28;
ZZ_1DA0C_2F4:
	A0 = S0;
	RA = 0x8001DD0C; //ZZ_1DA0C_300
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x8001F30C);
	goto ZZ_1F30C;
ZZ_1DA0C_300:
	V0 = EMU_ReadU32(S0 + 200); //+ 0xC8
	V1 = -33;
	V0 &= V1;
	EMU_Write32(S0 + 200,V0); //+ 0xC8
	ZZ_CLOCKCYCLES(4,0x8001DD1C);
ZZ_1DA0C_310:
	V0 = EMU_ReadU32(S0 + 264); //+ 0x108
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x8001DE54);
		goto ZZ_1DA0C_448;
	}
	V1 = EMU_ReadU32(S0 + 204); //+ 0xCC
	V0 = V1 & 0x100;
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x8001DE54);
		goto ZZ_1DA0C_448;
	}
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 6320); //+ 0x18B0
	V0 = A0 & 0x4;
	if (!V0)
	{
		V0 = 0x2000000;
		ZZ_CLOCKCYCLES(15,0x8001DE54);
		goto ZZ_1DA0C_448;
	}
	V0 = 0x2000000;
	V0 &= V1;
	if (V0)
	{
		V0 = A0 & 0x4000;
		ZZ_CLOCKCYCLES(18,0x8001DD78);
		goto ZZ_1DA0C_36C;
	}
	V0 = A0 & 0x4000;
	V0 = EMU_ReadU32(S0 + 288); //+ 0x120
	V1 = 0x20000;
	V0 &= V1;
	if (!V0)
	{
		V0 = A0 & 0x4000;
		ZZ_CLOCKCYCLES(23,0x8001DD88);
		goto ZZ_1DA0C_37C;
	}
	V0 = A0 & 0x4000;
	ZZ_CLOCKCYCLES(23,0x8001DD78);
ZZ_1DA0C_36C:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001DD88);
		goto ZZ_1DA0C_37C;
	}
	A1 = 0x1;
	ZZ_CLOCKCYCLES(4,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_37C:
	V0 = EMU_ReadU32(S0 + 32); //+ 0x20
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x300;
	if (V1 == V0)
	{
		A1 = R0;
		ZZ_CLOCKCYCLES(8,0x8001DE14);
		goto ZZ_1DA0C_408;
	}
	A1 = R0;
	V0 = (int32_t)V1 < 769;
	if (!V0)
	{
		V0 = 0x100;
		ZZ_CLOCKCYCLES(11,0x8001DDCC);
		goto ZZ_1DA0C_3C0;
	}
	V0 = 0x100;
	if (V1 == V0)
	{
		V0 = 0x200;
		ZZ_CLOCKCYCLES(13,0x8001DE04);
		goto ZZ_1DA0C_3F8;
	}
	V0 = 0x200;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(15,0x8001DE24);
		goto ZZ_1DA0C_418;
	}
	ZZ_CLOCKCYCLES(17,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_3C0:
	V0 = 0x500;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 1281;
		ZZ_CLOCKCYCLES(3,0x8001DE14);
		goto ZZ_1DA0C_408;
	}
	V0 = (int32_t)V1 < 1281;
	if (!V0)
	{
		V0 = 0x400;
		ZZ_CLOCKCYCLES(5,0x8001DDF0);
		goto ZZ_1DA0C_3E4;
	}
	V0 = 0x400;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(7,0x8001DE34);
		goto ZZ_1DA0C_428;
	}
	ZZ_CLOCKCYCLES(9,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_3E4:
	V0 = 0x600;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001DE14);
		goto ZZ_1DA0C_408;
	}
	ZZ_CLOCKCYCLES(5,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_3F8:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x10;
	ZZ_CLOCKCYCLES(4,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_408:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x40;
	ZZ_CLOCKCYCLES(4,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_418:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x200;
	ZZ_CLOCKCYCLES(4,0x8001DE44);
	goto ZZ_1DA0C_438;
ZZ_1DA0C_428:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6320); //+ 0x18B0
	A1 = V0 & 0x800;
	ZZ_CLOCKCYCLES(4,0x8001DE44);
ZZ_1DA0C_438:
	if (!A1)
	{
		ZZ_CLOCKCYCLES(2,0x8001DE54);
		goto ZZ_1DA0C_448;
	}
	RA = 0x8001DE54; //ZZ_1DA0C_448
	A0 = S0;
	ZZ_CLOCKCYCLES(4,0x8001DE78);
	goto ZZ_1DE78;
ZZ_1DA0C_448:
	AT = 0x80060000;
	EMU_Write32(AT + 3584,R0); //+ 0xE00
	ZZ_CLOCKCYCLES(2,0x8001DE5C);
ZZ_1DA0C_450:
	V0 = -255;
	ZZ_CLOCKCYCLES(1,0x8001DE60);
ZZ_1DA0C_454:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x8001B8AC,ZZ_1B84C_60);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001DA0C,0x8001DA48,ZZ_1DA0C);
ZZ_MARK_TARGET(0x8001DA48,0x8001DA8C,ZZ_1DA0C_3C);
ZZ_MARK_TARGET(0x8001DA8C,0x8001DA9C,ZZ_1DA0C_80);
ZZ_MARK_TARGET(0x8001DA9C,0x8001DADC,ZZ_1DA0C_90);
ZZ_MARK_TARGET(0x8001DADC,0x8001DB00,ZZ_1DA0C_D0);
ZZ_MARK_TARGET(0x8001DB00,0x8001DB14,ZZ_1DA0C_F4);
ZZ_MARK_TARGET(0x8001DB14,0x8001DB24,ZZ_1DA0C_108);
ZZ_MARK_TARGET(0x8001DB24,0x8001DB34,ZZ_1DA0C_118);
ZZ_MARK_TARGET(0x8001DB34,0x8001DB68,ZZ_1DA0C_128);
ZZ_MARK_TARGET(0x8001DB68,0x8001DB70,ZZ_1DA0C_15C);
ZZ_MARK_TARGET(0x8001DB70,0x8001DB80,ZZ_1DA0C_164);
ZZ_MARK_TARGET(0x8001DB80,0x8001DBD4,ZZ_1DA0C_174);
ZZ_MARK_TARGET(0x8001DBD4,0x8001DC0C,ZZ_1DA0C_1C8);
ZZ_MARK_TARGET(0x8001DC0C,0x8001DC8C,ZZ_1DA0C_200);
ZZ_MARK_TARGET(0x8001DC8C,0x8001DC9C,ZZ_1DA0C_280);
ZZ_MARK_TARGET(0x8001DC9C,0x8001DCE0,ZZ_1DA0C_290);
ZZ_MARK_TARGET(0x8001DCE0,0x8001DCF8,ZZ_1DA0C_2D4);
ZZ_MARK_TARGET(0x8001DCF8,0x8001DD00,ZZ_1DA0C_2EC);
ZZ_MARK_TARGET(0x8001DD00,0x8001DD0C,ZZ_1DA0C_2F4);
ZZ_MARK_TARGET(0x8001DD0C,0x8001DD1C,ZZ_1DA0C_300);
ZZ_MARK_TARGET(0x8001DD1C,0x8001DD78,ZZ_1DA0C_310);
ZZ_MARK_TARGET(0x8001DD78,0x8001DD88,ZZ_1DA0C_36C);
ZZ_MARK_TARGET(0x8001DD88,0x8001DDCC,ZZ_1DA0C_37C);
ZZ_MARK_TARGET(0x8001DDCC,0x8001DDF0,ZZ_1DA0C_3C0);
ZZ_MARK_TARGET(0x8001DDF0,0x8001DE04,ZZ_1DA0C_3E4);
ZZ_MARK_TARGET(0x8001DE04,0x8001DE14,ZZ_1DA0C_3F8);
ZZ_MARK_TARGET(0x8001DE14,0x8001DE24,ZZ_1DA0C_408);
ZZ_MARK_TARGET(0x8001DE24,0x8001DE34,ZZ_1DA0C_418);
ZZ_MARK_TARGET(0x8001DE34,0x8001DE44,ZZ_1DA0C_428);
ZZ_MARK_TARGET(0x8001DE44,0x8001DE54,ZZ_1DA0C_438);
ZZ_MARK_TARGET(0x8001DE54,0x8001DE5C,ZZ_1DA0C_448);
ZZ_MARK_TARGET(0x8001DE5C,0x8001DE60,ZZ_1DA0C_450);
ZZ_MARK_TARGET(0x8001DE60,0x8001DE78,ZZ_1DA0C_454);
