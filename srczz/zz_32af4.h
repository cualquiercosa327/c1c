#ifdef ZZ_INCLUDE_CODE
ZZ_32AF4:
	A3 = R0;
	T3 = 0x88880000;
	T3 |= 0x8889;
	ZZ_CLOCKCYCLES(3,0x80032B00);
ZZ_32AF4_C:
	A1 = R0;
	T2 = (int32_t)A3 < 15;
	T1 = A3;
	ZZ_CLOCKCYCLES(3,0x80032B0C);
ZZ_32AF4_18:
	if (!T2)
	{
		V0 = (int32_t)A1 < 30;
		ZZ_CLOCKCYCLES(2,0x80032B40);
		goto ZZ_32AF4_4C;
	}
	V0 = (int32_t)A1 < 30;
	if (!V0)
	{
		V0 = (int32_t)A1 < 15;
		ZZ_CLOCKCYCLES(4,0x80032B30);
		goto ZZ_32AF4_3C;
	}
	V0 = (int32_t)A1 < 15;
	V0 ^= 0x1;
	V1 = A1 + V0;
	A2 = A3;
	T0 = V0;
	ZZ_CLOCKCYCLES(9,0x80032B70);
	goto ZZ_32AF4_7C;
ZZ_32AF4_3C:
	V1 = A3 + 32;
	A2 = A1 - 30;
	T0 = 0x2;
	ZZ_CLOCKCYCLES(4,0x80032B70);
	goto ZZ_32AF4_7C;
ZZ_32AF4_4C:
	EMU_SMultiply(A1,T3);
	T0 = 0x3;
	V1 = (int32_t)A1 >> 31;
	V0 = HI;
	V0 += A1;
	V0 = (int32_t)V0 >> 3;
	V0 = V0 - V1;
	V1 = V0 << 4;
	V1 = V1 - V0;
	V1 = A1 - V1;
	V1 += 48;
	A2 = V0;
	ZZ_CLOCKCYCLES(12,0x80032B70);
ZZ_32AF4_7C:
	V0 = T1 << 1;
	V0 += T1;
	A1 += 1;
	V0 <<= 2;
	V0 += A0;
	EMU_Write32(V0,V1);
	EMU_Write32(V0 + 4,A2); //+ 0x4
	EMU_Write32(V0 + 8,T0); //+ 0x8
	V0 = (int32_t)A1 < 33;
	if (V0)
	{
		T1 += 16;
		ZZ_CLOCKCYCLES(11,0x80032B0C);
		goto ZZ_32AF4_18;
	}
	T1 += 16;
	A3 += 1;
	V0 = (int32_t)A3 < 16;
	if (V0)
	{
		ZZ_CLOCKCYCLES(15,0x80032B00);
		goto ZZ_32AF4_C;
	}
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(17);
	ZZ_JUMPREGISTER(0x80032BE4,ZZ_32BB4_30);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80032AF4,0x80032B00,ZZ_32AF4);
ZZ_MARK_TARGET(0x80032B00,0x80032B0C,ZZ_32AF4_C);
ZZ_MARK_TARGET(0x80032B0C,0x80032B30,ZZ_32AF4_18);
ZZ_MARK_TARGET(0x80032B30,0x80032B40,ZZ_32AF4_3C);
ZZ_MARK_TARGET(0x80032B40,0x80032B70,ZZ_32AF4_4C);
ZZ_MARK_TARGET(0x80032B70,0x80032BB4,ZZ_32AF4_7C);
