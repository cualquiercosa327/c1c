#ifdef ZZ_INCLUDE_CODE
ZZ_3E638:
	SP -= 32;
	A1 <<= 15;
	EMU_Write32(SP + 16,A1); //+ 0x10
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18928); //+ 0x49F0
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		EMU_Write32(SP + 24,RA); //+ 0x18
		ZZ_CLOCKCYCLES(9,0x8003E6C4);
		goto ZZ_3E638_8C;
	}
	EMU_Write32(SP + 24,RA); //+ 0x18
	V1 = -1;
	ZZ_CLOCKCYCLES(10,0x8003E660);
ZZ_3E638_28:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 -= 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	if (V0 != V1)
	{
		ZZ_CLOCKCYCLES(8,0x8003E6AC);
		goto ZZ_3E638_74;
	}
	A0 = 0x80010000;
	A0 += 4080;
	RA = 0x8003E690; //ZZ_3E638_58
	ZZ_CLOCKCYCLES(12,0x8003E6D4);
	goto ZZ_3E6D4;
ZZ_3E638_58:
	RA = 0x8003E698; //ZZ_3E638_60
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003E4E0);
	goto ZZ_3E4E0;
ZZ_3E638_60:
	A0 = 0x3;
	RA = 0x8003E6A4; //ZZ_3E638_6C
	A1 = R0;
	ZZ_CLOCKCYCLES(3,0x8003E6E4);
	goto ZZ_3E6E4;
ZZ_3E638_6C:
	ZZ_CLOCKCYCLES(2,0x8003E6C4);
	goto ZZ_3E638_8C;
ZZ_3E638_74:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18928); //+ 0x49F0
	V0 = (int32_t)V0 < (int32_t)A0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8003E660);
		goto ZZ_3E638_28;
	}
	ZZ_CLOCKCYCLES(6,0x8003E6C4);
ZZ_3E638_8C:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8003E588,ZZ_3E4F0_98);
	ZZ_JUMPREGISTER(0x8003E5AC,ZZ_3E4F0_BC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003E638,0x8003E660,ZZ_3E638);
ZZ_MARK_TARGET(0x8003E660,0x8003E690,ZZ_3E638_28);
ZZ_MARK_TARGET(0x8003E690,0x8003E698,ZZ_3E638_58);
ZZ_MARK_TARGET(0x8003E698,0x8003E6A4,ZZ_3E638_60);
ZZ_MARK_TARGET(0x8003E6A4,0x8003E6AC,ZZ_3E638_6C);
ZZ_MARK_TARGET(0x8003E6AC,0x8003E6C4,ZZ_3E638_74);
ZZ_MARK_TARGET(0x8003E6C4,0x8003E6D4,ZZ_3E638_8C);
