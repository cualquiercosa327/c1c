#ifdef ZZ_INCLUDE_CODE
ZZ_1A850:
	SP -= 600;
	EMU_Write32(SP + 592,S6); //+ 0x250
	S6 = A0;
	EMU_Write32(SP + 580,S3); //+ 0x244
	S3 = A1;
	EMU_Write32(SP + 584,S4); //+ 0x248
	S4 = A2;
	EMU_Write32(SP + 576,S2); //+ 0x240
	S2 = A3;
	V1 = SP + 272;
	EMU_Write32(SP + 588,S5); //+ 0x24C
	S5 = EMU_ReadU32(SP + 616); //+ 0x268
	V0 = -256;
	EMU_Write32(SP + 572,S1); //+ 0x23C
	S1 = V1 & V0;
	EMU_Write32(SP + 596,RA); //+ 0x254
	if (!S2)
	{
		EMU_Write32(SP + 568,S0); //+ 0x238
		ZZ_CLOCKCYCLES(18,0x8001A99C);
		goto ZZ_1A850_14C;
	}
	EMU_Write32(SP + 568,S0); //+ 0x238
	A0 = 0x2;
	S0 = SP + 528;
	RA = 0x8001A8A8; //ZZ_1A850_58
	A3 = S0;
	ZZ_CLOCKCYCLES(22,0x8001A5F4);
	goto ZZ_1A5F4;
ZZ_1A850_58:
	V0 = 0x1;
	if (S6 != V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001A928);
		goto ZZ_1A850_D8;
	}
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V0 <<= 1;
	if ((int32_t)V0 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(11,0x8001A914);
		goto ZZ_1A850_C4;
	}
	A0 = R0;
	A1 = S1;
	A3 = S2;
	ZZ_CLOCKCYCLES(13,0x8001A8DC);
ZZ_1A850_8C:
	V0 = EMU_ReadU8(A3);
	EMU_Write8(A1,V0);
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	A3 += 1;
	A0 += 1;
	V0 = LO;
	V0 <<= 1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		A1 += 1;
		ZZ_CLOCKCYCLES(14,0x8001A8DC);
		goto ZZ_1A850_8C;
	}
	A1 += 1;
	ZZ_CLOCKCYCLES(14,0x8001A914);
ZZ_1A850_C4:
	A0 = SP + 528;
	RA = 0x8001A920; //ZZ_1A850_D0
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x80040484);
	goto ZZ_40484;
ZZ_1A850_D0:
	ZZ_CLOCKCYCLES(2,0x8001A99C);
	goto ZZ_1A850_14C;
ZZ_1A850_D8:
	A0 = S0;
	RA = 0x8001A934; //ZZ_1A850_E4
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x800404E8);
	goto ZZ_404E8;
ZZ_1A850_E4:
	RA = 0x8001A93C; //ZZ_1A850_EC
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004025C);
	goto ZZ_4025C;
ZZ_1A850_EC:
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V0 <<= 1;
	if ((int32_t)V0 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(8,0x8001A99C);
		goto ZZ_1A850_14C;
	}
	A0 = R0;
	A3 = S2;
	A1 = S1;
	ZZ_CLOCKCYCLES(10,0x8001A964);
ZZ_1A850_114:
	V0 = EMU_ReadU8(A1);
	EMU_Write8(A3,V0);
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	A1 += 1;
	A0 += 1;
	V0 = LO;
	V0 <<= 1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		A3 += 1;
		ZZ_CLOCKCYCLES(14,0x8001A964);
		goto ZZ_1A850_114;
	}
	A3 += 1;
	ZZ_CLOCKCYCLES(14,0x8001A99C);
ZZ_1A850_14C:
	if (!S5)
	{
		A0 = 0x1;
		ZZ_CLOCKCYCLES(2,0x8001AAAC);
		goto ZZ_1A850_25C;
	}
	A0 = 0x1;
	A1 = S3;
	A2 = S4;
	S0 = SP + 528;
	RA = 0x8001A9B8; //ZZ_1A850_168
	A3 = S0;
	ZZ_CLOCKCYCLES(7,0x8001A5F4);
	goto ZZ_1A5F4;
ZZ_1A850_168:
	V0 = 0x1;
	if (S6 != V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001AA38);
		goto ZZ_1A850_1E8;
	}
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V0 <<= 1;
	if ((int32_t)V0 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(11,0x8001AA24);
		goto ZZ_1A850_1D4;
	}
	A0 = R0;
	A2 = S1;
	A1 = S5;
	ZZ_CLOCKCYCLES(13,0x8001A9EC);
ZZ_1A850_19C:
	V0 = EMU_ReadU8(A1);
	EMU_Write8(A2,V0);
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	A1 += 1;
	A0 += 1;
	V0 = LO;
	V0 <<= 1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		A2 += 1;
		ZZ_CLOCKCYCLES(14,0x8001A9EC);
		goto ZZ_1A850_19C;
	}
	A2 += 1;
	ZZ_CLOCKCYCLES(14,0x8001AA24);
ZZ_1A850_1D4:
	A0 = SP + 528;
	RA = 0x8001AA30; //ZZ_1A850_1E0
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x80040484);
	goto ZZ_40484;
ZZ_1A850_1E0:
	ZZ_CLOCKCYCLES(2,0x8001AAAC);
	goto ZZ_1A850_25C;
ZZ_1A850_1E8:
	A0 = S0;
	RA = 0x8001AA44; //ZZ_1A850_1F4
	A1 = S1;
	ZZ_CLOCKCYCLES(3,0x800404E8);
	goto ZZ_404E8;
ZZ_1A850_1F4:
	RA = 0x8001AA4C; //ZZ_1A850_1FC
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004025C);
	goto ZZ_4025C;
ZZ_1A850_1FC:
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V0 <<= 1;
	if ((int32_t)V0 <= 0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(8,0x8001AAAC);
		goto ZZ_1A850_25C;
	}
	A0 = R0;
	A2 = S5;
	A1 = S1;
	ZZ_CLOCKCYCLES(10,0x8001AA74);
ZZ_1A850_224:
	V0 = EMU_ReadU8(A1);
	EMU_Write8(A2,V0);
	V1 = EMU_ReadS16(SP + 532); //+ 0x214
	V0 = EMU_ReadS16(SP + 534); //+ 0x216
	EMU_SMultiply(V1,V0);
	A1 += 1;
	A0 += 1;
	V0 = LO;
	V0 <<= 1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		A2 += 1;
		ZZ_CLOCKCYCLES(14,0x8001AA74);
		goto ZZ_1A850_224;
	}
	A2 += 1;
	ZZ_CLOCKCYCLES(14,0x8001AAAC);
ZZ_1A850_25C:
	RA = EMU_ReadU32(SP + 596); //+ 0x254
	S6 = EMU_ReadU32(SP + 592); //+ 0x250
	S5 = EMU_ReadU32(SP + 588); //+ 0x24C
	S4 = EMU_ReadU32(SP + 584); //+ 0x248
	S3 = EMU_ReadU32(SP + 580); //+ 0x244
	S2 = EMU_ReadU32(SP + 576); //+ 0x240
	S1 = EMU_ReadU32(SP + 572); //+ 0x23C
	S0 = EMU_ReadU32(SP + 568); //+ 0x238
	SP += 600;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x8003BC9C,ZZ_3B8B8_3E4);
	ZZ_JUMPREGISTER(0x8003BCBC,ZZ_3B8B8_404);
	ZZ_JUMPREGISTER(0x8003BCDC,ZZ_3B8B8_424);
	ZZ_JUMPREGISTER(0x8003B380,ZZ_3AF24_45C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001A850,0x8001A8A8,ZZ_1A850);
ZZ_MARK_TARGET(0x8001A8A8,0x8001A8DC,ZZ_1A850_58);
ZZ_MARK_TARGET(0x8001A8DC,0x8001A914,ZZ_1A850_8C);
ZZ_MARK_TARGET(0x8001A914,0x8001A920,ZZ_1A850_C4);
ZZ_MARK_TARGET(0x8001A920,0x8001A928,ZZ_1A850_D0);
ZZ_MARK_TARGET(0x8001A928,0x8001A934,ZZ_1A850_D8);
ZZ_MARK_TARGET(0x8001A934,0x8001A93C,ZZ_1A850_E4);
ZZ_MARK_TARGET(0x8001A93C,0x8001A964,ZZ_1A850_EC);
ZZ_MARK_TARGET(0x8001A964,0x8001A99C,ZZ_1A850_114);
ZZ_MARK_TARGET(0x8001A99C,0x8001A9B8,ZZ_1A850_14C);
ZZ_MARK_TARGET(0x8001A9B8,0x8001A9EC,ZZ_1A850_168);
ZZ_MARK_TARGET(0x8001A9EC,0x8001AA24,ZZ_1A850_19C);
ZZ_MARK_TARGET(0x8001AA24,0x8001AA30,ZZ_1A850_1D4);
ZZ_MARK_TARGET(0x8001AA30,0x8001AA38,ZZ_1A850_1E0);
ZZ_MARK_TARGET(0x8001AA38,0x8001AA44,ZZ_1A850_1E8);
ZZ_MARK_TARGET(0x8001AA44,0x8001AA4C,ZZ_1A850_1F4);
ZZ_MARK_TARGET(0x8001AA4C,0x8001AA74,ZZ_1A850_1FC);
ZZ_MARK_TARGET(0x8001AA74,0x8001AAAC,ZZ_1A850_224);
ZZ_MARK_TARGET(0x8001AAAC,0x8001AAD8,ZZ_1A850_25C);
