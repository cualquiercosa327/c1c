#ifdef ZZ_INCLUDE_CODE
ZZ_4A44C:
	SP -= 24;
	EMU_Write32(SP + 20,RA); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = A1 << 16;
	A3 = (int32_t)V0 >> 16;
	V0 = A3 << 1;
	V0 += A3;
	V0 <<= 2;
	V0 = V0 - A3;
	V0 <<= 2;
	V0 = V0 - A3;
	T0 = A0;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 16;
	V1 = A0 << 2;
	AT = 0x80060000;
	AT += V1;
	V1 = EMU_ReadU32(AT + 1048); //+ 0x418
	V0 <<= 2;
	S0 = V0 + V1;
	V1 = A2 & 0xFF;
	V0 = 0x14;
	if (V1 == V0)
	{
		V0 = 0x1E;
		ZZ_CLOCKCYCLES(24,0x8004A4BC);
		goto ZZ_4A44C_70;
	}
	V0 = 0x1E;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(26,0x8004A4E0);
		goto ZZ_4A44C_94;
	}
	EMU_Write8(S0 + 22,A2); //+ 0x16
	ZZ_CLOCKCYCLES(28,0x8004A560);
	goto ZZ_4A44C_114;
ZZ_4A44C_70:
	EMU_Write8(S0 + 22,A2); //+ 0x16
	V0 = 0x1;
	EMU_Write8(S0 + 39,V0); //+ 0x27
	RA = 0x8004A4D0; //ZZ_4A44C_84
	A1 = A3;
	ZZ_CLOCKCYCLES(5,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A44C_84:
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	EMU_Write32(S0 + 136,V0); //+ 0x88
	EMU_Write32(S0 + 12,V1); //+ 0xC
	ZZ_CLOCKCYCLES(4,0x8004A584);
	goto ZZ_4A44C_138;
ZZ_4A44C_94:
	V0 = EMU_ReadU8(S0 + 40); //+ 0x28
	if (V0)
	{
		EMU_Write8(S0 + 22,A2); //+ 0x16
		ZZ_CLOCKCYCLES(4,0x8004A504);
		goto ZZ_4A44C_B8;
	}
	EMU_Write8(S0 + 22,A2); //+ 0x16
	EMU_Write8(S0 + 16,R0); //+ 0x10
	RA = 0x8004A4FC; //ZZ_4A44C_B0
	A1 = A3;
	ZZ_CLOCKCYCLES(7,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A44C_B0:
	EMU_Write32(S0 + 136,V0); //+ 0x88
	ZZ_CLOCKCYCLES(2,0x8004A584);
	goto ZZ_4A44C_138;
ZZ_4A44C_B8:
	V0 = V0 < 127;
	if (!V0)
	{
		A1 = A3;
		ZZ_CLOCKCYCLES(3,0x8004A548);
		goto ZZ_4A44C_FC;
	}
	A1 = A3;
	V0 = EMU_ReadU8(S0 + 40); //+ 0x28
	V0 -= 1;
	RA = 0x8004A524; //ZZ_4A44C_D8
	EMU_Write8(S0 + 40,V0); //+ 0x28
	ZZ_CLOCKCYCLES(8,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A44C_D8:
	V1 = EMU_ReadU8(S0 + 40); //+ 0x28
	if (!V1)
	{
		EMU_Write32(S0 + 136,V0); //+ 0x88
		ZZ_CLOCKCYCLES(4,0x8004A540);
		goto ZZ_4A44C_F4;
	}
	EMU_Write32(S0 + 136,V0); //+ 0x88
	V0 = EMU_ReadU32(S0 + 12); //+ 0xC
	EMU_Write32(S0 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(7,0x8004A584);
	goto ZZ_4A44C_138;
ZZ_4A44C_F4:
	EMU_Write8(S0 + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(2,0x8004A584);
	goto ZZ_4A44C_138;
ZZ_4A44C_FC:
	RA = 0x8004A550; //ZZ_4A44C_104
	ZZ_CLOCKCYCLES(2,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A44C_104:
	V0 = EMU_ReadU32(S0 + 12); //+ 0xC
	EMU_Write32(S0 + 136,R0); //+ 0x88
	EMU_Write32(S0 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(4,0x8004A584);
	goto ZZ_4A44C_138;
ZZ_4A44C_114:
	A0 = T0 << 16;
	A0 = (int32_t)A0 >> 16;
	V0 = EMU_ReadU8(S0 + 42); //+ 0x2A
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	V0 += 1;
	RA = 0x8004A580; //ZZ_4A44C_134
	EMU_Write8(S0 + 42,V0); //+ 0x2A
	ZZ_CLOCKCYCLES(8,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A44C_134:
	EMU_Write32(S0 + 136,V0); //+ 0x88
	ZZ_CLOCKCYCLES(1,0x8004A584);
ZZ_4A44C_138:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 24;
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004A44C,0x8004A4BC,ZZ_4A44C);
ZZ_MARK_TARGET(0x8004A4BC,0x8004A4D0,ZZ_4A44C_70);
ZZ_MARK_TARGET(0x8004A4D0,0x8004A4E0,ZZ_4A44C_84);
ZZ_MARK_TARGET(0x8004A4E0,0x8004A4FC,ZZ_4A44C_94);
ZZ_MARK_TARGET(0x8004A4FC,0x8004A504,ZZ_4A44C_B0);
ZZ_MARK_TARGET(0x8004A504,0x8004A524,ZZ_4A44C_B8);
ZZ_MARK_TARGET(0x8004A524,0x8004A540,ZZ_4A44C_D8);
ZZ_MARK_TARGET(0x8004A540,0x8004A548,ZZ_4A44C_F4);
ZZ_MARK_TARGET(0x8004A548,0x8004A550,ZZ_4A44C_FC);
ZZ_MARK_TARGET(0x8004A550,0x8004A560,ZZ_4A44C_104);
ZZ_MARK_TARGET(0x8004A560,0x8004A580,ZZ_4A44C_114);
ZZ_MARK_TARGET(0x8004A580,0x8004A584,ZZ_4A44C_134);
ZZ_MARK_TARGET(0x8004A584,0x8004A594,ZZ_4A44C_138);
