#ifdef ZZ_INCLUDE_CODE
ZZ_3CD60:
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	A0 = 0xE;
	V0 = EMU_ReadU32(GP + 360); //+ 0x168
	V1 = 0x80060000;
	V1 += 6668;
	EMU_Write32(SP + 20,RA); //+ 0x14
	EMU_Write32(V0 + 8,R0); //+ 0x8
	EMU_Write32(V0 + 20,R0); //+ 0x14
	ZZ_CLOCKCYCLES(10,0x8003CD88);
ZZ_3CD60_28:
	EMU_Write32(V1,R0);
	A0 -= 1;
	if ((int32_t)A0 >= 0)
	{
		V1 -= 4;
		ZZ_CLOCKCYCLES(4,0x8003CD88);
		goto ZZ_3CD60_28;
	}
	V1 -= 4;
	RA = 0x8003CDA0; //ZZ_3CD60_40
	A0 = R0;
	ZZ_CLOCKCYCLES(6,0x8003CAB0);
	goto ZZ_3CAB0;
ZZ_3CD60_40:
	A0 = EMU_ReadU32(GP + 360); //+ 0x168
	EMU_Write32(A0,R0);
	V1 = EMU_ReadU32(A0);
	V0 = 0x1;
	if (V1)
	{
		EMU_Write32(A0 + 24,V0); //+ 0x18
		ZZ_CLOCKCYCLES(7,0x8003CDD0);
		goto ZZ_3CD60_70;
	}
	EMU_Write32(A0 + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(A0 + 4); //+ 0x4
	V1 = -2;
	V0 &= V1;
	EMU_Write32(A0 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(12,0x8003CDE8);
	goto ZZ_3CD60_88;
ZZ_3CD60_70:
	V0 = EMU_ReadU32(A0 + 4); //+ 0x4
	V0 |= 0x1;
	EMU_Write32(A0 + 4,V0); //+ 0x4
	AT = 0x80060000;
	EMU_Write32(AT + 6520,V0); //+ 0x1978
	ZZ_CLOCKCYCLES(6,0x8003CDE8);
ZZ_3CD60_88:
	V0 = EMU_ReadU32(GP + 360); //+ 0x168
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	A0 = -64;
	V1 &= A0;
	V1 |= S0;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	AT = 0x80060000;
	EMU_Write32(AT + 6520,V1); //+ 0x1978
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(14);
	ZZ_JUMPREGISTER(0x8003CE94,ZZ_3CE20_74);
	ZZ_JUMPREGISTER(0x8003D664,ZZ_3D4EC_178);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003CD60,0x8003CD88,ZZ_3CD60);
ZZ_MARK_TARGET(0x8003CD88,0x8003CDA0,ZZ_3CD60_28);
ZZ_MARK_TARGET(0x8003CDA0,0x8003CDD0,ZZ_3CD60_40);
ZZ_MARK_TARGET(0x8003CDD0,0x8003CDE8,ZZ_3CD60_70);
ZZ_MARK_TARGET(0x8003CDE8,0x8003CE20,ZZ_3CD60_88);
