#ifdef ZZ_INCLUDE_CODE
ZZ_4CFB0:
	A1 <<= 16;
	A1 = (int32_t)A1 >> 16;
	V0 = A1 << 1;
	V0 += A1;
	V0 <<= 2;
	V0 = V0 - A1;
	V0 <<= 2;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 14;
	AT = 0x80060000;
	AT += A0;
	V1 = EMU_ReadU32(AT + 1048); //+ 0x418
	V0 = V0 - A1;
	V0 <<= 2;
	A0 = V0 + V1;
	V1 = EMU_ReadU32(A0 + 144); //+ 0x90
	V0 = V1 & 0x4;
	if (V0)
	{
		A1 = A2;
		ZZ_CLOCKCYCLES(20,0x8004D078);
		goto ZZ_4CFB0_C8;
	}
	A1 = A2;
	V0 = V1 & 0x100;
	if (V0)
	{
		V0 = A2 << 16;
		ZZ_CLOCKCYCLES(23,0x8004D078);
		goto ZZ_4CFB0_C8;
	}
	V0 = A2 << 16;
	V0 = (int32_t)V0 >> 16;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(26,0x8004D078);
		goto ZZ_4CFB0_C8;
	}
	EMU_Write16(A0 + 62,A1); //+ 0x3E
	EMU_Write32(A0 + 148,A3); //+ 0x94
	EMU_Write16(A0 + 64,A1); //+ 0x40
	if ((int32_t)V0 >= 0)
	{
		V1 = V0;
		ZZ_CLOCKCYCLES(31,0x8004D030);
		goto ZZ_4CFB0_80;
	}
	V1 = V0;
	V1 = -V1;
	ZZ_CLOCKCYCLES(32,0x8004D030);
ZZ_4CFB0_80:
	V0 = A3 < V1;
	if (V0)
	{
		EMU_Write32(A0 + 152,A3); //+ 0x98
		ZZ_CLOCKCYCLES(3,0x8004D058);
		goto ZZ_4CFB0_A8;
	}
	EMU_Write32(A0 + 152,A3); //+ 0x98
	EMU_UDivide(A3,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(6,0x8004D04C);
		goto ZZ_4CFB0_9C;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(7,0x8004D04C);
ZZ_4CFB0_9C:
	V0 = LO;
	EMU_Write16(A0 + 66,V0); //+ 0x42
	ZZ_CLOCKCYCLES(3,0x8004D078);
	goto ZZ_4CFB0_C8;
ZZ_4CFB0_A8:
	EMU_UDivide(V1,A3);
	if (A3)
	{
		ZZ_CLOCKCYCLES(3,0x8004D068);
		goto ZZ_4CFB0_B8;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(4,0x8004D068);
ZZ_4CFB0_B8:
	V0 = LO;
	V0 = -V0;
	EMU_Write16(A0 + 66,V0); //+ 0x42
	ZZ_CLOCKCYCLES(4,0x8004D078);
ZZ_4CFB0_C8:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x8004956C,ZZ_49538_34);
	ZZ_JUMPREGISTER(0x8004945C,ZZ_49428_34);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004CFB0,0x8004D030,ZZ_4CFB0);
ZZ_MARK_TARGET(0x8004D030,0x8004D04C,ZZ_4CFB0_80);
ZZ_MARK_TARGET(0x8004D04C,0x8004D058,ZZ_4CFB0_9C);
ZZ_MARK_TARGET(0x8004D058,0x8004D068,ZZ_4CFB0_A8);
ZZ_MARK_TARGET(0x8004D068,0x8004D078,ZZ_4CFB0_B8);
ZZ_MARK_TARGET(0x8004D078,0x8004D080,ZZ_4CFB0_C8);
