#ifdef ZZ_INCLUDE_CODE
ZZ_11870:
	A1 += 3;
	V0 = -4;
	A1 &= V0;
	V0 = EMU_ReadU32(A0 - 4); //+ 0xFFFFFFFC
	V1 = -2;
	if (V0 != V1)
	{
		T1 = A0 - 4;
		ZZ_CLOCKCYCLES(7,0x80011894);
		goto ZZ_11870_24;
	}
	T1 = A0 - 4;
	V0 = R0;
	ZZ_CLOCKCYCLES(9,0x80011A10);
	goto ZZ_11870_1A0;
ZZ_11870_24:
	V1 &= V0;
	V0 = V1 < A1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x80011970);
		goto ZZ_11870_100;
	}
	A3 = T1;
	T0 = V1;
	T2 = -2;
	ZZ_CLOCKCYCLES(7,0x800118B0);
ZZ_11870_40:
	V0 = EMU_ReadU32(A3);
	V0 >>= 2;
	V0 <<= 2;
	A2 = A3 + V0;
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	if (V0 == T2)
	{
		A3 = A2 + 4;
		ZZ_CLOCKCYCLES(9,0x800118E8);
		goto ZZ_11870_78;
	}
	A3 = A2 + 4;
	V0 &= 0x1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(12,0x80011970);
		goto ZZ_11870_100;
	}
	ZZ_CLOCKCYCLES(14,0x80011940);
	goto ZZ_11870_D0;
ZZ_11870_78:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26024); //+ 0x65A8
	V1 = A1 - T0;
	V0 = V0 - A3;
	V0 = (int32_t)V0 >> 2;
	V0 -= 4;
	V0 = V0 < V1;
	if (V0)
	{
		V0 = V1 | 0x1;
		ZZ_CLOCKCYCLES(9,0x80011970);
		goto ZZ_11870_100;
	}
	V0 = V1 | 0x1;
	EMU_Write32(A2 + 4,V0); //+ 0x4
	V0 = V1 >> 2;
	V0 <<= 2;
	V0 += A3;
	AT = 0x80050000;
	EMU_Write32(AT + 26008,V0); //+ 0x6598
	EMU_Write32(V0,T2);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26008); //+ 0x6598
	V0 += 4;
	AT = 0x80050000;
	EMU_Write32(AT + 26008,V0); //+ 0x6598
	ZZ_CLOCKCYCLES(22,0x80011940);
ZZ_11870_D0:
	V0 = EMU_ReadU32(A3);
	V1 = EMU_ReadU32(T1);
	V0 &= T2;
	V0 += V1;
	EMU_Write32(T1,V0);
	V0 = EMU_ReadU32(A3);
	V0 &= T2;
	T0 += V0;
	V0 = T0 < A1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(12,0x800118B0);
		goto ZZ_11870_40;
	}
	ZZ_CLOCKCYCLES(12,0x80011970);
ZZ_11870_100:
	A2 = EMU_ReadU32(T1);
	V0 = -4;
	V0 &= A2;
	V0 = A1 < V0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x800119F4);
		goto ZZ_11870_184;
	}
	if ((int32_t)A1 >= 0)
	{
		V1 = A1;
		ZZ_CLOCKCYCLES(8,0x80011994);
		goto ZZ_11870_124;
	}
	V1 = A1;
	V1 = A1 + 3;
	ZZ_CLOCKCYCLES(9,0x80011994);
ZZ_11870_124:
	V1 = (int32_t)V1 >> 2;
	V1 <<= 2;
	V1 += T1;
	V0 = -2;
	V0 &= A2;
	V0 = V0 - A1;
	V0 -= 4;
	EMU_Write32(V1 + 4,V0); //+ 0x4
	if ((int32_t)A1 >= 0)
	{
		V0 = A1;
		ZZ_CLOCKCYCLES(10,0x800119C0);
		goto ZZ_11870_150;
	}
	V0 = A1;
	V0 = A1 + 3;
	ZZ_CLOCKCYCLES(11,0x800119C0);
ZZ_11870_150:
	V0 = (int32_t)V0 >> 2;
	V0 <<= 2;
	V0 += T1;
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V1 |= 0x1;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	V0 = EMU_ReadU32(T1);
	V0 &= 0x1;
	V0 |= A1;
	EMU_Write32(T1,V0);
	ZZ_CLOCKCYCLES(13,0x80011A0C);
	goto ZZ_11870_19C;
ZZ_11870_184:
	V0 = -2;
	V0 &= A2;
	V0 = V0 < A1;
	if (!V0)
	{
		V0 = A0;
		ZZ_CLOCKCYCLES(5,0x80011A10);
		goto ZZ_11870_1A0;
	}
	V0 = A0;
	A0 = R0;
	ZZ_CLOCKCYCLES(6,0x80011A0C);
ZZ_11870_19C:
	V0 = A0;
	ZZ_CLOCKCYCLES(1,0x80011A10);
ZZ_11870_1A0:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80011CE0,ZZ_11CA0_40);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80011870,0x80011894,ZZ_11870);
ZZ_MARK_TARGET(0x80011894,0x800118B0,ZZ_11870_24);
ZZ_MARK_TARGET(0x800118B0,0x800118E8,ZZ_11870_40);
ZZ_MARK_TARGET(0x800118E8,0x80011940,ZZ_11870_78);
ZZ_MARK_TARGET(0x80011940,0x80011970,ZZ_11870_D0);
ZZ_MARK_TARGET(0x80011970,0x80011994,ZZ_11870_100);
ZZ_MARK_TARGET(0x80011994,0x800119C0,ZZ_11870_124);
ZZ_MARK_TARGET(0x800119C0,0x800119F4,ZZ_11870_150);
ZZ_MARK_TARGET(0x800119F4,0x80011A0C,ZZ_11870_184);
ZZ_MARK_TARGET(0x80011A0C,0x80011A10,ZZ_11870_19C);
ZZ_MARK_TARGET(0x80011A10,0x80011A18,ZZ_11870_1A0);
