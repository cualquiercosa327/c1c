#ifdef ZZ_INCLUDE_CODE
ZZ_3ADB8:
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	EMU_Write32(SP + 20,RA); //+ 0x14
	RA = 0x8003ADCC; //ZZ_3ADB8_14
	S0 = A0;
	ZZ_CLOCKCYCLES(5,0x8003C3FC);
	goto ZZ_3C3FC;
ZZ_3ADB8_14:
	if (!V0)
	{
		A0 = 0x6;
		ZZ_CLOCKCYCLES(2,0x8003ADE8);
		goto ZZ_3ADB8_30;
	}
	A0 = 0x6;
	V0 = EMU_ReadU32(GP + 360); //+ 0x168
	RA = 0x8003ADE0; //ZZ_3ADB8_28
	EMU_Write32(V0 + 8,R0); //+ 0x8
	ZZ_CLOCKCYCLES(5,0x8003CAB0);
	goto ZZ_3CAB0;
ZZ_3ADB8_28:
	RA = 0x8003ADE8; //ZZ_3ADB8_30
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003CAF8);
	goto ZZ_3CAF8;
ZZ_3ADB8_30:
	A0 = EMU_ReadU32(S0);
	RA = 0x8003ADF4; //ZZ_3ADB8_3C
	ZZ_CLOCKCYCLES(3,0x8003C900);
	goto ZZ_3C900;
ZZ_3ADB8_3C:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x8003B000,ZZ_3AF24_DC);
	ZZ_JUMPREGISTER(0x8003B048,ZZ_3AF24_124);
	ZZ_JUMPREGISTER(0x8003B230,ZZ_3AF24_30C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003ADB8,0x8003ADCC,ZZ_3ADB8);
ZZ_MARK_TARGET(0x8003ADCC,0x8003ADE0,ZZ_3ADB8_14);
ZZ_MARK_TARGET(0x8003ADE0,0x8003ADE8,ZZ_3ADB8_28);
ZZ_MARK_TARGET(0x8003ADE8,0x8003ADF4,ZZ_3ADB8_30);
ZZ_MARK_TARGET(0x8003ADF4,0x8003AE08,ZZ_3ADB8_3C);
