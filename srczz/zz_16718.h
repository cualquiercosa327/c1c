#ifdef ZZ_INCLUDE_CODE
ZZ_16718:
	SP -= 48;
	EMU_Write32(SP + 36,S3); //+ 0x24
	S3 = A0;
	V0 = 0x80060000;
	V0 -= 6376;
	EMU_Write32(SP + 28,S1); //+ 0x1C
	S1 = R0;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 32,S2); //+ 0x20
	EMU_Write32(SP + 24,S0); //+ 0x18
	if ((int32_t)S3 <= 0)
	{
		EMU_Write32(V0,S3);
		ZZ_CLOCKCYCLES(12,0x80016784);
		goto ZZ_16718_6C;
	}
	EMU_Write32(V0,S3);
	S0 = V0;
	S2 = R0;
	ZZ_CLOCKCYCLES(14,0x80016750);
ZZ_16718_38:
	EMU_Write32(S0 + 20,R0); //+ 0x14
	EMU_Write32(S0 + 12,R0); //+ 0xC
	EMU_Write32(S0 + 8,R0); //+ 0x8
	AT = 0x80060000;
	AT += S2;
	EMU_Write32(AT - 6372,R0); //+ 0xFFFFE71C
	RA = 0x80016770; //ZZ_16718_58
	A0 = S1;
	ZZ_CLOCKCYCLES(8,0x8003E410);
	goto ZZ_3E410;
ZZ_16718_58:
	S0 += 20;
	S1 += 1;
	V0 = (int32_t)S1 < (int32_t)S3;
	if (V0)
	{
		S2 += 20;
		ZZ_CLOCKCYCLES(5,0x80016750);
		goto ZZ_16718_38;
	}
	S2 += 20;
	ZZ_CLOCKCYCLES(5,0x80016784);
ZZ_16718_6C:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S3 = EMU_ReadU32(SP + 36); //+ 0x24
	S2 = EMU_ReadU32(SP + 32); //+ 0x20
	S1 = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8001658C,ZZ_1652C_60);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80016718,0x80016750,ZZ_16718);
ZZ_MARK_TARGET(0x80016750,0x80016770,ZZ_16718_38);
ZZ_MARK_TARGET(0x80016770,0x80016784,ZZ_16718_58);
ZZ_MARK_TARGET(0x80016784,0x800167A4,ZZ_16718_6C);
