#ifdef ZZ_INCLUDE_CODE
ZZ_169F8:
	SP -= 136;
	EMU_Write32(SP + 128,S0); //+ 0x80
	S0 = SP + 112;
	EMU_Write32(SP + 132,RA); //+ 0x84
	RA = 0x80016A10; //ZZ_169F8_18
	A0 = S0;
	ZZ_CLOCKCYCLES(6,0x8003F7D8);
	goto ZZ_3F7D8;
ZZ_169F8_18:
	RA = 0x80016A18; //ZZ_169F8_20
	A0 = S0;
	ZZ_CLOCKCYCLES(2,0x8003FA14);
	goto ZZ_3FA14;
ZZ_169F8_20:
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 31736); //+ 0xFFFF8408
	V0 = 0x200;
	EMU_Write16(SP + 124,V0); //+ 0x7C
	V0 = 0xF0;
	EMU_Write16(SP + 126,V0); //+ 0x7E
	EMU_Write8(SP + 116,R0); //+ 0x74
	EMU_Write8(SP + 117,R0); //+ 0x75
	EMU_Write8(SP + 118,R0); //+ 0x76
	V0 = EMU_ReadU16(V1 + 24); //+ 0x18
	A0 = S0;
	EMU_Write16(SP + 122,R0); //+ 0x7A
	RA = 0x80016A50; //ZZ_169F8_58
	EMU_Write16(SP + 120,V0); //+ 0x78
	ZZ_CLOCKCYCLES(14,0x80040760);
	goto ZZ_40760;
ZZ_169F8_58:
	RA = 0x80016A58; //ZZ_169F8_60
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8004025C);
	goto ZZ_4025C;
ZZ_169F8_60:
	RA = EMU_ReadU32(SP + 132); //+ 0x84
	S0 = EMU_ReadU32(SP + 128); //+ 0x80
	SP += 136;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80032384,ZZ_322CC_B8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800169F8,0x80016A10,ZZ_169F8);
ZZ_MARK_TARGET(0x80016A10,0x80016A18,ZZ_169F8_18);
ZZ_MARK_TARGET(0x80016A18,0x80016A50,ZZ_169F8_20);
ZZ_MARK_TARGET(0x80016A50,0x80016A58,ZZ_169F8_58);
ZZ_MARK_TARGET(0x80016A58,0x80016A6C,ZZ_169F8_60);
