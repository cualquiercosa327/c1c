#ifdef ZZ_INCLUDE_CODE
ZZ_3C038:
	SP -= 640;
	A0 = EMU_ReadU32(GP + 360); //+ 0x168
	V0 = -1;
	EMU_Write32(SP + 636,RA); //+ 0x27C
	EMU_Write32(SP + 632,S4); //+ 0x278
	EMU_Write32(SP + 628,S3); //+ 0x274
	EMU_Write32(SP + 624,S2); //+ 0x270
	EMU_Write32(SP + 620,S1); //+ 0x26C
	EMU_Write32(SP + 616,S0); //+ 0x268
	EMU_Write32(SP + 608,V0); //+ 0x260
	V0 = EMU_ReadU32(A0 + 8); //+ 0x8
	V1 = EMU_ReadU32(A0 + 12); //+ 0xC
	if ((int32_t)V0 <= 0)
	{
		V0 = (int32_t)V1 < (int32_t)V0;
		ZZ_CLOCKCYCLES(14,0x8003C094);
		goto ZZ_3C038_5C;
	}
	V0 = (int32_t)V1 < (int32_t)V0;
	if (!V0)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(16,0x8003C094);
		goto ZZ_3C038_5C;
	}
	V0 = V1 << 2;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 += 40;
	V1 = V0 + A0;
	ZZ_CLOCKCYCLES(23,0x8003C098);
	goto ZZ_3C038_60;
ZZ_3C038_5C:
	V1 = R0;
	ZZ_CLOCKCYCLES(1,0x8003C098);
ZZ_3C038_60:
	V0 = SP + 608;
	if (!V1)
	{
		EMU_Write32(SP + 592,V0); //+ 0x250
		ZZ_CLOCKCYCLES(3,0x8003C0B4);
		goto ZZ_3C038_7C;
	}
	EMU_Write32(SP + 592,V0); //+ 0x250
	V0 = EMU_ReadU32(V1);
	if (V0)
	{
		A0 = SP + 16;
		ZZ_CLOCKCYCLES(7,0x8003C0CC);
		goto ZZ_3C038_94;
	}
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(7,0x8003C0B4);
ZZ_3C038_7C:
	RA = 0x8003C0BC; //ZZ_3C038_84
	A0 = 0x2;
	ZZ_CLOCKCYCLES(2,0x8003CAB0);
	goto ZZ_3CAB0;
ZZ_3C038_84:
	RA = 0x8003C0C4; //ZZ_3C038_8C
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003CAF8);
	goto ZZ_3CAF8;
ZZ_3C038_8C:
	V0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003C334);
	goto ZZ_3C038_2FC;
ZZ_3C038_94:
	A1 = 0x80050000;
	A1 += 25980;
	A2 = 0x80050000;
	A2 += 25972;
	V0 = EMU_ReadU32(V1 + 8); //+ 0x8
	S0 = R0;
	A3 = V0 << 2;
	A3 += V0;
	A3 <<= 3;
	V0 = EMU_ReadU32(GP + 360); //+ 0x168
	A3 += 1180;
	RA = 0x8003C100; //ZZ_3C038_C8
	A3 += V0;
	ZZ_CLOCKCYCLES(13,0x8003D740);
	goto ZZ_3D740;
ZZ_3C038_C8:
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(1,0x8003C104);
ZZ_3C038_CC:
	RA = 0x8003C10C; //ZZ_3C038_D4
	A1 = 0x1;
	ZZ_CLOCKCYCLES(2,0x8003E218);
	goto ZZ_3E218;
ZZ_3C038_D4:
	if ((int32_t)V0 >= 0)
	{
		EMU_Write32(SP + 608,V0); //+ 0x260
		ZZ_CLOCKCYCLES(2,0x8003C124);
		goto ZZ_3C038_EC;
	}
	EMU_Write32(SP + 608,V0); //+ 0x260
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		A0 = SP + 16;
		ZZ_CLOCKCYCLES(6,0x8003C104);
		goto ZZ_3C038_CC;
	}
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(6,0x8003C124);
ZZ_3C038_EC:
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(3,0x8003C13C);
		goto ZZ_3C038_104;
	}
	V0 = R0;
	RA = 0x8003C138; //ZZ_3C038_100
	A0 = SP + 592;
	ZZ_CLOCKCYCLES(5,0x8003AED8);
	goto ZZ_3AED8;
ZZ_3C038_100:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x8003C13C);
ZZ_3C038_104:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C334);
		goto ZZ_3C038_2FC;
	}
	V0 = R0;
	S0 = R0;
	S1 = 0x80;
	ZZ_CLOCKCYCLES(4,0x8003C14C);
ZZ_3C038_114:
	A0 = EMU_ReadU32(SP + 608); //+ 0x260
	A1 = SP + 464;
	RA = 0x8003C15C; //ZZ_3C038_124
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x8003E228);
	goto ZZ_3E228;
ZZ_3C038_124:
	if (V0 == S1)
	{
		V0 = (int32_t)S0 < 3;
		ZZ_CLOCKCYCLES(2,0x8003C174);
		goto ZZ_3C038_13C;
	}
	V0 = (int32_t)S0 < 3;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8003C14C);
		goto ZZ_3C038_114;
	}
	ZZ_CLOCKCYCLES(6,0x8003C174);
ZZ_3C038_13C:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C188);
		goto ZZ_3C038_150;
	}
	V0 = R0;
	RA = 0x8003C184; //ZZ_3C038_14C
	A0 = SP + 592;
	ZZ_CLOCKCYCLES(4,0x8003AED8);
	goto ZZ_3AED8;
ZZ_3C038_14C:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x8003C188);
ZZ_3C038_150:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C334);
		goto ZZ_3C038_2FC;
	}
	V0 = R0;
	S2 = R0;
	S3 = SP + 80;
	S4 = 0x80;
	S0 = R0;
	ZZ_CLOCKCYCLES(6,0x8003C1A0);
ZZ_3C038_168:
	S1 = S2 << 7;
	ZZ_CLOCKCYCLES(1,0x8003C1A4);
ZZ_3C038_16C:
	A0 = EMU_ReadU32(SP + 608); //+ 0x260
	A1 = S3 + S1;
	RA = 0x8003C1B4; //ZZ_3C038_17C
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x8003E228);
	goto ZZ_3E228;
ZZ_3C038_17C:
	if (V0 == S4)
	{
		V0 = (int32_t)S0 < 3;
		ZZ_CLOCKCYCLES(2,0x8003C1CC);
		goto ZZ_3C038_194;
	}
	V0 = (int32_t)S0 < 3;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8003C1A4);
		goto ZZ_3C038_16C;
	}
	ZZ_CLOCKCYCLES(6,0x8003C1CC);
ZZ_3C038_194:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C1E0);
		goto ZZ_3C038_1A8;
	}
	V0 = R0;
	RA = 0x8003C1DC; //ZZ_3C038_1A4
	A0 = SP + 592;
	ZZ_CLOCKCYCLES(4,0x8003AED8);
	goto ZZ_3AED8;
ZZ_3C038_1A4:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x8003C1E0);
ZZ_3C038_1A8:
	if (V0)
	{
		S2 += 1;
		ZZ_CLOCKCYCLES(2,0x8003C0C4);
		goto ZZ_3C038_8C;
	}
	S2 += 1;
	V0 = (int32_t)S2 < 3;
	if (V0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(5,0x8003C1A0);
		goto ZZ_3C038_168;
	}
	S0 = R0;
	S2 = R0;
	S1 = 0x80;
	ZZ_CLOCKCYCLES(7,0x8003C1FC);
ZZ_3C038_1C4:
	A0 = EMU_ReadU32(SP + 608); //+ 0x260
	A1 = SP + 464;
	RA = 0x8003C20C; //ZZ_3C038_1D4
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x8003E228);
	goto ZZ_3E228;
ZZ_3C038_1D4:
	if (V0 == S1)
	{
		V0 = (int32_t)S0 < 3;
		ZZ_CLOCKCYCLES(2,0x8003C224);
		goto ZZ_3C038_1EC;
	}
	V0 = (int32_t)S0 < 3;
	S0 += 1;
	V0 = (int32_t)S0 < 3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8003C1FC);
		goto ZZ_3C038_1C4;
	}
	ZZ_CLOCKCYCLES(6,0x8003C224);
ZZ_3C038_1EC:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C238);
		goto ZZ_3C038_200;
	}
	V0 = R0;
	RA = 0x8003C234; //ZZ_3C038_1FC
	A0 = SP + 592;
	ZZ_CLOCKCYCLES(4,0x8003AED8);
	goto ZZ_3AED8;
ZZ_3C038_1FC:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x8003C238);
ZZ_3C038_200:
	if (V0)
	{
		A0 = SP + 464;
		ZZ_CLOCKCYCLES(2,0x8003C0C4);
		goto ZZ_3C038_8C;
	}
	A0 = SP + 464;
	S0 = EMU_ReadU32(SP + 588); //+ 0x24C
	A1 = 0x80;
	RA = 0x8003C250; //ZZ_3C038_218
	EMU_Write32(SP + 588,R0); //+ 0x24C
	ZZ_CLOCKCYCLES(6,0x8003BFFC);
	goto ZZ_3BFFC;
ZZ_3C038_218:
	if (S0 != V0)
	{
		T2 = R0;
		ZZ_CLOCKCYCLES(2,0x8003C2D4);
		goto ZZ_3C038_29C;
	}
	T2 = R0;
	RA = 0x8003C260; //ZZ_3C038_228
	A0 = 0x1;
	ZZ_CLOCKCYCLES(4,0x80026200);
	goto ZZ_26200;
ZZ_3C038_228:
	V0 = EMU_ReadU32(SP + 468); //+ 0x1D4
	V1 = EMU_ReadU32(SP + 472); //+ 0x1D8
	A0 = EMU_ReadU32(SP + 476); //+ 0x1DC
	A1 = EMU_ReadU32(SP + 480); //+ 0x1E0
	A2 = EMU_ReadU32(SP + 484); //+ 0x1E4
	A3 = EMU_ReadU32(SP + 488); //+ 0x1E8
	T0 = EMU_ReadU32(SP + 492); //+ 0x1EC
	T1 = EMU_ReadU32(SP + 496); //+ 0x1F0
	T2 = 0x1;
	AT = 0x80060000;
	EMU_Write32(AT + 6468,V0); //+ 0x1944
	AT = 0x80060000;
	EMU_Write32(AT + 6408,V1); //+ 0x1908
	AT = 0x80060000;
	EMU_Write32(AT + 6412,A0); //+ 0x190C
	AT = 0x80060000;
	EMU_Write32(AT + 6416,A1); //+ 0x1910
	AT = 0x80060000;
	EMU_Write32(AT + 6420,A2); //+ 0x1914
	AT = 0x80060000;
	EMU_Write32(AT + 6424,A3); //+ 0x1918
	AT = 0x80060000;
	EMU_Write32(AT + 6536,T0); //+ 0x1988
	AT = 0x80060000;
	EMU_Write32(AT + 6572,T1); //+ 0x19AC
	AT = 0x80060000;
	EMU_Write32(AT + 6472,V0); //+ 0x1948
	AT = 0x80060000;
	EMU_Write32(AT + 6364,V0); //+ 0x18DC
	ZZ_CLOCKCYCLES(29,0x8003C2D4);
ZZ_3C038_29C:
	if (T2)
	{
		V0 = 0x5;
		ZZ_CLOCKCYCLES(2,0x8003C2F0);
		goto ZZ_3C038_2B8;
	}
	V0 = 0x5;
	S2 += 1;
	V0 = (int32_t)S2 < 5;
	if (V0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(6,0x8003C1FC);
		goto ZZ_3C038_1C4;
	}
	S0 = R0;
	V0 = 0x5;
	ZZ_CLOCKCYCLES(7,0x8003C2F0);
ZZ_3C038_2B8:
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(2,0x8003C320);
		goto ZZ_3C038_2E8;
	}
	RA = 0x8003C300; //ZZ_3C038_2C8
	ZZ_CLOCKCYCLES(4,0x8003C3FC);
	goto ZZ_3C3FC;
ZZ_3C038_2C8:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8003C328);
		goto ZZ_3C038_2F0;
	}
	RA = 0x8003C310; //ZZ_3C038_2D8
	A0 = R0;
	ZZ_CLOCKCYCLES(4,0x8003CAF8);
	goto ZZ_3CAF8;
ZZ_3C038_2D8:
	RA = 0x8003C318; //ZZ_3C038_2E0
	A0 = 0x2;
	ZZ_CLOCKCYCLES(2,0x8003CAB0);
	goto ZZ_3CAB0;
ZZ_3C038_2E0:
	ZZ_CLOCKCYCLES(2,0x8003C328);
	goto ZZ_3C038_2F0;
ZZ_3C038_2E8:
	RA = 0x8003C328; //ZZ_3C038_2F0
	A0 = R0;
	ZZ_CLOCKCYCLES(2,0x8003CAF8);
	goto ZZ_3CAF8;
ZZ_3C038_2F0:
	RA = 0x8003C330; //ZZ_3C038_2F8
	A0 = SP + 608;
	ZZ_CLOCKCYCLES(2,0x8003C900);
	goto ZZ_3C900;
ZZ_3C038_2F8:
	V0 = 0x1;
	ZZ_CLOCKCYCLES(1,0x8003C334);
ZZ_3C038_2FC:
	RA = EMU_ReadU32(SP + 636); //+ 0x27C
	S4 = EMU_ReadU32(SP + 632); //+ 0x278
	S3 = EMU_ReadU32(SP + 628); //+ 0x274
	S2 = EMU_ReadU32(SP + 624); //+ 0x270
	S1 = EMU_ReadU32(SP + 620); //+ 0x26C
	S0 = EMU_ReadU32(SP + 616); //+ 0x268
	SP += 640;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x8003AA2C,ZZ_3A94C_E0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003C038,0x8003C094,ZZ_3C038);
ZZ_MARK_TARGET(0x8003C094,0x8003C098,ZZ_3C038_5C);
ZZ_MARK_TARGET(0x8003C098,0x8003C0B4,ZZ_3C038_60);
ZZ_MARK_TARGET(0x8003C0B4,0x8003C0BC,ZZ_3C038_7C);
ZZ_MARK_TARGET(0x8003C0BC,0x8003C0C4,ZZ_3C038_84);
ZZ_MARK_TARGET(0x8003C0C4,0x8003C0CC,ZZ_3C038_8C);
ZZ_MARK_TARGET(0x8003C0CC,0x8003C100,ZZ_3C038_94);
ZZ_MARK_TARGET(0x8003C100,0x8003C104,ZZ_3C038_C8);
ZZ_MARK_TARGET(0x8003C104,0x8003C10C,ZZ_3C038_CC);
ZZ_MARK_TARGET(0x8003C10C,0x8003C124,ZZ_3C038_D4);
ZZ_MARK_TARGET(0x8003C124,0x8003C138,ZZ_3C038_EC);
ZZ_MARK_TARGET(0x8003C138,0x8003C13C,ZZ_3C038_100);
ZZ_MARK_TARGET(0x8003C13C,0x8003C14C,ZZ_3C038_104);
ZZ_MARK_TARGET(0x8003C14C,0x8003C15C,ZZ_3C038_114);
ZZ_MARK_TARGET(0x8003C15C,0x8003C174,ZZ_3C038_124);
ZZ_MARK_TARGET(0x8003C174,0x8003C184,ZZ_3C038_13C);
ZZ_MARK_TARGET(0x8003C184,0x8003C188,ZZ_3C038_14C);
ZZ_MARK_TARGET(0x8003C188,0x8003C1A0,ZZ_3C038_150);
ZZ_MARK_TARGET(0x8003C1A0,0x8003C1A4,ZZ_3C038_168);
ZZ_MARK_TARGET(0x8003C1A4,0x8003C1B4,ZZ_3C038_16C);
ZZ_MARK_TARGET(0x8003C1B4,0x8003C1CC,ZZ_3C038_17C);
ZZ_MARK_TARGET(0x8003C1CC,0x8003C1DC,ZZ_3C038_194);
ZZ_MARK_TARGET(0x8003C1DC,0x8003C1E0,ZZ_3C038_1A4);
ZZ_MARK_TARGET(0x8003C1E0,0x8003C1FC,ZZ_3C038_1A8);
ZZ_MARK_TARGET(0x8003C1FC,0x8003C20C,ZZ_3C038_1C4);
ZZ_MARK_TARGET(0x8003C20C,0x8003C224,ZZ_3C038_1D4);
ZZ_MARK_TARGET(0x8003C224,0x8003C234,ZZ_3C038_1EC);
ZZ_MARK_TARGET(0x8003C234,0x8003C238,ZZ_3C038_1FC);
ZZ_MARK_TARGET(0x8003C238,0x8003C250,ZZ_3C038_200);
ZZ_MARK_TARGET(0x8003C250,0x8003C260,ZZ_3C038_218);
ZZ_MARK_TARGET(0x8003C260,0x8003C2D4,ZZ_3C038_228);
ZZ_MARK_TARGET(0x8003C2D4,0x8003C2F0,ZZ_3C038_29C);
ZZ_MARK_TARGET(0x8003C2F0,0x8003C300,ZZ_3C038_2B8);
ZZ_MARK_TARGET(0x8003C300,0x8003C310,ZZ_3C038_2C8);
ZZ_MARK_TARGET(0x8003C310,0x8003C318,ZZ_3C038_2D8);
ZZ_MARK_TARGET(0x8003C318,0x8003C320,ZZ_3C038_2E0);
ZZ_MARK_TARGET(0x8003C320,0x8003C328,ZZ_3C038_2E8);
ZZ_MARK_TARGET(0x8003C328,0x8003C330,ZZ_3C038_2F0);
ZZ_MARK_TARGET(0x8003C330,0x8003C334,ZZ_3C038_2F8);
ZZ_MARK_TARGET(0x8003C334,0x8003C358,ZZ_3C038_2FC);
