#ifdef ZZ_INCLUDE_CODE
ZZ_1AC9C:
	SP -= 104;
	EMU_Write32(SP + 80,S2); //+ 0x50
	S2 = A0;
	EMU_Write32(SP + 76,S1); //+ 0x4C
	S1 = A1;
	EMU_Write32(SP + 84,S3); //+ 0x54
	EMU_Write32(SP + 96,RA); //+ 0x60
	EMU_Write32(SP + 92,S5); //+ 0x5C
	EMU_Write32(SP + 88,S4); //+ 0x58
	EMU_Write32(SP + 72,S0); //+ 0x48
	S5 = EMU_ReadU32(S2 + 272); //+ 0x110
	if (!S2)
	{
		S3 = A2;
		ZZ_CLOCKCYCLES(13,0x8001B164);
		goto ZZ_1AC9C_4C8;
	}
	S3 = A2;
	if (!S5)
	{
		V0 = 0x7;
		ZZ_CLOCKCYCLES(15,0x8001B164);
		goto ZZ_1AC9C_4C8;
	}
	V0 = 0x7;
	V1 = EMU_ReadU32(S5);
	A0 = EMU_ReadU32(V1 + 8); //+ 0x8
	if (A0 == V0)
	{
		V0 = 0x11;
		ZZ_CLOCKCYCLES(21,0x8001AD00);
		goto ZZ_1AC9C_64;
	}
	V0 = 0x11;
	if (A0 == V0)
	{
		ZZ_CLOCKCYCLES(23,0x8001AD0C);
		goto ZZ_1AC9C_70;
	}
	ZZ_CLOCKCYCLES(25,0x8001AD18);
	goto ZZ_1AC9C_7C;
ZZ_1AC9C_64:
	T0 = EMU_ReadU32(V1 + 20); //+ 0x14
	A3 = 0x2;
	ZZ_CLOCKCYCLES(3,0x8001AD18);
	goto ZZ_1AC9C_7C;
ZZ_1AC9C_70:
	T0 = 0x80050000;
	T0 += 5992;
	A3 = R0;
	ZZ_CLOCKCYCLES(3,0x8001AD18);
ZZ_1AC9C_7C:
	if ((int32_t)S1 >= 0)
	{
		V0 = S1;
		ZZ_CLOCKCYCLES(2,0x8001AD24);
		goto ZZ_1AC9C_88;
	}
	V0 = S1;
	V0 = -V0;
	ZZ_CLOCKCYCLES(3,0x8001AD24);
ZZ_1AC9C_88:
	V1 = EMU_ReadU16(S5 + 10); //+ 0xA
	S0 = (int32_t)V0 >> 8;
	V0 = V1 - 1;
	if (S0 != V0)
	{
		S4 = S1 & 0xFF;
		ZZ_CLOCKCYCLES(5,0x8001AD48);
		goto ZZ_1AC9C_AC;
	}
	S4 = S1 & 0xFF;
	if (!S0)
	{
		V0 = S1 & 0xFF;
		ZZ_CLOCKCYCLES(7,0x8001AD48);
		goto ZZ_1AC9C_AC;
	}
	V0 = S1 & 0xFF;
	S4 = V0 + 256;
	S0 = V1 - 2;
	ZZ_CLOCKCYCLES(9,0x8001AD48);
ZZ_1AC9C_AC:
	V0 = S0 << 1;
	V0 += S0;
	V0 <<= 1;
	V0 += 20;
	A0 = S5 + V0;
	V0 = EMU_ReadS16(A0);
	V1 = EMU_ReadU32(T0);
	V0 <<= A3;
	V0 += V1;
	V0 <<= 8;
	EMU_Write32(S3,V0);
	V0 = EMU_ReadS16(A0 + 2); //+ 0x2
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	V0 <<= A3;
	V0 += V1;
	V0 <<= 8;
	EMU_Write32(S3 + 4,V0); //+ 0x4
	V0 = EMU_ReadS16(A0 + 4); //+ 0x4
	V1 = EMU_ReadU32(T0 + 8); //+ 0x8
	V0 <<= A3;
	V0 += V1;
	V0 <<= 8;
	EMU_Write32(S3 + 8,V0); //+ 0x8
	V1 = EMU_ReadU16(S5 + 10); //+ 0xA
	V0 = 0x1;
	if (V1 == V0)
	{
		A0 += 6;
		ZZ_CLOCKCYCLES(27,0x8001B3C8);
		goto ZZ_1AC9C_72C;
	}
	A0 += 6;
	V0 = EMU_ReadS16(A0);
	V1 = EMU_ReadU32(T0);
	V0 <<= A3;
	V0 += V1;
	A1 = V0 << 8;
	EMU_Write32(SP + 16,A1); //+ 0x10
	V1 = EMU_ReadS16(A0 + 2); //+ 0x2
	V0 = EMU_ReadU32(T0 + 4); //+ 0x4
	V1 <<= A3;
	V1 += V0;
	V1 <<= 8;
	EMU_Write32(SP + 20,V1); //+ 0x14
	V0 = EMU_ReadS16(A0 + 4); //+ 0x4
	A0 = EMU_ReadU32(T0 + 8); //+ 0x8
	V0 <<= A3;
	V0 += A0;
	A0 = V0 << 8;
	EMU_Write32(SP + 24,A0); //+ 0x18
	V0 = EMU_ReadU32(S3);
	V0 = A1 - V0;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(S3 + 4); //+ 0x4
	V1 = V1 - V0;
	EMU_Write32(SP + 36,V1); //+ 0x24
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = A0 - V0;
	EMU_Write32(SP + 40,V0); //+ 0x28
	V0 = EMU_ReadU32(S2 + 204); //+ 0xCC
	V0 &= 0x8000;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(62,0x8001B16C);
		goto ZZ_1AC9C_4D0;
	}
	V0 = EMU_ReadU32(S3);
	V0 = A1 - V0;
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V0,V0);
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V1 = LO;
	V0 = A0 - V0;
	A0 = (int32_t)V0 >> 8;
	EMU_SMultiply(A0,A0);
	A0 = LO;
	RA = 0x8001AE74; //ZZ_1AC9C_1D8
	A0 += V1;
	ZZ_CLOCKCYCLES(75,0x80042B9C);
	goto ZZ_42B9C;
ZZ_1AC9C_1D8:
	A2 = V0;
	if (!A2)
	{
		V0 = -14;
		ZZ_CLOCKCYCLES(3,0x8001B3C8);
		goto ZZ_1AC9C_72C;
	}
	V0 = -14;
	A1 = 0x80050000;
	A1 += 25724;
	EMU_ReadLeft(A1 + 3,&V0); //+ 0x3
	EMU_ReadRight(A1,&V0);
	EMU_WriteLeft(SP + 67,V0); //+ 0x43
	EMU_WriteRight(SP + 64,V0); //+ 0x40
	V1 = EMU_ReadU32(S2 + 128); //+ 0x80
	A0 = EMU_ReadU32(S3);
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V1 = V1 - A0;
	V1 = (int32_t)V1 >> 4;
	V0 = V0 - A0;
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V1,V0);
	V1 = EMU_ReadU32(S2 + 136); //+ 0x88
	A0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = V1 - A0;
	V1 = (int32_t)V1 >> 4;
	A1 = LO;
	V0 = V0 - A0;
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(V1,V0);
	V0 = LO;
	V0 += A1;
	EMU_SDivide(V0,A2);
	if (A2)
	{
		ZZ_CLOCKCYCLES(33,0x8001AEFC);
		goto ZZ_1AC9C_260;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(34,0x8001AEFC);
ZZ_1AC9C_260:
	AT = -1;
	if (A2 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8001AF14);
		goto ZZ_1AC9C_278;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8001AF14);
		goto ZZ_1AC9C_278;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8001AF14);
ZZ_1AC9C_278:
	A0 = LO;
	EMU_SDivide(A0,A2);
	if (A2)
	{
		ZZ_CLOCKCYCLES(6,0x8001AF30);
		goto ZZ_1AC9C_294;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(7,0x8001AF30);
ZZ_1AC9C_294:
	AT = -1;
	if (A2 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8001AF48);
		goto ZZ_1AC9C_2AC;
	}
	AT = 0x80000000;
	if (A0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8001AF48);
		goto ZZ_1AC9C_2AC;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8001AF48);
ZZ_1AC9C_2AC:
	S4 = LO;
	V0 = (int32_t)S4 < 256;
	if (V0)
	{
		V1 = (int32_t)S1 >> 8;
		ZZ_CLOCKCYCLES(5,0x8001AF8C);
		goto ZZ_1AC9C_2F0;
	}
	V1 = (int32_t)S1 >> 8;
	V0 = EMU_ReadU16(S5 + 10); //+ 0xA
	V0 -= 1;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (!V1)
	{
		A1 = S0 + 1;
		ZZ_CLOCKCYCLES(11,0x8001AF8C);
		goto ZZ_1AC9C_2F0;
	}
	A1 = S0 + 1;
	A0 = S2;
	A1 <<= 8;
	RA = 0x8001AF84; //ZZ_1AC9C_2E8
	A2 = S3;
	ZZ_CLOCKCYCLES(15,0x8001AC9C);
	goto ZZ_1AC9C;
ZZ_1AC9C_2E8:
	ZZ_CLOCKCYCLES(2,0x8001B3C8);
	goto ZZ_1AC9C_72C;
ZZ_1AC9C_2F0:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V1 = EMU_ReadU32(S3);
	A0 = (int32_t)A0 >> 4;
	V0 = V0 - V1;
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(A0,V0);
	V0 = LO;
	EMU_SDivide(V0,A2);
	if (A2)
	{
		ZZ_CLOCKCYCLES(12,0x8001AFC0);
		goto ZZ_1AC9C_324;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(13,0x8001AFC0);
ZZ_1AC9C_324:
	AT = -1;
	if (A2 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8001AFD8);
		goto ZZ_1AC9C_33C;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8001AFD8);
		goto ZZ_1AC9C_33C;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8001AFD8);
ZZ_1AC9C_33C:
	V0 = LO;
	A1 = V0 + V1;
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	EMU_Write32(SP + 48,A1); //+ 0x30
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = V0 - V1;
	V0 = (int32_t)V0 >> 4;
	EMU_SMultiply(A0,V0);
	V0 = LO;
	EMU_SDivide(V0,A2);
	if (A2)
	{
		ZZ_CLOCKCYCLES(16,0x8001B01C);
		goto ZZ_1AC9C_380;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(17,0x8001B01C);
ZZ_1AC9C_380:
	AT = -1;
	if (A2 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8001B034);
		goto ZZ_1AC9C_398;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8001B034);
		goto ZZ_1AC9C_398;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8001B034);
ZZ_1AC9C_398:
	V0 = LO;
	V0 += V1;
	EMU_Write32(SP + 56,V0); //+ 0x38
	V1 = EMU_ReadU32(S2 + 128); //+ 0x80
	A0 = A1 - V1;
	if ((int32_t)A0 >= 0)
	{
		ZZ_CLOCKCYCLES(9,0x8001B05C);
		goto ZZ_1AC9C_3C0;
	}
	A0 = V1 - A1;
	ZZ_CLOCKCYCLES(10,0x8001B05C);
ZZ_1AC9C_3C0:
	A1 = EMU_ReadU32(S2 + 136); //+ 0x88
	V1 = V0 - A1;
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(5,0x8001B074);
		goto ZZ_1AC9C_3D8;
	}
	V1 = A1 - V0;
	ZZ_CLOCKCYCLES(6,0x8001B074);
ZZ_1AC9C_3D8:
	V0 = (int32_t)V1 < (int32_t)A0;
	if (!V0)
	{
		V0 = V1 >> 31;
		ZZ_CLOCKCYCLES(3,0x8001B090);
		goto ZZ_1AC9C_3F4;
	}
	V0 = V1 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	V0 += A0;
	ZZ_CLOCKCYCLES(7,0x8001B0A0);
	goto ZZ_1AC9C_404;
ZZ_1AC9C_3F4:
	V0 = A0 >> 31;
	V0 += A0;
	V0 = (int32_t)V0 >> 1;
	V0 += V1;
	ZZ_CLOCKCYCLES(4,0x8001B0A0);
ZZ_1AC9C_404:
	EMU_Write32(S2 + 192,V0); //+ 0xC0
	V1 = EMU_ReadU32(S2 + 192); //+ 0xC0
	V0 = EMU_ReadU32(S2 + 340); //+ 0x154
	V0 = (int32_t)V0 < (int32_t)V1;
	if (V0)
	{
		EMU_Write32(S2 + 192,V1); //+ 0xC0
		ZZ_CLOCKCYCLES(7,0x8001B0D4);
		goto ZZ_1AC9C_438;
	}
	EMU_Write32(S2 + 192,V1); //+ 0xC0
	if ((int32_t)S4 >= 0)
	{
		V0 = (int32_t)S4 < 256;
		ZZ_CLOCKCYCLES(9,0x8001B0CC);
		goto ZZ_1AC9C_430;
	}
	V0 = (int32_t)S4 < 256;
	if (!S0)
	{
		ZZ_CLOCKCYCLES(11,0x8001B0D4);
		goto ZZ_1AC9C_438;
	}
	ZZ_CLOCKCYCLES(11,0x8001B0CC);
ZZ_1AC9C_430:
	if (V0)
	{
		ZZ_CLOCKCYCLES(2,0x8001B0E4);
		goto ZZ_1AC9C_448;
	}
	ZZ_CLOCKCYCLES(2,0x8001B0D4);
ZZ_1AC9C_438:
	V0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V0 |= 0x200;
	EMU_Write32(S2 + 200,V0); //+ 0xC8
	ZZ_CLOCKCYCLES(4,0x8001B0E4);
ZZ_1AC9C_448:
	T0 = EMU_ReadU32(SP + 24); //+ 0x18
	A2 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = EMU_ReadU32(S2 + 128); //+ 0x80
	V1 = T0 - A2;
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(V1,V0);
	A3 = EMU_ReadU32(SP + 16); //+ 0x10
	A0 = EMU_ReadU32(S3);
	V0 = EMU_ReadU32(S2 + 136); //+ 0x88
	V1 = LO;
	A1 = A3 - A0;
	V0 = (int32_t)V0 >> 8;
	EMU_SMultiply(A1,V0);
	A1 = LO;
	A0 = (int32_t)A0 >> 8;
	EMU_SMultiply(A0,T0);
	V0 = LO;
	A2 = (int32_t)A2 >> 8;
	EMU_SMultiply(A2,A3);
	V1 = V1 - A1;
	V1 = V1 - V0;
	V0 = LO;
	V1 += V0;
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(27,0x8001B16C);
		goto ZZ_1AC9C_4D0;
	}
	V0 = EMU_ReadU32(S2 + 192); //+ 0xC0
	V0 = -V0;
	EMU_Write32(S2 + 192,V0); //+ 0xC0
	ZZ_CLOCKCYCLES(32,0x8001B16C);
	goto ZZ_1AC9C_4D0;
ZZ_1AC9C_4C8:
	V0 = -14;
	ZZ_CLOCKCYCLES(2,0x8001B3C8);
	goto ZZ_1AC9C_72C;
ZZ_1AC9C_4D0:
	V0 = EMU_ReadU32(S2 + 276); //+ 0x114
	A1 = EMU_ReadU32(S2 + 200); //+ 0xC8
	if ((int32_t)V0 < 0)
	{
		V1 = (int32_t)S1 >> 8;
		ZZ_CLOCKCYCLES(4,0x8001B194);
		goto ZZ_1AC9C_4F8;
	}
	V1 = (int32_t)S1 >> 8;
	V0 = EMU_ReadU16(S5 + 10); //+ 0xA
	V0 -= 1;
	V1 = (int32_t)V1 < (int32_t)V0;
	if (V1)
	{
		V0 = -5;
		ZZ_CLOCKCYCLES(10,0x8001B19C);
		goto ZZ_1AC9C_500;
	}
	V0 = -5;
	ZZ_CLOCKCYCLES(10,0x8001B194);
ZZ_1AC9C_4F8:
	V0 = A1 | 0x4;
	ZZ_CLOCKCYCLES(2,0x8001B1A0);
	goto ZZ_1AC9C_504;
ZZ_1AC9C_500:
	V0 &= A1;
	ZZ_CLOCKCYCLES(1,0x8001B1A0);
ZZ_1AC9C_504:
	EMU_Write32(S2 + 200,V0); //+ 0xC8
	A0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V0 = A1 & 0x4;
	V1 = A0 & 0x4;
	if (V1 == V0)
	{
		V0 = A0 & 0x10;
		ZZ_CLOCKCYCLES(6,0x8001B1C0);
		goto ZZ_1AC9C_524;
	}
	V0 = A0 & 0x10;
	if (!V0)
	{
		V0 = A0 | 0x10;
		ZZ_CLOCKCYCLES(8,0x8001B1CC);
		goto ZZ_1AC9C_530;
	}
	V0 = A0 | 0x10;
	ZZ_CLOCKCYCLES(8,0x8001B1C0);
ZZ_1AC9C_524:
	V0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V1 = -17;
	V0 &= V1;
	ZZ_CLOCKCYCLES(3,0x8001B1CC);
ZZ_1AC9C_530:
	EMU_Write32(S2 + 200,V0); //+ 0xC8
	V1 = EMU_ReadU32(S2 + 204); //+ 0xCC
	V0 = V1 & 0x4;
	if (!V0)
	{
		V0 = V1 & 0x2;
		ZZ_CLOCKCYCLES(6,0x8001B2AC);
		goto ZZ_1AC9C_610;
	}
	V0 = V1 & 0x2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x8001B214);
		goto ZZ_1AC9C_578;
	}
	V0 = EMU_ReadU32(S2 + 200); //+ 0xC8
	V0 &= 0x4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(13,0x8001B214);
		goto ZZ_1AC9C_578;
	}
	A0 = EMU_ReadU32(SP + 32); //+ 0x20
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	A0 = -A0;
	A1 = -A1;
	ZZ_CLOCKCYCLES(18,0x8001B21C);
	goto ZZ_1AC9C_580;
ZZ_1AC9C_578:
	A0 = EMU_ReadU32(SP + 32); //+ 0x20
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	ZZ_CLOCKCYCLES(2,0x8001B21C);
ZZ_1AC9C_580:
	RA = 0x8001B224; //ZZ_1AC9C_588
	ZZ_CLOCKCYCLES(2,0x8004301C);
	goto ZZ_4301C;
ZZ_1AC9C_588:
	EMU_Write32(S2 + 180,V0); //+ 0xB4
	V0 = EMU_ReadU32(S2 + 204); //+ 0xCC
	V0 &= 0x800;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x8001B32C);
		goto ZZ_1AC9C_690;
	}
	A0 = EMU_ReadU32(SP + 32); //+ 0x20
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	if ((int32_t)A0 >= 0)
	{
		S1 = A0;
		ZZ_CLOCKCYCLES(10,0x8001B250);
		goto ZZ_1AC9C_5B4;
	}
	S1 = A0;
	S1 = -S1;
	ZZ_CLOCKCYCLES(11,0x8001B250);
ZZ_1AC9C_5B4:
	if ((int32_t)A1 >= 0)
	{
		S0 = A1;
		ZZ_CLOCKCYCLES(2,0x8001B25C);
		goto ZZ_1AC9C_5C0;
	}
	S0 = A1;
	S0 = -S0;
	ZZ_CLOCKCYCLES(3,0x8001B25C);
ZZ_1AC9C_5C0:
	RA = 0x8001B264; //ZZ_1AC9C_5C8
	ZZ_CLOCKCYCLES(2,0x8004301C);
	goto ZZ_4301C;
ZZ_1AC9C_5C8:
	EMU_Write32(S2 + 148,V0); //+ 0x94
	V0 = (int32_t)S0 < (int32_t)S1;
	if (!V0)
	{
		V0 = S0 >> 31;
		ZZ_CLOCKCYCLES(4,0x8001B284);
		goto ZZ_1AC9C_5E8;
	}
	V0 = S0 >> 31;
	V0 += S0;
	V0 = (int32_t)V0 >> 1;
	A1 = S1 + V0;
	ZZ_CLOCKCYCLES(8,0x8001B294);
	goto ZZ_1AC9C_5F8;
ZZ_1AC9C_5E8:
	V0 = S1 >> 31;
	V0 += S1;
	V0 = (int32_t)V0 >> 1;
	A1 = S0 + V0;
	ZZ_CLOCKCYCLES(4,0x8001B294);
ZZ_1AC9C_5F8:
	A0 = EMU_ReadU32(SP + 36); //+ 0x24
	RA = 0x8001B2A0; //ZZ_1AC9C_604
	ZZ_CLOCKCYCLES(3,0x8004301C);
	goto ZZ_4301C;
ZZ_1AC9C_604:
	V0 = -V0;
	EMU_Write32(S2 + 184,V0); //+ 0xB8
	ZZ_CLOCKCYCLES(3,0x8001B32C);
	goto ZZ_1AC9C_690;
ZZ_1AC9C_610:
	V0 = V1 & 0x800;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x8001B32C);
		goto ZZ_1AC9C_690;
	}
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = EMU_ReadU32(SP + 40); //+ 0x28
	if ((int32_t)V0 >= 0)
	{
		A1 = V0;
		ZZ_CLOCKCYCLES(7,0x8001B2CC);
		goto ZZ_1AC9C_630;
	}
	A1 = V0;
	A1 = -A1;
	ZZ_CLOCKCYCLES(8,0x8001B2CC);
ZZ_1AC9C_630:
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x8001B2D8);
		goto ZZ_1AC9C_63C;
	}
	V1 = -V1;
	ZZ_CLOCKCYCLES(3,0x8001B2D8);
ZZ_1AC9C_63C:
	V0 = (int32_t)V1 < (int32_t)A1;
	if (!V0)
	{
		V0 = V1 >> 31;
		ZZ_CLOCKCYCLES(3,0x8001B2F4);
		goto ZZ_1AC9C_658;
	}
	V0 = V1 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	A1 += V0;
	ZZ_CLOCKCYCLES(7,0x8001B304);
	goto ZZ_1AC9C_668;
ZZ_1AC9C_658:
	V0 = A1 >> 31;
	V0 += A1;
	V0 = (int32_t)V0 >> 1;
	A1 = V1 + V0;
	ZZ_CLOCKCYCLES(4,0x8001B304);
ZZ_1AC9C_668:
	A0 = EMU_ReadU32(SP + 36); //+ 0x24
	RA = 0x8001B310; //ZZ_1AC9C_674
	ZZ_CLOCKCYCLES(3,0x8004301C);
	goto ZZ_4301C;
ZZ_1AC9C_674:
	EMU_Write32(S2 + 184,V0); //+ 0xB8
	A0 = EMU_ReadU32(SP + 32); //+ 0x20
	A1 = EMU_ReadU32(SP + 40); //+ 0x28
	A0 = -A0;
	RA = 0x8001B328; //ZZ_1AC9C_68C
	A1 = -A1;
	ZZ_CLOCKCYCLES(6,0x8004301C);
	goto ZZ_4301C;
ZZ_1AC9C_68C:
	EMU_Write32(S2 + 148,V0); //+ 0x94
	ZZ_CLOCKCYCLES(1,0x8001B32C);
ZZ_1AC9C_690:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V1 = EMU_ReadU32(S3);
	V0 = V0 - V1;
	EMU_SMultiply(V0,S4);
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	A0 = LO;
	A0 = (int32_t)A0 >> 8;
	EMU_Write32(SP + 16,A0); //+ 0x10
	V1 = EMU_ReadU32(S3 + 4); //+ 0x4
	V0 = V0 - V1;
	EMU_SMultiply(V0,S4);
	V0 = LO;
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = EMU_ReadU32(S3 + 8); //+ 0x8
	V0 = V0 - V1;
	EMU_SMultiply(V0,S4);
	V0 = LO;
	V0 = (int32_t)V0 >> 8;
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(S3);
	V0 += A0;
	EMU_Write32(S3,V0);
	V0 = EMU_ReadU32(S3 + 4); //+ 0x4
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 += V1;
	EMU_Write32(S3 + 4,V0); //+ 0x4
	V0 = EMU_ReadU32(S3 + 8); //+ 0x8
	V1 = EMU_ReadU32(SP + 24); //+ 0x18
	V0 += V1;
	EMU_Write32(S3 + 8,V0); //+ 0x8
	V0 = EMU_ReadU16(S5 + 10); //+ 0xA
	ZZ_CLOCKCYCLES(39,0x8001B3C8);
ZZ_1AC9C_72C:
	RA = EMU_ReadU32(SP + 96); //+ 0x60
	S5 = EMU_ReadU32(SP + 92); //+ 0x5C
	S4 = EMU_ReadU32(SP + 88); //+ 0x58
	S3 = EMU_ReadU32(SP + 84); //+ 0x54
	S2 = EMU_ReadU32(SP + 80); //+ 0x50
	S1 = EMU_ReadU32(SP + 76); //+ 0x4C
	S0 = EMU_ReadU32(SP + 72); //+ 0x48
	SP += 104;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(10);
  //ZZ_JUMPREGISTER(0x800233E4,ZZ_201DC_3208);
	ZZ_JUMPREGISTER(0x8001F908,ZZ_1F30C_5FC);
	ZZ_JUMPREGISTER(0x8001C4AC,ZZ_1BCC8_7E4);
	ZZ_JUMPREGISTER(0x8001AF84,ZZ_1AC9C_2E8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001AC9C,0x8001AD00,ZZ_1AC9C);
ZZ_MARK_TARGET(0x8001AD00,0x8001AD0C,ZZ_1AC9C_64);
ZZ_MARK_TARGET(0x8001AD0C,0x8001AD18,ZZ_1AC9C_70);
ZZ_MARK_TARGET(0x8001AD18,0x8001AD24,ZZ_1AC9C_7C);
ZZ_MARK_TARGET(0x8001AD24,0x8001AD48,ZZ_1AC9C_88);
ZZ_MARK_TARGET(0x8001AD48,0x8001AE74,ZZ_1AC9C_AC);
ZZ_MARK_TARGET(0x8001AE74,0x8001AEFC,ZZ_1AC9C_1D8);
ZZ_MARK_TARGET(0x8001AEFC,0x8001AF14,ZZ_1AC9C_260);
ZZ_MARK_TARGET(0x8001AF14,0x8001AF30,ZZ_1AC9C_278);
ZZ_MARK_TARGET(0x8001AF30,0x8001AF48,ZZ_1AC9C_294);
ZZ_MARK_TARGET(0x8001AF48,0x8001AF84,ZZ_1AC9C_2AC);
ZZ_MARK_TARGET(0x8001AF84,0x8001AF8C,ZZ_1AC9C_2E8);
ZZ_MARK_TARGET(0x8001AF8C,0x8001AFC0,ZZ_1AC9C_2F0);
ZZ_MARK_TARGET(0x8001AFC0,0x8001AFD8,ZZ_1AC9C_324);
ZZ_MARK_TARGET(0x8001AFD8,0x8001B01C,ZZ_1AC9C_33C);
ZZ_MARK_TARGET(0x8001B01C,0x8001B034,ZZ_1AC9C_380);
ZZ_MARK_TARGET(0x8001B034,0x8001B05C,ZZ_1AC9C_398);
ZZ_MARK_TARGET(0x8001B05C,0x8001B074,ZZ_1AC9C_3C0);
ZZ_MARK_TARGET(0x8001B074,0x8001B090,ZZ_1AC9C_3D8);
ZZ_MARK_TARGET(0x8001B090,0x8001B0A0,ZZ_1AC9C_3F4);
ZZ_MARK_TARGET(0x8001B0A0,0x8001B0CC,ZZ_1AC9C_404);
ZZ_MARK_TARGET(0x8001B0CC,0x8001B0D4,ZZ_1AC9C_430);
ZZ_MARK_TARGET(0x8001B0D4,0x8001B0E4,ZZ_1AC9C_438);
ZZ_MARK_TARGET(0x8001B0E4,0x8001B164,ZZ_1AC9C_448);
ZZ_MARK_TARGET(0x8001B164,0x8001B16C,ZZ_1AC9C_4C8);
ZZ_MARK_TARGET(0x8001B16C,0x8001B194,ZZ_1AC9C_4D0);
ZZ_MARK_TARGET(0x8001B194,0x8001B19C,ZZ_1AC9C_4F8);
ZZ_MARK_TARGET(0x8001B19C,0x8001B1A0,ZZ_1AC9C_500);
ZZ_MARK_TARGET(0x8001B1A0,0x8001B1C0,ZZ_1AC9C_504);
ZZ_MARK_TARGET(0x8001B1C0,0x8001B1CC,ZZ_1AC9C_524);
ZZ_MARK_TARGET(0x8001B1CC,0x8001B214,ZZ_1AC9C_530);
ZZ_MARK_TARGET(0x8001B214,0x8001B21C,ZZ_1AC9C_578);
ZZ_MARK_TARGET(0x8001B21C,0x8001B224,ZZ_1AC9C_580);
ZZ_MARK_TARGET(0x8001B224,0x8001B250,ZZ_1AC9C_588);
ZZ_MARK_TARGET(0x8001B250,0x8001B25C,ZZ_1AC9C_5B4);
ZZ_MARK_TARGET(0x8001B25C,0x8001B264,ZZ_1AC9C_5C0);
ZZ_MARK_TARGET(0x8001B264,0x8001B284,ZZ_1AC9C_5C8);
ZZ_MARK_TARGET(0x8001B284,0x8001B294,ZZ_1AC9C_5E8);
ZZ_MARK_TARGET(0x8001B294,0x8001B2A0,ZZ_1AC9C_5F8);
ZZ_MARK_TARGET(0x8001B2A0,0x8001B2AC,ZZ_1AC9C_604);
ZZ_MARK_TARGET(0x8001B2AC,0x8001B2CC,ZZ_1AC9C_610);
ZZ_MARK_TARGET(0x8001B2CC,0x8001B2D8,ZZ_1AC9C_630);
ZZ_MARK_TARGET(0x8001B2D8,0x8001B2F4,ZZ_1AC9C_63C);
ZZ_MARK_TARGET(0x8001B2F4,0x8001B304,ZZ_1AC9C_658);
ZZ_MARK_TARGET(0x8001B304,0x8001B310,ZZ_1AC9C_668);
ZZ_MARK_TARGET(0x8001B310,0x8001B328,ZZ_1AC9C_674);
ZZ_MARK_TARGET(0x8001B328,0x8001B32C,ZZ_1AC9C_68C);
ZZ_MARK_TARGET(0x8001B32C,0x8001B3C8,ZZ_1AC9C_690);
ZZ_MARK_TARGET(0x8001B3C8,0x8001B3F0,ZZ_1AC9C_72C);
