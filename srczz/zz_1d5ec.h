#ifdef ZZ_INCLUDE_CODE
ZZ_1D5EC:
	SP -= 32;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31736); //+ 0xFFFF8408
	V1 = 0xF0F00000;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = EMU_ReadU32(V0 + 124); //+ 0x7C
	V1 |= 0xF0F1;
	EMU_UMultiply(V0,V1);
	S2 = A0;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31072); //+ 0x7960
	V1 = EMU_ReadU32(GP + 696); //+ 0x2B8
	A0 = 0x80060000;
	A0 += 3588;
	AT = 0x80060000;
	EMU_Write32(AT + 6280,R0); //+ 0x1888
	AT = 0x80060000;
	EMU_Write32(AT + 6600,V0); //+ 0x19C8
	V0 = HI;
	V0 >>= 5;
	if (!V1)
	{
		EMU_Write32(A0,V0);
		ZZ_CLOCKCYCLES(25,0x8001D67C);
		goto ZZ_1D5EC_90;
	}
	EMU_Write32(A0,V0);
	S1 = R0;
	S0 = A0 - 76;
	ZZ_CLOCKCYCLES(27,0x8001D658);
ZZ_1D5EC_6C:
	A0 = S0;
	A1 = 0x80020000;
	A1 -= 9716;
	RA = 0x8001D66C; //ZZ_1D5EC_80
	A2 = S2;
	ZZ_CLOCKCYCLES(5,0x8001B84C);
	goto ZZ_1B84C;
ZZ_1D5EC_80:
	S1 += 1;
	V0 = (int32_t)S1 < 8;
	if (V0)
	{
		S0 += 8;
		ZZ_CLOCKCYCLES(4,0x8001D658);
		goto ZZ_1D5EC_6C;
	}
	S0 += 8;
	ZZ_CLOCKCYCLES(4,0x8001D67C);
ZZ_1D5EC_90:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001D5EC,0x8001D658,ZZ_1D5EC);
ZZ_MARK_TARGET(0x8001D658,0x8001D66C,ZZ_1D5EC_6C);
ZZ_MARK_TARGET(0x8001D66C,0x8001D67C,ZZ_1D5EC_80);
ZZ_MARK_TARGET(0x8001D67C,0x8001D698,ZZ_1D5EC_90);
