#ifdef ZZ_INCLUDE_CODE
ZZ_3ECA4:
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = 0x80050000;
	S0 += 14644;
	EMU_Write32(SP + 20,RA); //+ 0x14
	V0 = EMU_ReadU16(S0);
	if (!V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(9,0x8003ED3C);
		goto ZZ_3ECA4_98;
	}
	V0 = R0;
	RA = 0x8003ECD0; //ZZ_3ECA4_2C
	ZZ_CLOCKCYCLES(11,0x8003E1F8);
	goto ZZ_3E1F8;
ZZ_3ECA4_2C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 18884); //+ 0x49C4
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 18888); //+ 0x49C8
	V1 = EMU_ReadU16(V0);
	AT = 0x80050000;
	EMU_Write16(AT + 14694,V1); //+ 0x3966
	V1 = EMU_ReadU32(A0);
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 18880); //+ 0x49C0
	AT = 0x80050000;
	EMU_Write32(AT + 14696,V1); //+ 0x3968
	EMU_Write16(V0,R0);
	V0 = EMU_ReadU16(V0);
	EMU_Write16(A0,V0);
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 18888); //+ 0x49C8
	V1 = 0x77770000;
	V0 = EMU_ReadU32(A0);
	V1 |= 0x7777;
	V0 &= V1;
	EMU_Write32(A0,V0);
	RA = 0x8003ED34; //ZZ_3ECA4_90
	ZZ_CLOCKCYCLES(25,0x8003EE34);
	goto ZZ_3EE34;
ZZ_3ECA4_90:
	V0 = S0;
	EMU_Write16(V0,R0);
	ZZ_CLOCKCYCLES(2,0x8003ED3C);
ZZ_3ECA4_98:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003ECA4,0x8003ECD0,ZZ_3ECA4);
ZZ_MARK_TARGET(0x8003ECD0,0x8003ED34,ZZ_3ECA4_2C);
ZZ_MARK_TARGET(0x8003ED34,0x8003ED3C,ZZ_3ECA4_90);
ZZ_MARK_TARGET(0x8003ED3C,0x8003ED50,ZZ_3ECA4_98);
