#ifdef ZZ_INCLUDE_CODE
ZZ_14514:
	V0 = A0 << 1;
	V0 += A0;
	V0 <<= 2;
	V0 = V0 - A0;
	A1 = V0 << 2;
	AT = 0x80060000;
	AT += A1;
	V1 = EMU_ReadS16(AT - 32604); //+ 0xFFFF80A4
	V0 = 0x14;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(11,0x80014554);
		goto ZZ_14514_40;
	}
	V0 = 0x15;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(14,0x8001459C);
		goto ZZ_14514_88;
	}
	ZZ_CLOCKCYCLES(16,0x800145C0);
	goto ZZ_14514_AC;
ZZ_14514_40:
	AT = 0x80060000;
	AT += A1;
	V1 = EMU_ReadU32(AT - 32576); //+ 0xFFFF80C0
	AT = 0x80060000;
	AT += A1;
	V0 = EMU_ReadU32(AT - 32588); //+ 0xFFFF80B4
	EMU_Write32(V1,V0);
	AT = 0x80060000;
	AT += A1;
	V0 = EMU_ReadU32(AT - 32588); //+ 0xFFFF80B4
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 - 12356); //+ 0xFFFFCFBC
	V0 = (int32_t)V0 >> 1;
	V0 <<= 2;
	V0 += V1;
	V1 = -18;
	EMU_Write32(V0,V1);
	ZZ_CLOCKCYCLES(18,0x8001459C);
ZZ_14514_88:
	V0 = A0 << 1;
	V0 += A0;
	V0 <<= 2;
	V0 = V0 - A0;
	V0 <<= 2;
	V1 = 0x1;
	AT = 0x80060000;
	AT += V0;
	EMU_Write16(AT - 32604,V1); //+ 0xFFFF80A4
	ZZ_CLOCKCYCLES(9,0x800145C0);
ZZ_14514_AC:
	ZZ_JUMPREGISTER_BEGIN(RA);
	V0 = -14;
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80033238,ZZ_32FDC_25C);
	ZZ_JUMPREGISTER(0x8003324C,ZZ_32FDC_270);
	ZZ_JUMPREGISTER(0x8003325C,ZZ_32FDC_280);
	ZZ_JUMPREGISTER(0x8003327C,ZZ_32FDC_2A0);
	ZZ_JUMPREGISTER(0x800332C4,ZZ_32FDC_2E8);
	ZZ_JUMPREGISTER(0x80033304,ZZ_32FDC_328);
	ZZ_JUMPREGISTER(0x80014420,ZZ_1439C_84);
	ZZ_JUMPREGISTER(0x80014430,ZZ_1439C_94);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80014514,0x80014554,ZZ_14514);
ZZ_MARK_TARGET(0x80014554,0x8001459C,ZZ_14514_40);
ZZ_MARK_TARGET(0x8001459C,0x800145C0,ZZ_14514_88);
ZZ_MARK_TARGET(0x800145C0,0x800145C8,ZZ_14514_AC);
