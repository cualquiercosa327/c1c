#ifdef ZZ_INCLUDE_CODE
ZZ_5115C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22868); //+ 0x5954
	SP -= 40;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A0;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = R0;
	EMU_Write32(SP + 24,S2); //+ 0x18
	S2 = -1;
	EMU_Write32(SP + 32,RA); //+ 0x20
	if (V0)
	{
		EMU_Write32(SP + 28,S3); //+ 0x1C
		ZZ_CLOCKCYCLES(12,0x80051194);
		goto ZZ_5115C_38;
	}
	EMU_Write32(SP + 28,S3); //+ 0x1C
	S3 = R0;
	ZZ_CLOCKCYCLES(14,0x800511B0);
	goto ZZ_5115C_54;
ZZ_5115C_38:
	V0 = 0x10000;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22872); //+ 0x5958
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22792); //+ 0x5908
	V0 = V0 - V1;
	S3 = V0 << A0;
	ZZ_CLOCKCYCLES(7,0x800511B0);
ZZ_5115C_54:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22800); //+ 0x5910
	V0 = ~V1;
	V0 &= S1;
	if (!V0)
	{
		A0 = S1;
		ZZ_CLOCKCYCLES(7,0x800511D0);
		goto ZZ_5115C_74;
	}
	A0 = S1;
	A0 = S1 + V1;
	ZZ_CLOCKCYCLES(8,0x800511D0);
ZZ_5115C_74:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22792); //+ 0x5908
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22852); //+ 0x5944
	S1 = (int32_t)A0 >> V0;
	S1 <<= V0;
	V0 = EMU_ReadU32(V1);
	V1 = 0x40000000;
	V0 &= V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80051204);
		goto ZZ_5115C_A8;
	}
	S2 = R0;
	ZZ_CLOCKCYCLES(13,0x80051288);
	goto ZZ_5115C_12C;
ZZ_5115C_A8:
	RA = 0x8005120C; //ZZ_5115C_B0
	ZZ_CLOCKCYCLES(2,0x80050964);
	goto ZZ_50964;
ZZ_5115C_B0:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22844); //+ 0x593C
	V0 = (int32_t)S0 < (int32_t)V1;
	if (!V0)
	{
		V0 = S0 << 3;
		ZZ_CLOCKCYCLES(6,0x80051288);
		goto ZZ_5115C_12C;
	}
	V0 = S0 << 3;
	A3 = 0x40000000;
	A2 = 0x80000000;
	A1 = V1;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22852); //+ 0x5944
	A0 = V0 + V1;
	ZZ_CLOCKCYCLES(13,0x80051240);
ZZ_5115C_E4:
	V1 = EMU_ReadU32(A0);
	V0 = V1 & A3;
	if (V0)
	{
		V0 = V1 & A2;
		ZZ_CLOCKCYCLES(5,0x80051270);
		goto ZZ_5115C_114;
	}
	V0 = V1 & A2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x80051278);
		goto ZZ_5115C_11C;
	}
	V0 = EMU_ReadU32(A0 + 4); //+ 0x4
	V0 = V0 < S1;
	if (V0)
	{
		ZZ_CLOCKCYCLES(12,0x80051278);
		goto ZZ_5115C_11C;
	}
	ZZ_CLOCKCYCLES(12,0x80051270);
ZZ_5115C_114:
	S2 = S0;
	ZZ_CLOCKCYCLES(2,0x80051288);
	goto ZZ_5115C_12C;
ZZ_5115C_11C:
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)A1;
	if (V0)
	{
		A0 += 8;
		ZZ_CLOCKCYCLES(4,0x80051240);
		goto ZZ_5115C_E4;
	}
	A0 += 8;
	ZZ_CLOCKCYCLES(4,0x80051288);
ZZ_5115C_12C:
	V0 = -1;
	if (S2 == V0)
	{
		S0 = S2 << 3;
		ZZ_CLOCKCYCLES(3,0x80051404);
		goto ZZ_5115C_2A8;
	}
	S0 = S2 << 3;
	A3 = 0x80050000;
	A3 = EMU_ReadU32(A3 + 22852); //+ 0x5944
	A2 = S0 + A3;
	V1 = EMU_ReadU32(A2);
	T0 = 0x40000000;
	V0 = V1 & T0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(12,0x80051358);
		goto ZZ_5115C_1FC;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22844); //+ 0x593C
	V0 = (int32_t)S2 < (int32_t)V0;
	if (!V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(18,0x80051404);
		goto ZZ_5115C_2A8;
	}
	V0 = -1;
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 = V0 - S3;
	V0 = V0 < S1;
	if (V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(24,0x80051404);
		goto ZZ_5115C_2A8;
	}
	V0 = -1;
	A1 = 0xFFF0000;
	A1 |= 0xFFFF;
	A0 = S2 + 1;
	V1 = A0 << 3;
	V0 = EMU_ReadU32(A2);
	V1 += A3;
	V0 &= A1;
	V0 += S1;
	V0 |= T0;
	EMU_Write32(V1,V0);
	V0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 = V0 - S1;
	EMU_Write32(V1 + 4,V0); //+ 0x4
	V0 = EMU_ReadU32(A2);
	AT = 0x80050000;
	EMU_Write32(AT + 22848,A0); //+ 0x5940
	EMU_Write32(A2 + 4,S1); //+ 0x4
	V0 &= A1;
	RA = 0x8005133C; //ZZ_5115C_1E0
	EMU_Write32(A2,V0);
	ZZ_CLOCKCYCLES(45,0x80050964);
	goto ZZ_50964;
ZZ_5115C_1E0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22852); //+ 0x5944
	V0 += S0;
	V0 = EMU_ReadU32(V0);
	ZZ_CLOCKCYCLES(7,0x80051404);
	goto ZZ_5115C_2A8;
ZZ_5115C_1FC:
	T0 = EMU_ReadU32(A2 + 4); //+ 0x4
	V0 = S1 < T0;
	if (!V0)
	{
		S0 = S2 << 3;
		ZZ_CLOCKCYCLES(5,0x800513C4);
		goto ZZ_5115C_268;
	}
	S0 = S2 << 3;
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 22848); //+ 0x5940
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22844); //+ 0x593C
	V0 = (int32_t)A2 < (int32_t)V0;
	if (!V0)
	{
		V1 += S1;
		ZZ_CLOCKCYCLES(13,0x800513C4);
		goto ZZ_5115C_268;
	}
	V1 += S1;
	V0 = A2 << 3;
	V0 += A3;
	A0 = 0x80000000;
	V1 |= A0;
	A1 = EMU_ReadU32(V0);
	A0 = EMU_ReadU32(V0 + 4); //+ 0x4
	EMU_Write32(V0,V1);
	V1 = T0 - S1;
	EMU_Write32(V0 + 4,V1); //+ 0x4
	V1 = A2 + 1;
	AT = 0x80050000;
	EMU_Write32(AT + 22848,V1); //+ 0x5940
	EMU_Write32(V0 + 8,A1); //+ 0x8
	EMU_Write32(V0 + 12,A0); //+ 0xC
	ZZ_CLOCKCYCLES(27,0x800513C4);
ZZ_5115C_268:
	A0 = 0xFFF0000;
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22852); //+ 0x5944
	V1 += S0;
	V0 = EMU_ReadU32(V1);
	A0 |= 0xFFFF;
	EMU_Write32(V1 + 4,S1); //+ 0x4
	V0 &= A0;
	RA = 0x800513F0; //ZZ_5115C_294
	EMU_Write32(V1,V0);
	ZZ_CLOCKCYCLES(11,0x80050964);
	goto ZZ_50964;
ZZ_5115C_294:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22852); //+ 0x5944
	S0 += V0;
	V0 = EMU_ReadU32(S0);
	ZZ_CLOCKCYCLES(5,0x80051404);
ZZ_5115C_2A8:
	RA = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8005100C,ZZ_50D60_2AC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8005115C,0x80051194,ZZ_5115C);
ZZ_MARK_TARGET(0x80051194,0x800511B0,ZZ_5115C_38);
ZZ_MARK_TARGET(0x800511B0,0x800511D0,ZZ_5115C_54);
ZZ_MARK_TARGET(0x800511D0,0x80051204,ZZ_5115C_74);
ZZ_MARK_TARGET(0x80051204,0x8005120C,ZZ_5115C_A8);
ZZ_MARK_TARGET(0x8005120C,0x80051240,ZZ_5115C_B0);
ZZ_MARK_TARGET(0x80051240,0x80051270,ZZ_5115C_E4);
ZZ_MARK_TARGET(0x80051270,0x80051278,ZZ_5115C_114);
ZZ_MARK_TARGET(0x80051278,0x80051288,ZZ_5115C_11C);
ZZ_MARK_TARGET(0x80051288,0x8005133C,ZZ_5115C_12C);
ZZ_MARK_TARGET(0x8005133C,0x80051358,ZZ_5115C_1E0);
ZZ_MARK_TARGET(0x80051358,0x800513C4,ZZ_5115C_1FC);
ZZ_MARK_TARGET(0x800513C4,0x800513F0,ZZ_5115C_268);
ZZ_MARK_TARGET(0x800513F0,0x80051404,ZZ_5115C_294);
ZZ_MARK_TARGET(0x80051404,0x80051424,ZZ_5115C_2A8);
