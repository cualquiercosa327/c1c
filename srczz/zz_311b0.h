#ifdef ZZ_INCLUDE_CODE
ZZ_311B0:
	SP -= 32;
	EMU_Write16(GP + 588,A0); //+ 0x24C
	A0 <<= 16;
	V1 = EMU_ReadS16(GP + 608); //+ 0x260
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = (int32_t)V1 < 2;
	S0 = V0 ^ 0x1;
	V1 = (int32_t)S0 < (int32_t)V1;
	if (!V1)
	{
		A2 = (int32_t)A0 >> 23;
		ZZ_CLOCKCYCLES(13,0x80031228);
		goto ZZ_311B0_78;
	}
	A2 = (int32_t)A0 >> 23;
	S2 = A2;
	V0 = S0 << 2;
	V0 += S0;
	S1 = V0 << 2;
	ZZ_CLOCKCYCLES(17,0x800311F4);
ZZ_311B0_44:
	AT = 0x80050000;
	AT += S1;
	A1 = EMU_ReadS16(AT + 28348); //+ 0x6EBC
	S1 += 20;
	A2 = S2;
	A0 = EMU_ReadS16(GP + 600); //+ 0x258
	RA = 0x80031214; //ZZ_311B0_64
	A3 = S2;
	ZZ_CLOCKCYCLES(8,0x8004CD58);
	goto ZZ_4CD58;
ZZ_311B0_64:
	V0 = EMU_ReadS16(GP + 608); //+ 0x260
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x800311F4);
		goto ZZ_311B0_44;
	}
	ZZ_CLOCKCYCLES(5,0x80031228);
ZZ_311B0_78:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x80030D2C,ZZ_30CC0_6C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800311B0,0x800311F4,ZZ_311B0);
ZZ_MARK_TARGET(0x800311F4,0x80031214,ZZ_311B0_44);
ZZ_MARK_TARGET(0x80031214,0x80031228,ZZ_311B0_64);
ZZ_MARK_TARGET(0x80031228,0x80031244,ZZ_311B0_78);
