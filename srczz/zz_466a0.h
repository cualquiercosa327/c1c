#ifdef ZZ_INCLUDE_CODE
ZZ_466A0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22832); //+ 0x5930
	SP -= 32;
	if (V0)
	{
		EMU_Write32(SP + 24,RA); //+ 0x18
		ZZ_CLOCKCYCLES(5,0x8004679C);
		goto ZZ_466A0_FC;
	}
	EMU_Write32(SP + 24,RA); //+ 0x18
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800466F0);
	goto ZZ_466A0_50;
ZZ_466A0_28:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800466F0);
ZZ_466A0_50:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x800466C8);
		goto ZZ_466A0_28;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x8004673C);
	goto ZZ_466A0_9C;
ZZ_466A0_74:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x8004673C);
ZZ_466A0_9C:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		V0 = 0xD;
		ZZ_CLOCKCYCLES(5,0x80046714);
		goto ZZ_466A0_74;
	}
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x80046788);
	goto ZZ_466A0_E8;
ZZ_466A0_C0:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046788);
ZZ_466A0_E8:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80046760);
		goto ZZ_466A0_C0;
	}
	ZZ_CLOCKCYCLES(5,0x8004679C);
ZZ_466A0_FC:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(A0 + 426); //+ 0x1AA
	V0 &= 0xFFCF;
	EMU_Write16(A0 + 426,V0); //+ 0x1AA
	V0 = EMU_ReadU16(A0 + 426); //+ 0x1AA
	V0 &= 0x30;
	if (!V0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(12,0x800467F4);
		goto ZZ_466A0_154;
	}
	V1 = R0;
	V1 += 1;
	ZZ_CLOCKCYCLES(13,0x800467D0);
ZZ_466A0_130:
	V0 = (int32_t)V1 < 3841;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x800467F4);
		goto ZZ_466A0_154;
	}
	V0 = EMU_ReadU16(A0 + 426); //+ 0x1AA
	V0 &= 0x30;
	if (V0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(8,0x800467D0);
		goto ZZ_466A0_130;
	}
	V1 += 1;
	V1 -= 1;
	ZZ_CLOCKCYCLES(9,0x800467F4);
ZZ_466A0_154:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22808); //+ 0x5918
	if (!V0)
	{
		A0 = 0xF0000000;
		ZZ_CLOCKCYCLES(5,0x80046824);
		goto ZZ_466A0_184;
	}
	A0 = 0xF0000000;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22808); //+ 0x5918
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004681C; //ZZ_466A0_17C
	ZZ_CLOCKCYCLES_JR(10);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,80046814)
	ZZ_JUMPREGISTER_END();
ZZ_466A0_17C:
	ZZ_CLOCKCYCLES(2,0x80046830);
	goto ZZ_466A0_190;
ZZ_466A0_184:
	A0 |= 0x9;
	RA = 0x80046830; //ZZ_466A0_190
	A1 = 0x20;
	ZZ_CLOCKCYCLES(3,0x80043354);
	goto ZZ_43354;
ZZ_466A0_190:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800466A0,0x800466C8,ZZ_466A0);
ZZ_MARK_TARGET(0x800466C8,0x800466F0,ZZ_466A0_28);
ZZ_MARK_TARGET(0x800466F0,0x80046714,ZZ_466A0_50);
ZZ_MARK_TARGET(0x80046714,0x8004673C,ZZ_466A0_74);
ZZ_MARK_TARGET(0x8004673C,0x80046760,ZZ_466A0_9C);
ZZ_MARK_TARGET(0x80046760,0x80046788,ZZ_466A0_C0);
ZZ_MARK_TARGET(0x80046788,0x8004679C,ZZ_466A0_E8);
ZZ_MARK_TARGET(0x8004679C,0x800467D0,ZZ_466A0_FC);
ZZ_MARK_TARGET(0x800467D0,0x800467F4,ZZ_466A0_130);
ZZ_MARK_TARGET(0x800467F4,0x8004681C,ZZ_466A0_154);
ZZ_MARK_TARGET(0x8004681C,0x80046824,ZZ_466A0_17C);
ZZ_MARK_TARGET(0x80046824,0x80046830,ZZ_466A0_184);
ZZ_MARK_TARGET(0x80046830,0x80046840,ZZ_466A0_190);
