#ifdef ZZ_INCLUDE_CODE
ZZ_2F6B0:
	A1 = A0;
	if (!A1)
	{
		V1 = 0x41C60000;
		ZZ_CLOCKCYCLES(3,0x8002F750);
		goto ZZ_2F6B0_A0;
	}
	V1 = 0x41C60000;
	V0 = EMU_ReadU32(GP + 220); //+ 0xDC
	V1 |= 0x4E6D;
	EMU_SMultiply(V0,V1);
	V0 = 0x88880000;
	V1 = LO;
	V0 |= 0x8889;
	V1 += 12345;
	EMU_UMultiply(V1,V0);
	A0 = HI;
	V0 = 0x21;
	A0 >>= 3;
	EMU_UMultiply(A0,V0);
	EMU_Write32(GP + 220,V1); //+ 0xDC
	V1 = HI;
	V0 = A0 - V1;
	V0 >>= 1;
	V1 += V0;
	V1 >>= 26;
	V0 = V1 << 27;
	V0 = V0 - V1;
	V1 = A0 - V0;
	if ((int32_t)V1 >= 0)
	{
		ZZ_CLOCKCYCLES(26,0x8002F71C);
		goto ZZ_2F6B0_6C;
	}
	V1 = -V1;
	ZZ_CLOCKCYCLES(27,0x8002F71C);
ZZ_2F6B0_6C:
	EMU_SDivide(V1,A1);
	if (A1)
	{
		ZZ_CLOCKCYCLES(3,0x8002F72C);
		goto ZZ_2F6B0_7C;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(4,0x8002F72C);
ZZ_2F6B0_7C:
	AT = -1;
	if (A1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002F744);
		goto ZZ_2F6B0_94;
	}
	AT = 0x80000000;
	if (V1 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002F744);
		goto ZZ_2F6B0_94;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002F744);
ZZ_2F6B0_94:
	V0 = HI;
	ZZ_CLOCKCYCLES(3,0x8002F754);
	goto ZZ_2F6B0_A4;
ZZ_2F6B0_A0:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8002F754);
ZZ_2F6B0_A4:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	//ZZ_JUMPREGISTER(0x8002105C,ZZ_201DC_E80);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002F6B0,0x8002F71C,ZZ_2F6B0);
ZZ_MARK_TARGET(0x8002F71C,0x8002F72C,ZZ_2F6B0_6C);
ZZ_MARK_TARGET(0x8002F72C,0x8002F744,ZZ_2F6B0_7C);
ZZ_MARK_TARGET(0x8002F744,0x8002F750,ZZ_2F6B0_94);
ZZ_MARK_TARGET(0x8002F750,0x8002F754,ZZ_2F6B0_A0);
ZZ_MARK_TARGET(0x8002F754,0x8002F75C,ZZ_2F6B0_A4);
