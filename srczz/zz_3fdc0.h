#ifdef ZZ_INCLUDE_CODE
ZZ_3FDC0:
	SP -= 32;
	A1 = A0;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A1 & 0x7;
	EMU_Write32(SP + 24,RA); //+ 0x18
	if (!S1)
	{
		EMU_Write32(SP + 16,S0); //+ 0x10
		ZZ_CLOCKCYCLES(7,0x8003FDE8);
		goto ZZ_3FDC0_28;
	}
	EMU_Write32(SP + 16,S0); //+ 0x10
	V0 = 0x3;
	if (S1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x8003FEB4);
		goto ZZ_3FDC0_F4;
	}
	ZZ_CLOCKCYCLES(10,0x8003FDE8);
ZZ_3FDC0_28:
	A0 = 0x80010000;
	A0 += 4508;
	A1 = 0x80050000;
	A1 += 18980;
	S0 = 0x80050000;
	S0 += 19052;
	RA = 0x8003FE08; //ZZ_3FDC0_48
	A2 = S0;
	ZZ_CLOCKCYCLES(8,0x8003D730);
	goto ZZ_3D730;
ZZ_3FDC0_48:
	A0 = S0;
	A1 = R0;
	RA = 0x8003FE18; //ZZ_3FDC0_58
	A2 = 0x80;
	ZZ_CLOCKCYCLES(4,0x80042AE0);
	goto ZZ_42AE0;
ZZ_3FDC0_58:
	RA = 0x8003FE20; //ZZ_3FDC0_60
	ZZ_CLOCKCYCLES(2,0x8003E6F4);
	goto ZZ_3E6F4;
ZZ_3FDC0_60:
	V0 = 0xFF0000;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 19044); //+ 0x4A64
	V0 |= 0xFFFF;
	RA = 0x8003FE38; //ZZ_3FDC0_78
	A0 &= V0;
	ZZ_CLOCKCYCLES(6,0x80042B0C);
	goto ZZ_42B0C;
ZZ_3FDC0_78:
	RA = 0x8003FE40; //ZZ_3FDC0_80
	A0 = R0 < S1;
	ZZ_CLOCKCYCLES(2,0x800425E0);
	goto ZZ_425E0;
ZZ_3FDC0_80:
	A0 = S0 + 16;
	EMU_Write8(S0,V0);
	V0 = EMU_ReadU8(S0);
	V1 = 0x1;
	AT = 0x80050000;
	EMU_Write8(AT + 19053,V1); //+ 0x4A6D
	V0 <<= 2;
	AT = 0x80050000;
	AT += V0;
	V1 = EMU_ReadU16(AT + 19180); //+ 0x4AEC
	V0 = EMU_ReadU8(S0);
	A1 = -1;
	V0 <<= 2;
	AT = 0x80050000;
	EMU_Write16(AT + 19056,V1); //+ 0x4A70
	AT = 0x80050000;
	AT += V0;
	V0 = EMU_ReadU16(AT + 19200); //+ 0x4B00
	AT = 0x80050000;
	EMU_Write16(AT + 19058,V0); //+ 0x4A72
	RA = 0x8003FE98; //ZZ_3FDC0_D8
	A2 = 0x5C;
	ZZ_CLOCKCYCLES(22,0x80042AE0);
	goto ZZ_42AE0;
ZZ_3FDC0_D8:
	A0 = S0 + 108;
	A1 = -1;
	RA = 0x8003FEA8; //ZZ_3FDC0_E8
	A2 = 0x14;
	ZZ_CLOCKCYCLES(4,0x80042AE0);
	goto ZZ_42AE0;
ZZ_3FDC0_E8:
	V0 = EMU_ReadU8(S0);
	ZZ_CLOCKCYCLES(3,0x8003FF00);
	goto ZZ_3FDC0_140;
ZZ_3FDC0_F4:
	V0 = 0x80050000;
	V0 = EMU_ReadU8(V0 + 19054); //+ 0x4A6E
	V0 = V0 < 2;
	if (V0)
	{
		ZZ_CLOCKCYCLES(6,0x8003FEE4);
		goto ZZ_3FDC0_124;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19048); //+ 0x4A68
	A0 = 0x80010000;
	A0 += 4540;
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8003FEE4; //ZZ_3FDC0_124
	ZZ_CLOCKCYCLES_JR(12);
	ZZ_JUMPREGISTER(0x8003D730,ZZ_3D730);
	ZZ_JUMPREGISTER_END();
ZZ_3FDC0_124:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19044); //+ 0x4A64
	V0 = EMU_ReadU32(V0 + 52); //+ 0x34
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8003FF00; //ZZ_3FDC0_140
	A0 = 0x1;
	ZZ_CLOCKCYCLES_JR(7);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8003FEF8)
	ZZ_JUMPREGISTER_END();
ZZ_3FDC0_140:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x800166D0,ZZ_1668C_44);
	ZZ_JUMPREGISTER(0x80016A9C,ZZ_16A6C_30);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003FDC0,0x8003FDE8,ZZ_3FDC0);
ZZ_MARK_TARGET(0x8003FDE8,0x8003FE08,ZZ_3FDC0_28);
ZZ_MARK_TARGET(0x8003FE08,0x8003FE18,ZZ_3FDC0_48);
ZZ_MARK_TARGET(0x8003FE18,0x8003FE20,ZZ_3FDC0_58);
ZZ_MARK_TARGET(0x8003FE20,0x8003FE38,ZZ_3FDC0_60);
ZZ_MARK_TARGET(0x8003FE38,0x8003FE40,ZZ_3FDC0_78);
ZZ_MARK_TARGET(0x8003FE40,0x8003FE98,ZZ_3FDC0_80);
ZZ_MARK_TARGET(0x8003FE98,0x8003FEA8,ZZ_3FDC0_D8);
ZZ_MARK_TARGET(0x8003FEA8,0x8003FEB4,ZZ_3FDC0_E8);
ZZ_MARK_TARGET(0x8003FEB4,0x8003FEE4,ZZ_3FDC0_F4);
ZZ_MARK_TARGET(0x8003FEE4,0x8003FF00,ZZ_3FDC0_124);
ZZ_MARK_TARGET(0x8003FF00,0x8003FF18,ZZ_3FDC0_140);
