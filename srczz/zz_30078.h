#ifdef ZZ_INCLUDE_CODE
ZZ_30078:
	SP -= 40;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	EMU_Write32(SP + 28,S3); //+ 0x1C
	S3 = A1;
	EMU_Write32(SP + 36,RA); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	A1 = EMU_ReadU32(S0);
	if ((int32_t)A1 >= 0)
	{
		V1 = 0xFFFB0000;
		ZZ_CLOCKCYCLES(13,0x800300B0);
		goto ZZ_30078_38;
	}
	V1 = 0xFFFB0000;
	A1 += 31;
	ZZ_CLOCKCYCLES(14,0x800300B0);
ZZ_30078_38:
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	V1 |= 0x5000;
	A0 = V0 + V1;
	if ((int32_t)A0 >= 0)
	{
		S4 = (int32_t)A1 >> 5;
		ZZ_CLOCKCYCLES(5,0x800300C8);
		goto ZZ_30078_50;
	}
	S4 = (int32_t)A1 >> 5;
	A0 += 31;
	ZZ_CLOCKCYCLES(6,0x800300C8);
ZZ_30078_50:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x22;
	if (V1 == V0)
	{
		S2 = (int32_t)A0 >> 5;
		ZZ_CLOCKCYCLES(7,0x800300F0);
		goto ZZ_30078_78;
	}
	S2 = (int32_t)A0 >> 5;
	V0 = 0x2E;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x80030130);
		goto ZZ_30078_B8;
	}
	ZZ_CLOCKCYCLES(10,0x800300F0);
ZZ_30078_78:
	S0 = EMU_ReadU32(S0 + 4); //+ 0x4
	if ((int32_t)S0 >= 0)
	{
		A0 = S4;
		ZZ_CLOCKCYCLES(4,0x80030104);
		goto ZZ_30078_8C;
	}
	A0 = S4;
	S0 += 31;
	ZZ_CLOCKCYCLES(5,0x80030104);
ZZ_30078_8C:
	A1 = S2;
	S0 = (int32_t)S0 >> 5;
	RA = 0x80030114; //ZZ_30078_9C
	A2 = S0;
	ZZ_CLOCKCYCLES(4,0x80034580);
	goto ZZ_34580;
ZZ_30078_9C:
	S1 = V0;
	A0 = S4;
	A1 = S2;
	RA = 0x80030128; //ZZ_30078_B0
	A2 = S0;
	ZZ_CLOCKCYCLES(5,0x80034524);
	goto ZZ_34524;
ZZ_30078_B0:
	V0 = 0x7FFF;
	ZZ_CLOCKCYCLES(2,0x80030144);
	goto ZZ_30078_CC;
ZZ_30078_B8:
	A0 = S4;
	RA = 0x8003013C; //ZZ_30078_C4
	A1 = S2;
	ZZ_CLOCKCYCLES(3,0x80034524);
	goto ZZ_34524;
ZZ_30078_C4:
	S1 = V0;
	V0 = 0x7FFF;
	ZZ_CLOCKCYCLES(2,0x80030144);
ZZ_30078_CC:
	V0 = (int32_t)V0 < (int32_t)S1;
	if (V0)
	{
		A0 = S2;
		ZZ_CLOCKCYCLES(3,0x80030160);
		goto ZZ_30078_E8;
	}
	A0 = S2;
	EMU_Write16(GP + 580,S3); //+ 0x244
	EMU_Write16(GP + 582,S3); //+ 0x246
	ZZ_CLOCKCYCLES(7,0x80030234);
	goto ZZ_30078_1BC;
ZZ_30078_E8:
	RA = 0x80030168; //ZZ_30078_F0
	A1 = S4;
	ZZ_CLOCKCYCLES(2,0x8004301C);
	goto ZZ_4301C;
ZZ_30078_F0:
	RA = 0x80030170; //ZZ_30078_F8
	A0 = V0;
	ZZ_CLOCKCYCLES(2,0x800390D0);
	goto ZZ_390D0;
ZZ_30078_F8:
	A1 = V0 + 4096;
	V0 = S3 << 15;
	V1 = 0x80060000;
	V1 = EMU_ReadU32(V1 + 6416); //+ 0x1910
	EMU_SDivide(V0,S1);
	if (S1)
	{
		ZZ_CLOCKCYCLES(7,0x80030190);
		goto ZZ_30078_118;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(8,0x80030190);
ZZ_30078_118:
	AT = -1;
	if (S1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x800301A8);
		goto ZZ_30078_130;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x800301A8);
		goto ZZ_30078_130;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x800301A8);
ZZ_30078_130:
	A0 = LO;
	if (V1)
	{
		V1 = A0;
		ZZ_CLOCKCYCLES(3,0x800301E4);
		goto ZZ_30078_16C;
	}
	V1 = A0;
	V0 = 0x2000;
	V0 = V0 - A1;
	EMU_SMultiply(A0,V0);
	V0 = LO;
	EMU_SMultiply(A0,A1);
	V0 += A0;
	V1 = (int32_t)V0 >> 11;
	V0 = LO;
	V0 += A0;
	A0 = (int32_t)V0 >> 11;
	ZZ_CLOCKCYCLES(15,0x800301E4);
ZZ_30078_16C:
	V0 = (int32_t)V1 < (int32_t)S3;
	if (V0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(3,0x800301FC);
		goto ZZ_30078_184;
	}
	V0 = V1;
	EMU_Write16(GP + 580,S3); //+ 0x244
	V0 = (int32_t)A0 < (int32_t)S3;
	ZZ_CLOCKCYCLES(6,0x80030210);
	goto ZZ_30078_198;
ZZ_30078_184:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x80030208);
		goto ZZ_30078_190;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(3,0x80030208);
ZZ_30078_190:
	EMU_Write16(GP + 580,V0); //+ 0x244
	V0 = (int32_t)A0 < (int32_t)S3;
	ZZ_CLOCKCYCLES(2,0x80030210);
ZZ_30078_198:
	if (V0)
	{
		V0 = A0;
		ZZ_CLOCKCYCLES(2,0x80030224);
		goto ZZ_30078_1AC;
	}
	V0 = A0;
	EMU_Write16(GP + 582,S3); //+ 0x246
	ZZ_CLOCKCYCLES(5,0x80030234);
	goto ZZ_30078_1BC;
ZZ_30078_1AC:
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(2,0x80030230);
		goto ZZ_30078_1B8;
	}
	V0 = R0;
	ZZ_CLOCKCYCLES(3,0x80030230);
ZZ_30078_1B8:
	EMU_Write16(GP + 582,V0); //+ 0x246
	ZZ_CLOCKCYCLES(1,0x80030234);
ZZ_30078_1BC:
	V0 = 0x80050000;
	V0 += 26176;
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(11);
	ZZ_JUMPREGISTER(0x80030B60,ZZ_30840_320);
	ZZ_JUMPREGISTER(0x8003076C,ZZ_304C8_2A4);
	ZZ_JUMPREGISTER(0x80031010,ZZ_30CC0_350);
	ZZ_JUMPREGISTER(0x8003110C,ZZ_30CC0_44C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80030078,0x800300B0,ZZ_30078);
ZZ_MARK_TARGET(0x800300B0,0x800300C8,ZZ_30078_38);
ZZ_MARK_TARGET(0x800300C8,0x800300F0,ZZ_30078_50);
ZZ_MARK_TARGET(0x800300F0,0x80030104,ZZ_30078_78);
ZZ_MARK_TARGET(0x80030104,0x80030114,ZZ_30078_8C);
ZZ_MARK_TARGET(0x80030114,0x80030128,ZZ_30078_9C);
ZZ_MARK_TARGET(0x80030128,0x80030130,ZZ_30078_B0);
ZZ_MARK_TARGET(0x80030130,0x8003013C,ZZ_30078_B8);
ZZ_MARK_TARGET(0x8003013C,0x80030144,ZZ_30078_C4);
ZZ_MARK_TARGET(0x80030144,0x80030160,ZZ_30078_CC);
ZZ_MARK_TARGET(0x80030160,0x80030168,ZZ_30078_E8);
ZZ_MARK_TARGET(0x80030168,0x80030170,ZZ_30078_F0);
ZZ_MARK_TARGET(0x80030170,0x80030190,ZZ_30078_F8);
ZZ_MARK_TARGET(0x80030190,0x800301A8,ZZ_30078_118);
ZZ_MARK_TARGET(0x800301A8,0x800301E4,ZZ_30078_130);
ZZ_MARK_TARGET(0x800301E4,0x800301FC,ZZ_30078_16C);
ZZ_MARK_TARGET(0x800301FC,0x80030208,ZZ_30078_184);
ZZ_MARK_TARGET(0x80030208,0x80030210,ZZ_30078_190);
ZZ_MARK_TARGET(0x80030210,0x80030224,ZZ_30078_198);
ZZ_MARK_TARGET(0x80030224,0x80030230,ZZ_30078_1AC);
ZZ_MARK_TARGET(0x80030230,0x80030234,ZZ_30078_1B8);
ZZ_MARK_TARGET(0x80030234,0x80030260,ZZ_30078_1BC);
