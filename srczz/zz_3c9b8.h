#ifdef ZZ_INCLUDE_CODE
ZZ_3C9B8:
	SP -= 24;
	EMU_Write32(SP + 16,RA); //+ 0x10
	RA = 0x8003C9C8; //ZZ_3C9B8_10
	ZZ_CLOCKCYCLES(4,0x8003CB88);
	goto ZZ_3CB88;
ZZ_3C9B8_10:
	V0 &= 0xD;
	if (V0)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(3,0x8003C9F4);
		goto ZZ_3C9B8_3C;
	}
	V0 = 0x1;
	RA = 0x8003C9DC; //ZZ_3C9B8_24
	A0 = 0x1;
	ZZ_CLOCKCYCLES(5,0x8003CAF8);
	goto ZZ_3CAF8;
ZZ_3C9B8_24:
	V0 = R0;
	A0 = EMU_ReadU32(GP + 360); //+ 0x168
	V1 = 0x40;
	EMU_Write32(A0 + 20,R0); //+ 0x14
	EMU_Write32(A0 + 16,V1); //+ 0x10
	EMU_Write32(A0 + 28,R0); //+ 0x1C
	ZZ_CLOCKCYCLES(6,0x8003C9F4);
ZZ_3C9B8_3C:
	RA = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(4);
	ZZ_JUMPREGISTER(0x8003ABE0,ZZ_3ABA4_3C);
	ZZ_JUMPREGISTER(0x8003BE04,ZZ_3B8B8_54C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003C9B8,0x8003C9C8,ZZ_3C9B8);
ZZ_MARK_TARGET(0x8003C9C8,0x8003C9DC,ZZ_3C9B8_10);
ZZ_MARK_TARGET(0x8003C9DC,0x8003C9F4,ZZ_3C9B8_24);
ZZ_MARK_TARGET(0x8003C9F4,0x8003CA04,ZZ_3C9B8_3C);
