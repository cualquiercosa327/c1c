#ifdef ZZ_INCLUDE_CODE
ZZ_3C714:
	SP -= 160;
	V0 = A0;
	EMU_Write32(SP + 144,S0); //+ 0x90
	S0 = A1;
	A0 = SP + 16;
	A1 = V0;
	EMU_Write32(SP + 152,RA); //+ 0x98
	RA = 0x8003C738; //ZZ_3C714_24
	EMU_Write32(SP + 148,S1); //+ 0x94
	ZZ_CLOCKCYCLES(9,0x8003D6D0);
	goto ZZ_3D6D0;
ZZ_3C714_24:
	A1 = 0x80050000;
	A1 += 25988;
	RA = 0x8003C748; //ZZ_3C714_34
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(4,0x8003D6A0);
	goto ZZ_3D6A0;
ZZ_3C714_34:
	S1 = R0;
	A0 = SP + 16;
	RA = 0x8003C758; //ZZ_3C714_44
	A1 = S0;
	ZZ_CLOCKCYCLES(4,0x8003E268);
	goto ZZ_3E268;
ZZ_3C714_44:
	if (S0 != V0)
	{
		V0 = (int32_t)S1 < 16;
		ZZ_CLOCKCYCLES(2,0x8003C780);
		goto ZZ_3C714_6C;
	}
	V0 = (int32_t)S1 < 16;
	S1 += 1;
	ZZ_CLOCKCYCLES(3,0x8003C764);
ZZ_3C714_50:
	S0 += 40;
	RA = 0x8003C770; //ZZ_3C714_5C
	A0 = S0;
	ZZ_CLOCKCYCLES(3,0x8003E278);
	goto ZZ_3E278;
ZZ_3C714_5C:
	if (S0 == V0)
	{
		S1 += 1;
		ZZ_CLOCKCYCLES(2,0x8003C764);
		goto ZZ_3C714_50;
	}
	S1 += 1;
	S1 -= 1;
	V0 = (int32_t)S1 < 16;
	ZZ_CLOCKCYCLES(4,0x8003C780);
ZZ_3C714_6C:
	if (V0)
	{
		V0 = S1;
		ZZ_CLOCKCYCLES(2,0x8003C790);
		goto ZZ_3C714_7C;
	}
	V0 = S1;
	S1 = 0xF;
	V0 = S1;
	ZZ_CLOCKCYCLES(4,0x8003C790);
ZZ_3C714_7C:
	RA = EMU_ReadU32(SP + 152); //+ 0x98
	S1 = EMU_ReadU32(SP + 148); //+ 0x94
	S0 = EMU_ReadU32(SP + 144); //+ 0x90
	SP += 160;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x8003ACBC,ZZ_3AC2C_90);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8003C714,0x8003C738,ZZ_3C714);
ZZ_MARK_TARGET(0x8003C738,0x8003C748,ZZ_3C714_24);
ZZ_MARK_TARGET(0x8003C748,0x8003C758,ZZ_3C714_34);
ZZ_MARK_TARGET(0x8003C758,0x8003C764,ZZ_3C714_44);
ZZ_MARK_TARGET(0x8003C764,0x8003C770,ZZ_3C714_50);
ZZ_MARK_TARGET(0x8003C770,0x8003C780,ZZ_3C714_5C);
ZZ_MARK_TARGET(0x8003C780,0x8003C790,ZZ_3C714_6C);
ZZ_MARK_TARGET(0x8003C790,0x8003C7A8,ZZ_3C714_7C);
