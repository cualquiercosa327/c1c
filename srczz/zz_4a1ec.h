#ifdef ZZ_INCLUDE_CODE
ZZ_4A1EC:
	SP -= 32;
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	V1 = A1 << 16;
	V1 = (int32_t)V1 >> 16;
	V0 = V1 << 1;
	V0 += V1;
	V0 <<= 2;
	V0 = V0 - V1;
	V0 <<= 2;
	V0 = V0 - V1;
	S1 = A0;
	A0 <<= 16;
	A0 = (int32_t)A0 >> 14;
	S0 = A1;
	V0 <<= 2;
	AT = 0x80060000;
	AT += A0;
	V1 = EMU_ReadU32(AT + 1048); //+ 0x418
	A2 &= 0xFF;
	A2 = A2 < 64;
	if (!A2)
	{
		S2 = V0 + V1;
		ZZ_CLOCKCYCLES(25,0x8004A260);
		goto ZZ_4A1EC_74;
	}
	S2 = V0 + V1;
	RA = 0x8004A258; //ZZ_4A1EC_6C
	ZZ_CLOCKCYCLES(27,0x8004D65C);
	goto ZZ_4D65C;
ZZ_4A1EC_6C:
	A0 = S1 << 16;
	ZZ_CLOCKCYCLES(2,0x8004A26C);
	goto ZZ_4A1EC_80;
ZZ_4A1EC_74:
	RA = 0x8004A268; //ZZ_4A1EC_7C
	ZZ_CLOCKCYCLES(2,0x8004D66C);
	goto ZZ_4D66C;
ZZ_4A1EC_7C:
	A0 = S1 << 16;
	ZZ_CLOCKCYCLES(1,0x8004A26C);
ZZ_4A1EC_80:
	A0 = (int32_t)A0 >> 16;
	A1 = S0 << 16;
	RA = 0x8004A27C; //ZZ_4A1EC_90
	A1 = (int32_t)A1 >> 16;
	ZZ_CLOCKCYCLES(4,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4A1EC_90:
	EMU_Write32(S2 + 136,V0); //+ 0x88
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 32;
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004A1EC,0x8004A258,ZZ_4A1EC);
ZZ_MARK_TARGET(0x8004A258,0x8004A260,ZZ_4A1EC_6C);
ZZ_MARK_TARGET(0x8004A260,0x8004A268,ZZ_4A1EC_74);
ZZ_MARK_TARGET(0x8004A268,0x8004A26C,ZZ_4A1EC_7C);
ZZ_MARK_TARGET(0x8004A26C,0x8004A27C,ZZ_4A1EC_80);
ZZ_MARK_TARGET(0x8004A27C,0x8004A298,ZZ_4A1EC_90);
