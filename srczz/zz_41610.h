#ifdef ZZ_INCLUDE_CODE
ZZ_41610:
	V0 = 0x80050000;
	V0 += 19052;
	V0 = EMU_ReadU8(V0);
	V1 = V0 & 0xFF;
	V0 = 0x1;
	if (V1 == V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(8,0x80041640);
		goto ZZ_41610_30;
	}
	V0 = 0x2;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(10,0x80041668);
		goto ZZ_41610_58;
	}
	ZZ_CLOCKCYCLES(12,0x800416C0);
	goto ZZ_41610_B0;
ZZ_41610_30:
	V0 = 0x80050000;
	V0 = EMU_ReadU8(V0 + 19055); //+ 0x4A6F
	if (!V0)
	{
		V0 = 0x400;
		ZZ_CLOCKCYCLES(5,0x800416C0);
		goto ZZ_41610_B0;
	}
	V0 = 0x400;
	V1 = EMU_ReadS16(A0 + 4); //+ 0x4
	A0 = EMU_ReadS16(A0);
	ZZ_CLOCKCYCLES(7,0x8004165C);
ZZ_41610_4C:
	V0 = V0 - V1;
	V0 = V0 - A0;
	ZZ_CLOCKCYCLES(3,0x800416C4);
	goto ZZ_41610_B4;
ZZ_41610_58:
	V0 = 0x80050000;
	V0 = EMU_ReadU8(V0 + 19055); //+ 0x4A6F
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x800416A0);
		goto ZZ_41610_90;
	}
	V0 = EMU_ReadU16(A0 + 4); //+ 0x4
	A0 = EMU_ReadS16(A0);
	V0 <<= 16;
	V1 = (int32_t)V0 >> 16;
	V0 >>= 31;
	V1 += V0;
	V1 = (int32_t)V1 >> 1;
	V0 = 0x400;
	ZZ_CLOCKCYCLES(14,0x8004165C);
	goto ZZ_41610_4C;
ZZ_41610_90:
	V0 = EMU_ReadU16(A0);
	V0 <<= 16;
	V1 = (int32_t)V0 >> 16;
	V0 >>= 31;
	V1 += V0;
	V0 = (int32_t)V1 >> 1;
	ZZ_CLOCKCYCLES(8,0x800416C4);
	goto ZZ_41610_B4;
ZZ_41610_B0:
	V0 = EMU_ReadS16(A0);
	ZZ_CLOCKCYCLES(1,0x800416C4);
ZZ_41610_B4:
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(2);
	ZZ_JUMPREGISTER(0x80040A84,ZZ_40A0C_78);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80041610,0x80041640,ZZ_41610);
ZZ_MARK_TARGET(0x80041640,0x8004165C,ZZ_41610_30);
ZZ_MARK_TARGET(0x8004165C,0x80041668,ZZ_41610_4C);
ZZ_MARK_TARGET(0x80041668,0x800416A0,ZZ_41610_58);
ZZ_MARK_TARGET(0x800416A0,0x800416C0,ZZ_41610_90);
ZZ_MARK_TARGET(0x800416C0,0x800416C4,ZZ_41610_B0);
ZZ_MARK_TARGET(0x800416C4,0x800416CC,ZZ_41610_B4);
