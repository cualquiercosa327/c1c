#ifdef ZZ_INCLUDE_CODE
ZZ_13798:
	V0 = EMU_ReadU32(GP + 20); //+ 0x14
	SP -= 32;
	EMU_Write32(SP + 24,S0); //+ 0x18
	S0 = A0;
	if (!V0)
	{
		EMU_Write32(SP + 28,RA); //+ 0x1C
		ZZ_CLOCKCYCLES(6,0x80013808);
		goto ZZ_13798_70;
	}
	EMU_Write32(SP + 28,RA); //+ 0x1C
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 12372); //+ 0xFFFFCFAC
	if (V0)
	{
		A0 = 0x1;
		ZZ_CLOCKCYCLES(11,0x80013808);
		goto ZZ_13798_70;
	}
	A0 = 0x1;
	RA = 0x800137CC; //ZZ_13798_34
	A1 = R0;
	ZZ_CLOCKCYCLES(13,0x80043498);
	goto ZZ_43498;
ZZ_13798_34:
	if (V0)
	{
		A0 = 0x7F0000;
		ZZ_CLOCKCYCLES(2,0x80013808);
		goto ZZ_13798_70;
	}
	A0 = 0x7F0000;
	A0 |= 0xFFFF;
	V0 = S0 << 1;
	V0 += S0;
	V0 <<= 2;
	AT = 0x80060000;
	AT += V0;
	V0 = EMU_ReadU32(AT - 8132); //+ 0xFFFFE03C
	A1 = SP + 16;
	RA = 0x800137FC; //ZZ_13798_64
	A0 &= V0;
	ZZ_CLOCKCYCLES(12,0x80043A24);
	goto ZZ_43A24;
ZZ_13798_64:
	A0 = 0x15;
	RA = 0x80013808; //ZZ_13798_70
	A1 = SP + 16;
	ZZ_CLOCKCYCLES(3,0x80043668);
	goto ZZ_43668;
ZZ_13798_70:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
  //ZZ_JUMPREGISTER(0x800228BC,ZZ_201DC_26E0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80013798,0x800137CC,ZZ_13798);
ZZ_MARK_TARGET(0x800137CC,0x800137FC,ZZ_13798_34);
ZZ_MARK_TARGET(0x800137FC,0x80013808,ZZ_13798_64);
ZZ_MARK_TARGET(0x80013808,0x8001381C,ZZ_13798_70);
