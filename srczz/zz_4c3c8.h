#ifdef ZZ_INCLUDE_CODE
ZZ_4C3C8:
	SP -= 56;
	EMU_Write32(SP + 48,RA); //+ 0x30
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 40,S2); //+ 0x28
	EMU_Write32(SP + 36,S1); //+ 0x24
	EMU_Write32(SP + 32,S0); //+ 0x20
	A3 = A1 << 16;
	A1 = (int32_t)A3 >> 16;
	V0 = A1 << 1;
	V0 += A1;
	V0 <<= 2;
	V0 = V0 - A1;
	V0 <<= 2;
	A0 <<= 16;
	V1 = (int32_t)A0 >> 14;
	AT = 0x80060000;
	AT += V1;
	V1 = EMU_ReadU32(AT + 1048); //+ 0x418
	V0 = V0 - A1;
	V0 <<= 2;
	S1 = V0 + V1;
	V0 = EMU_ReadS16(S1 + 112); //+ 0x70
	V1 = EMU_ReadU32(S1 + 136); //+ 0x88
	A1 = V1 - V0;
	if ((int32_t)A1 <= 0)
	{
		A2 = V0;
		ZZ_CLOCKCYCLES(27,0x8004C470);
		goto ZZ_4C3C8_A8;
	}
	A2 = V0;
	V1 = EMU_ReadS16(S1 + 110); //+ 0x6E
	if ((int32_t)V1 <= 0)
	{
		V0 = V1;
		ZZ_CLOCKCYCLES(31,0x8004C450);
		goto ZZ_4C3C8_88;
	}
	V0 = V1;
	V0 -= 1;
	EMU_Write16(S1 + 110,V0); //+ 0x6E
	ZZ_CLOCKCYCLES(34,0x8004C4B8);
	goto ZZ_4C3C8_F0;
ZZ_4C3C8_88:
	if (V1)
	{
		ZZ_CLOCKCYCLES(2,0x8004C468);
		goto ZZ_4C3C8_A0;
	}
	V0 = EMU_ReadU32(S1 + 136); //+ 0x88
	EMU_Write16(S1 + 110,A2); //+ 0x6E
	V0 -= 1;
	ZZ_CLOCKCYCLES(6,0x8004C4B4);
	goto ZZ_4C3C8_EC;
ZZ_4C3C8_A0:
	EMU_Write32(S1 + 136,A1); //+ 0x88
	ZZ_CLOCKCYCLES(2,0x8004C4B8);
	goto ZZ_4C3C8_F0;
ZZ_4C3C8_A8:
	V0 = (int32_t)V0 < (int32_t)V1;
	if (V0)
	{
		S0 = V1;
		ZZ_CLOCKCYCLES(3,0x8004C4B8);
		goto ZZ_4C3C8_F0;
	}
	S0 = V1;
	S3 = A0;
	S2 = A3;
	A0 = (int32_t)S3 >> 16;
	ZZ_CLOCKCYCLES(6,0x8004C488);
ZZ_4C3C8_C0:
	RA = 0x8004C490; //ZZ_4C3C8_C8
	A1 = (int32_t)S2 >> 16;
	ZZ_CLOCKCYCLES(2,0x8004C4D4);
	goto ZZ_4C4D4;
ZZ_4C3C8_C8:
	V0 = EMU_ReadU32(S1 + 136); //+ 0x88
	if (!V0)
	{
		A0 = (int32_t)S3 >> 16;
		ZZ_CLOCKCYCLES(4,0x8004C488);
		goto ZZ_4C3C8_C0;
	}
	A0 = (int32_t)S3 >> 16;
	V1 = EMU_ReadS16(S1 + 112); //+ 0x70
	S0 += V0;
	V0 = (int32_t)S0 < (int32_t)V1;
	if (V0)
	{
		V0 = S0 - V1;
		ZZ_CLOCKCYCLES(9,0x8004C488);
		goto ZZ_4C3C8_C0;
	}
	V0 = S0 - V1;
	ZZ_CLOCKCYCLES(9,0x8004C4B4);
ZZ_4C3C8_EC:
	EMU_Write32(S1 + 136,V0); //+ 0x88
	ZZ_CLOCKCYCLES(1,0x8004C4B8);
ZZ_4C3C8_F0:
	RA = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 56;
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x8004C3B8,ZZ_4C39C_1C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004C3C8,0x8004C450,ZZ_4C3C8);
ZZ_MARK_TARGET(0x8004C450,0x8004C468,ZZ_4C3C8_88);
ZZ_MARK_TARGET(0x8004C468,0x8004C470,ZZ_4C3C8_A0);
ZZ_MARK_TARGET(0x8004C470,0x8004C488,ZZ_4C3C8_A8);
ZZ_MARK_TARGET(0x8004C488,0x8004C490,ZZ_4C3C8_C0);
ZZ_MARK_TARGET(0x8004C490,0x8004C4B4,ZZ_4C3C8_C8);
ZZ_MARK_TARGET(0x8004C4B4,0x8004C4B8,ZZ_4C3C8_EC);
ZZ_MARK_TARGET(0x8004C4B8,0x8004C4D4,ZZ_4C3C8_F0);
