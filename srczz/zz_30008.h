#ifdef ZZ_INCLUDE_CODE
ZZ_30008:
	SP -= 48;
	EMU_Write32(SP + 40,S0); //+ 0x28
	S0 = A0;
	V1 = EMU_ReadU32(SP + 64); //+ 0x40
	V0 = 0x7;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = S0 | 0x100;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = S0 - 7;
	V0 = V0 < 2;
	EMU_Write32(SP + 44,RA); //+ 0x2C
	EMU_Write16(SP + 24,A1); //+ 0x18
	if (!V0)
	{
		EMU_Write16(SP + 26,A2); //+ 0x1A
		ZZ_CLOCKCYCLES(14,0x80030048);
		goto ZZ_30008_40;
	}
	EMU_Write16(SP + 26,A2); //+ 0x1A
	EMU_Write32(SP + 28,A3); //+ 0x1C
	EMU_Write32(SP + 32,V1); //+ 0x20
	ZZ_CLOCKCYCLES(16,0x80030048);
ZZ_30008_40:
	RA = 0x80030050; //ZZ_30008_48
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80047208);
	goto ZZ_47208;
ZZ_30008_48:
	RA = 0x80030058; //ZZ_30008_50
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(2,0x80047BE8);
	goto ZZ_47BE8;
ZZ_30008_50:
	RA = 0x80030060; //ZZ_30008_58
	A0 = R0 < S0;
	ZZ_CLOCKCYCLES(2,0x80046EE0);
	goto ZZ_46EE0;
ZZ_30008_58:
	V0 = R0;
	RA = EMU_ReadU32(SP + 44); //+ 0x2C
	S0 = EMU_ReadU32(SP + 40); //+ 0x28
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER(0x8002FF70,ZZ_2FDE0_190);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80030008,0x80030048,ZZ_30008);
ZZ_MARK_TARGET(0x80030048,0x80030050,ZZ_30008_40);
ZZ_MARK_TARGET(0x80030050,0x80030058,ZZ_30008_48);
ZZ_MARK_TARGET(0x80030058,0x80030060,ZZ_30008_50);
ZZ_MARK_TARGET(0x80030060,0x80030078,ZZ_30008_58);
