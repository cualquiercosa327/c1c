#ifdef ZZ_INCLUDE_CODE
ZZ_45C04:
	SP -= 32;
	EMU_Write32(SP + 20,S1); //+ 0x14
	S1 = A1;
	V0 = 0x1;
	EMU_Write32(SP + 24,RA); //+ 0x18
	if (A0 != V0)
	{
		EMU_Write32(SP + 16,S0); //+ 0x10
		ZZ_CLOCKCYCLES(7,0x80045C8C);
		goto ZZ_45C04_88;
	}
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = 0x80050000;
	S0 += 22680;
	V0 = EMU_ReadU32(S0);
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(13,0x80045C9C);
		goto ZZ_45C04_98;
	}
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22668); //+ 0x588C
	A1 = 0x80050000;
	A1 = EMU_ReadU32(A1 + 22676); //+ 0x5894
	RA = 0x80045C50; //ZZ_45C04_4C
	ZZ_CLOCKCYCLES(19,0x80045A34);
	goto ZZ_45A34;
ZZ_45C04_4C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22676); //+ 0x5894
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22668); //+ 0x588C
	V0 <<= 2;
	V0 += V1;
	AT = 0x80050000;
	EMU_Write32(AT + 22668,V0); //+ 0x588C
	V0 = EMU_ReadU32(S0);
	V0 -= 1;
	EMU_Write32(S0,V0);
	V0 = EMU_ReadU32(S0);
	ZZ_CLOCKCYCLES(15,0x80045C9C);
	goto ZZ_45C04_98;
ZZ_45C04_88:
	V1 = 0x80050000;
	V1 += 22680;
	V0 = -1;
	EMU_Write32(V1,V0);
	ZZ_CLOCKCYCLES(4,0x80045C9C);
ZZ_45C04_98:
	RA = 0x80045CA4; //ZZ_45C04_A0
	A0 = -1;
	ZZ_CLOCKCYCLES(2,0x8003E4F0);
	goto ZZ_3E4F0;
ZZ_45C04_A0:
	V1 = 0x80050000;
	V1 += 22684;
	EMU_Write32(V1,V0);
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22680); //+ 0x5898
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(8,0x80045CE0);
		goto ZZ_45C04_DC;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22656); //+ 0x5880
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(13,0x80045CE0);
		goto ZZ_45C04_DC;
	}
	RA = 0x80045CE0; //ZZ_45C04_DC
	ZZ_CLOCKCYCLES(15,0x8004519C);
	goto ZZ_4519C;
ZZ_45C04_DC:
	S0 = 0x80050000;
	S0 += 22680;
	V0 = EMU_ReadU32(S0);
	if ((int32_t)V0 > 0)
	{
		A0 = 0x9;
		ZZ_CLOCKCYCLES(6,0x80045D58);
		goto ZZ_45C04_154;
	}
	A0 = 0x9;
	A1 = R0;
	A2 = R0;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22688); //+ 0x58A0
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22692); //+ 0x58A4
	AT = 0x80050000;
	EMU_Write32(AT + 21920,V0); //+ 0x55A0
	AT = 0x80050000;
	EMU_Write32(AT + 21924,V1); //+ 0x55A4
	RA = 0x80045D28; //ZZ_45C04_124
	A3 = R0;
	ZZ_CLOCKCYCLES(18,0x80044640);
	goto ZZ_44640;
ZZ_45C04_124:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 21928); //+ 0x55A8
	if (!V1)
	{
		ZZ_CLOCKCYCLES(5,0x80045D58);
		goto ZZ_45C04_154;
	}
	V0 = EMU_ReadU32(S0);
	if (V0)
	{
		A0 = 0x5;
		ZZ_CLOCKCYCLES(9,0x80045D50);
		goto ZZ_45C04_14C;
	}
	A0 = 0x5;
	A0 = 0x2;
	ZZ_CLOCKCYCLES(10,0x80045D50);
ZZ_45C04_14C:
	ZZ_JUMPREGISTER_BEGIN(V1);
	RA = 0x80045D58; //ZZ_45C04_154
	A1 = S1;
	ZZ_CLOCKCYCLES_JR(2);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V1,80045D50)
	ZZ_JUMPREGISTER_END();
ZZ_45C04_154:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(6);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80045C04,0x80045C50,ZZ_45C04);
ZZ_MARK_TARGET(0x80045C50,0x80045C8C,ZZ_45C04_4C);
ZZ_MARK_TARGET(0x80045C8C,0x80045C9C,ZZ_45C04_88);
ZZ_MARK_TARGET(0x80045C9C,0x80045CA4,ZZ_45C04_98);
ZZ_MARK_TARGET(0x80045CA4,0x80045CE0,ZZ_45C04_A0);
ZZ_MARK_TARGET(0x80045CE0,0x80045D28,ZZ_45C04_DC);
ZZ_MARK_TARGET(0x80045D28,0x80045D50,ZZ_45C04_124);
ZZ_MARK_TARGET(0x80045D50,0x80045D58,ZZ_45C04_14C);
ZZ_MARK_TARGET(0x80045D58,0x80045D70,ZZ_45C04_154);
