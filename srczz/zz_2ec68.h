#ifdef ZZ_INCLUDE_CODE
ZZ_2EC68:
	SP -= 56;
	EMU_Write32(SP + 52,RA); //+ 0x34
	if (!A0)
	{
		EMU_Write32(SP + 48,S0); //+ 0x30
		ZZ_CLOCKCYCLES(4,0x8002EE54);
		goto ZZ_2EC68_1EC;
	}
	EMU_Write32(SP + 48,S0); //+ 0x30
	V1 = 0x800;
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 - 15044); //+ 0xFFFFC53C
	V0 = 0xFF;
	AT = 0x80050000;
	EMU_Write32(AT + 25676,V1); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V0); //+ 0x6454
	AT = 0x80050000;
	EMU_Write32(AT + 25688,V0); //+ 0x6458
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V1); //+ 0x645C
	V1 = EMU_ReadU32(A0 + 4); //+ 0x4
	V0 = -1;
	AT = 0x80050000;
	EMU_Write32(AT + 25664,R0); //+ 0x6440
	AT = 0x80050000;
	EMU_Write32(AT + 25668,R0); //+ 0x6444
	AT = 0x80050000;
	EMU_Write32(AT + 25672,R0); //+ 0x6448
	EMU_Write32(GP + 208,R0); //+ 0xD0
	EMU_Write32(GP + 204,V0); //+ 0xCC
	V1 -= 3;
	V0 = V1 < 53;
	if (!V0)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(32,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	V0 = V1 << 2;
	AT = 0x80010000;
	AT += V0;
	V0 = EMU_ReadU32(AT + 2580); //+ 0xA14
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(38);
	ZZ_JUMPREGISTER(0x8002EDE4,ZZ_2EC68_17C);
	ZZ_JUMPREGISTER(0x8002F694,ZZ_2EC68_A2C);
	ZZ_JUMPREGISTER(0x8002ED68,ZZ_2EC68_100);
	ZZ_JUMPREGISTER(0x8002EDB4,ZZ_2EC68_14C);
	ZZ_JUMPREGISTER(0x8002ED84,ZZ_2EC68_11C);
	ZZ_JUMPREGISTER(0x8002ED14,ZZ_2EC68_AC);
	ZZ_JUMPREGISTER(0x8002ED00,ZZ_2EC68_98);
	ZZ_JUMPREGISTER(0x8002EE18,ZZ_2EC68_1B0);
	ZZ_JUMPREGISTER_END();
ZZ_2EC68_98:
	V0 = 0xC8;
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	V0 = 0x50;
	ZZ_CLOCKCYCLES(5,0x8002EDC4);
	goto ZZ_2EC68_15C;
ZZ_2EC68_AC:
	V0 = 0x640;
	A1 = 0xA5;
	A0 = 0x5A;
	V1 = 0x64;
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V0); //+ 0x645C
	V0 = 0xFF;
	EMU_Write32(GP + 528,V0); //+ 0x210
	V0 = 0x4B;
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	EMU_Write32(GP + 516,A1); //+ 0x204
	EMU_Write32(GP + 520,A0); //+ 0x208
	EMU_Write32(GP + 524,V1); //+ 0x20C
	EMU_Write32(GP + 532,V0); //+ 0x214
	EMU_Write32(GP + 536,R0); //+ 0x218
	EMU_Write32(GP + 504,A1); //+ 0x1F8
	EMU_Write32(GP + 508,A0); //+ 0x1FC
	EMU_Write32(GP + 512,V1); //+ 0x200
	ZZ_CLOCKCYCLES(21,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_100:
	V0 = 0xEE;
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V0); //+ 0x6454
	V0 = 0x3C;
	ZZ_CLOCKCYCLES(7,0x8002EE00);
	goto ZZ_2EC68_198;
ZZ_2EC68_11C:
	V0 = 0xF0;
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V0); //+ 0x6454
	V0 = 0xFF;
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25680,R0); //+ 0x6450
	AT = 0x80050000;
	EMU_Write32(AT + 25688,V0); //+ 0x6458
	ZZ_CLOCKCYCLES(12,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_14C:
	V0 = 0xFF;
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	V0 = 0x64;
	ZZ_CLOCKCYCLES(4,0x8002EDC4);
ZZ_2EC68_15C:
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V0); //+ 0x6454
	AT = 0x80050000;
	EMU_Write32(AT + 25688,R0); //+ 0x6458
	ZZ_CLOCKCYCLES(8,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_17C:
	V0 = 0xFF;
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	V0 = 0x2B;
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V0); //+ 0x6454
	V0 = 0xB;
	ZZ_CLOCKCYCLES(7,0x8002EE00);
ZZ_2EC68_198:
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25688,V0); //+ 0x6458
	ZZ_CLOCKCYCLES(6,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_1B0:
	V0 = 0xA;
	AT = 0x80050000;
	EMU_Write32(AT + 25700,V0); //+ 0x6464
	V0 = 0xFFF;
	EMU_Write32(GP + 552,V0); //+ 0x228
	V0 = 0x7D0;
	EMU_Write32(GP + 564,V0); //+ 0x234
	V0 = -14000;
	EMU_Write32(GP + 540,R0); //+ 0x21C
	AT = 0x80050000;
	EMU_Write32(AT + 25696,R0); //+ 0x6460
	AT = 0x80050000;
	EMU_Write32(AT + 25708,V0); //+ 0x646C
	ZZ_CLOCKCYCLES(15,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_1EC:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	V0 = EMU_ReadU32(V0 + 4); //+ 0x4
	V1 = V0 - 3;
	V0 = V1 < 53;
	if (!V0)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(9,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	V0 = V1 << 2;
	AT = 0x80010000;
	AT += V0;
	V0 = EMU_ReadU32(AT + 2796); //+ 0xAEC
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(15);
	ZZ_JUMPREGISTER(0x8002F328,ZZ_2EC68_6C0);
	ZZ_JUMPREGISTER(0x8002F694,ZZ_2EC68_A2C);
	ZZ_JUMPREGISTER(0x8002F12C,ZZ_2EC68_4C4);
	ZZ_JUMPREGISTER(0x8002F370,ZZ_2EC68_708);
	ZZ_JUMPREGISTER(0x8002F3CC,ZZ_2EC68_764);
	ZZ_JUMPREGISTER(0x8002F190,ZZ_2EC68_528);
	ZZ_JUMPREGISTER(0x8002F07C,ZZ_2EC68_414);
	ZZ_JUMPREGISTER(0x8002EE90,ZZ_2EC68_228);
	ZZ_JUMPREGISTER_END();
ZZ_2EC68_228:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 6348); //+ 0x18CC
	if (!A0)
	{
		ZZ_CLOCKCYCLES(5,0x8002EED0);
		goto ZZ_2EC68_268;
	}
	V0 = EMU_ReadU32(A0 + 128); //+ 0x80
	V1 = EMU_ReadU32(A0 + 132); //+ 0x84
	A0 = EMU_ReadU32(A0 + 136); //+ 0x88
	AT = 0x80050000;
	EMU_Write32(AT + 26324,V0); //+ 0x66D4
	AT = 0x80050000;
	EMU_Write32(AT + 26328,V1); //+ 0x66D8
	AT = 0x80050000;
	EMU_Write32(AT + 26332,A0); //+ 0x66DC
	ZZ_CLOCKCYCLES(16,0x8002EF00);
	goto ZZ_2EC68_298;
ZZ_2EC68_268:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26292); //+ 0x66B4
	V1 = EMU_ReadU32(V0 + 128); //+ 0x80
	A0 = EMU_ReadU32(V0 + 132); //+ 0x84
	V0 = EMU_ReadU32(V0 + 136); //+ 0x88
	AT = 0x80050000;
	EMU_Write32(AT + 26324,V1); //+ 0x66D4
	AT = 0x80050000;
	EMU_Write32(AT + 26328,A0); //+ 0x66D8
	AT = 0x80050000;
	EMU_Write32(AT + 26332,V0); //+ 0x66DC
	ZZ_CLOCKCYCLES(12,0x8002EF00);
ZZ_2EC68_298:
	A0 = 0x80060000;
	A0 = EMU_ReadU32(A0 + 6500); //+ 0x1964
	if (!A0)
	{
		ZZ_CLOCKCYCLES(5,0x8002EF40);
		goto ZZ_2EC68_2D8;
	}
	V0 = EMU_ReadU32(GP + 540); //+ 0x21C
	if (A0 == V0)
	{
		V0 = -8000;
		ZZ_CLOCKCYCLES(9,0x8002EF6C);
		goto ZZ_2EC68_304;
	}
	V0 = -8000;
	EMU_Write32(GP + 544,V0); //+ 0x220
	V0 = -500;
	EMU_Write32(GP + 548,V0); //+ 0x224
	V0 = 0x4B;
	EMU_Write32(GP + 556,V0); //+ 0x22C
	V0 = -75;
	ZZ_CLOCKCYCLES(16,0x8002EF68);
	goto ZZ_2EC68_300;
ZZ_2EC68_2D8:
	V0 = EMU_ReadU32(GP + 540); //+ 0x21C
	if (!V0)
	{
		V0 = 0xFFF;
		ZZ_CLOCKCYCLES(4,0x8002EF6C);
		goto ZZ_2EC68_304;
	}
	V0 = 0xFFF;
	EMU_Write32(GP + 544,V0); //+ 0x220
	V0 = 0x64;
	EMU_Write32(GP + 548,V0); //+ 0x224
	V0 = 0x7D0;
	EMU_Write32(GP + 556,V0); //+ 0x22C
	V0 = 0x14;
	ZZ_CLOCKCYCLES(10,0x8002EF68);
ZZ_2EC68_300:
	EMU_Write32(GP + 560,V0); //+ 0x230
	ZZ_CLOCKCYCLES(1,0x8002EF6C);
ZZ_2EC68_304:
	V1 = EMU_ReadU32(GP + 552); //+ 0x228
	A1 = EMU_ReadU32(GP + 544); //+ 0x220
	EMU_Write32(GP + 540,A0); //+ 0x21C
	if (V1 == A1)
	{
		V0 = (int32_t)V1 < (int32_t)A1;
		ZZ_CLOCKCYCLES(5,0x8002EFE4);
		goto ZZ_2EC68_37C;
	}
	V0 = (int32_t)V1 < (int32_t)A1;
	if (!V0)
	{
		V0 = (int32_t)A1 < (int32_t)V1;
		ZZ_CLOCKCYCLES(7,0x8002EFA0);
		goto ZZ_2EC68_338;
	}
	V0 = (int32_t)A1 < (int32_t)V1;
	V0 = EMU_ReadU32(GP + 548); //+ 0x224
	V0 += V1;
	V0 = (int32_t)V0 < (int32_t)A1;
	if (!V0)
	{
		V0 = (int32_t)A1 < (int32_t)V1;
		ZZ_CLOCKCYCLES(13,0x8002EFC0);
		goto ZZ_2EC68_358;
	}
	V0 = (int32_t)A1 < (int32_t)V1;
	ZZ_CLOCKCYCLES(13,0x8002EFA0);
ZZ_2EC68_338:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002EFD0);
		goto ZZ_2EC68_368;
	}
	V0 = EMU_ReadU32(GP + 548); //+ 0x224
	V0 += V1;
	V0 = (int32_t)A1 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002EFD0);
		goto ZZ_2EC68_368;
	}
	ZZ_CLOCKCYCLES(8,0x8002EFC0);
ZZ_2EC68_358:
	V0 = EMU_ReadU32(GP + 544); //+ 0x220
	EMU_Write32(GP + 548,R0); //+ 0x224
	ZZ_CLOCKCYCLES(4,0x8002EFE0);
	goto ZZ_2EC68_378;
ZZ_2EC68_368:
	V0 = EMU_ReadU32(GP + 552); //+ 0x228
	V1 = EMU_ReadU32(GP + 548); //+ 0x224
	V0 += V1;
	ZZ_CLOCKCYCLES(4,0x8002EFE0);
ZZ_2EC68_378:
	EMU_Write32(GP + 552,V0); //+ 0x228
	ZZ_CLOCKCYCLES(1,0x8002EFE4);
ZZ_2EC68_37C:
	V1 = EMU_ReadU32(GP + 564); //+ 0x234
	A0 = EMU_ReadU32(GP + 556); //+ 0x22C
	if (V1 == A0)
	{
		V0 = (int32_t)V1 < (int32_t)A0;
		ZZ_CLOCKCYCLES(5,0x8002F05C);
		goto ZZ_2EC68_3F4;
	}
	V0 = (int32_t)V1 < (int32_t)A0;
	if (!V0)
	{
		V0 = (int32_t)A0 < (int32_t)V1;
		ZZ_CLOCKCYCLES(7,0x8002F018);
		goto ZZ_2EC68_3B0;
	}
	V0 = (int32_t)A0 < (int32_t)V1;
	V0 = EMU_ReadU32(GP + 560); //+ 0x230
	V0 += V1;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		V0 = (int32_t)A0 < (int32_t)V1;
		ZZ_CLOCKCYCLES(13,0x8002F038);
		goto ZZ_2EC68_3D0;
	}
	V0 = (int32_t)A0 < (int32_t)V1;
	ZZ_CLOCKCYCLES(13,0x8002F018);
ZZ_2EC68_3B0:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002F048);
		goto ZZ_2EC68_3E0;
	}
	V0 = EMU_ReadU32(GP + 560); //+ 0x230
	V0 += V1;
	V0 = (int32_t)A0 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002F048);
		goto ZZ_2EC68_3E0;
	}
	ZZ_CLOCKCYCLES(8,0x8002F038);
ZZ_2EC68_3D0:
	V0 = EMU_ReadU32(GP + 556); //+ 0x22C
	EMU_Write32(GP + 560,R0); //+ 0x230
	ZZ_CLOCKCYCLES(4,0x8002F058);
	goto ZZ_2EC68_3F0;
ZZ_2EC68_3E0:
	V0 = EMU_ReadU32(GP + 564); //+ 0x234
	V1 = EMU_ReadU32(GP + 560); //+ 0x230
	V0 += V1;
	ZZ_CLOCKCYCLES(4,0x8002F058);
ZZ_2EC68_3F0:
	EMU_Write32(GP + 564,V0); //+ 0x234
	ZZ_CLOCKCYCLES(1,0x8002F05C);
ZZ_2EC68_3F4:
	V0 = EMU_ReadU32(GP + 552); //+ 0x228
	V1 = EMU_ReadU32(GP + 564); //+ 0x234
	AT = 0x80050000;
	EMU_Write32(AT + 25704,V0); //+ 0x6468
	AT = 0x80050000;
	EMU_Write32(AT + 25712,V1); //+ 0x6470
	ZZ_CLOCKCYCLES(8,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_414:
	V0 = EMU_ReadU32(GP + 208); //+ 0xD0
	if (!V0)
	{
		ZZ_CLOCKCYCLES(4,0x8002F0A4);
		goto ZZ_2EC68_43C;
	}
	if ((int32_t)V0 < 0)
	{
		V0 = (int32_t)V0 < 4;
		ZZ_CLOCKCYCLES(6,0x8002F0F4);
		goto ZZ_2EC68_48C;
	}
	V0 = (int32_t)V0 < 4;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002F0F4);
		goto ZZ_2EC68_48C;
	}
	ZZ_CLOCKCYCLES(10,0x8002F0D8);
	goto ZZ_2EC68_470;
ZZ_2EC68_43C:
	RA = 0x8002F0AC; //ZZ_2EC68_444
	A0 = 0x3E8;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_444:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 25692); //+ 0x645C
	EMU_Write32(GP + 496,V0); //+ 0x1F0
	V0 = V0 - V1;
	if ((int32_t)V0 >= 0)
	{
		ZZ_CLOCKCYCLES(6,0x8002F0C8);
		goto ZZ_2EC68_460;
	}
	V0 += 3;
	ZZ_CLOCKCYCLES(7,0x8002F0C8);
ZZ_2EC68_460:
	V0 = (int32_t)V0 >> 2;
	EMU_Write32(GP + 500,V0); //+ 0x1F4
	V0 += V1;
	ZZ_CLOCKCYCLES(4,0x8002F0EC);
	goto ZZ_2EC68_484;
ZZ_2EC68_470:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 25692); //+ 0x645C
	V1 = EMU_ReadU32(GP + 500); //+ 0x1F4
	V0 += V1;
	ZZ_CLOCKCYCLES(5,0x8002F0EC);
ZZ_2EC68_484:
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V0); //+ 0x645C
	ZZ_CLOCKCYCLES(2,0x8002F0F4);
ZZ_2EC68_48C:
	A0 = EMU_ReadU32(GP + 208); //+ 0xD0
	V0 = A0 + 1;
	V1 = V0;
	EMU_Write32(GP + 208,V0); //+ 0xD0
	if ((int32_t)V0 >= 0)
	{
		A1 = V0;
		ZZ_CLOCKCYCLES(7,0x8002F114);
		goto ZZ_2EC68_4AC;
	}
	A1 = V0;
	V1 = A0 + 4;
	ZZ_CLOCKCYCLES(8,0x8002F114);
ZZ_2EC68_4AC:
	V0 = (int32_t)V1 >> 2;
	V0 <<= 2;
	V0 = A1 - V0;
	EMU_Write32(GP + 208,V0); //+ 0xD0
	ZZ_CLOCKCYCLES(6,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_4C4:
	V1 = EMU_ReadU32(GP + 208); //+ 0xD0
	if (!V1)
	{
		ZZ_CLOCKCYCLES(4,0x8002F150);
		goto ZZ_2EC68_4E8;
	}
	V0 = 0x1;
	if (V1 == V0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(7,0x8002F17C);
		goto ZZ_2EC68_514;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(9,0x8002F308);
	goto ZZ_2EC68_6A0;
ZZ_2EC68_4E8:
	RA = 0x8002F158; //ZZ_2EC68_4F0
	A0 = 0x5DC;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_4F0:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 25692); //+ 0x645C
	EMU_Write32(GP + 496,V0); //+ 0x1F0
	V0 = V0 - V1;
	A0 = V0 >> 31;
	V0 += A0;
	V0 = (int32_t)V0 >> 1;
	V0 += V1;
	ZZ_CLOCKCYCLES(9,0x8002F180);
	goto ZZ_2EC68_518;
ZZ_2EC68_514:
	V0 = EMU_ReadU32(GP + 496); //+ 0x1F0
	ZZ_CLOCKCYCLES(1,0x8002F180);
ZZ_2EC68_518:
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V0); //+ 0x645C
	ZZ_CLOCKCYCLES(4,0x8002F2FC);
	goto ZZ_2EC68_694;
ZZ_2EC68_528:
	V1 = EMU_ReadU32(GP + 208); //+ 0xD0
	if (!V1)
	{
		V0 = 0x1;
		ZZ_CLOCKCYCLES(4,0x8002F1B0);
		goto ZZ_2EC68_548;
	}
	V0 = 0x1;
	if (V1 == V0)
	{
		V1 += 1;
		ZZ_CLOCKCYCLES(6,0x8002F2D8);
		goto ZZ_2EC68_670;
	}
	V1 += 1;
	ZZ_CLOCKCYCLES(8,0x8002F308);
	goto ZZ_2EC68_6A0;
ZZ_2EC68_548:
	RA = 0x8002F1B8; //ZZ_2EC68_550
	A0 = 0x64;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_550:
	V1 = EMU_ReadU32(GP + 528); //+ 0x210
	T1 = EMU_ReadU32(GP + 516); //+ 0x204
	V1 = V1 - T1;
	EMU_SMultiply(V1,V0);
	A2 = LO;
	T0 = 0x51EB0000;
	T0 |= 0x851F;
	EMU_SMultiply(A2,T0);
	A0 = EMU_ReadU32(GP + 532); //+ 0x214
	T2 = EMU_ReadU32(GP + 520); //+ 0x208
	V1 = HI;
	A0 = A0 - T2;
	EMU_SMultiply(A0,V0);
	A3 = LO;
	EMU_SMultiply(A3,T0);
	A1 = EMU_ReadU32(GP + 536); //+ 0x218
	T3 = EMU_ReadU32(GP + 524); //+ 0x20C
	EMU_Write32(GP + 496,V0); //+ 0x1F0
	A1 = A1 - T3;
	A0 = HI;
	A2 = (int32_t)A2 >> 31;
	V1 = (int32_t)V1 >> 5;
	EMU_SMultiply(A1,V0);
	V1 = V1 - A2;
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 25680); //+ 0x6450
	V1 += T1;
	EMU_Write32(GP + 504,V1); //+ 0x1F8
	V1 = V1 - A2;
	A3 = (int32_t)A3 >> 31;
	V0 = V1 >> 31;
	V1 += V0;
	V1 = (int32_t)V1 >> 1;
	V1 += A2;
	A0 = (int32_t)A0 >> 5;
	A1 = LO;
	A0 = A0 - A3;
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V1); //+ 0x6450
	EMU_SMultiply(A1,T0);
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 25684); //+ 0x6454
	A0 += T2;
	EMU_Write32(GP + 508,A0); //+ 0x1FC
	A0 = A0 - V1;
	V0 = A0 >> 31;
	A0 += V0;
	A0 = (int32_t)A0 >> 1;
	A0 += V1;
	AT = 0x80050000;
	EMU_Write32(AT + 25684,A0); //+ 0x6454
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 25688); //+ 0x6458
	A1 = (int32_t)A1 >> 31;
	V0 = HI;
	V0 = (int32_t)V0 >> 5;
	V0 = V0 - A1;
	V0 += T3;
	EMU_Write32(GP + 512,V0); //+ 0x200
	V0 = V0 - A0;
	V1 = V0 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	V0 += A0;
	AT = 0x80050000;
	EMU_Write32(AT + 25688,V0); //+ 0x6458
	ZZ_CLOCKCYCLES(72,0x8002F2FC);
	goto ZZ_2EC68_694;
ZZ_2EC68_670:
	V0 = EMU_ReadU32(GP + 504); //+ 0x1F8
	V1 = EMU_ReadU32(GP + 508); //+ 0x1FC
	A0 = EMU_ReadU32(GP + 512); //+ 0x200
	AT = 0x80050000;
	EMU_Write32(AT + 25680,V0); //+ 0x6450
	AT = 0x80050000;
	EMU_Write32(AT + 25684,V1); //+ 0x6454
	AT = 0x80050000;
	EMU_Write32(AT + 25688,A0); //+ 0x6458
	ZZ_CLOCKCYCLES(9,0x8002F2FC);
ZZ_2EC68_694:
	V1 = EMU_ReadU32(GP + 208); //+ 0xD0
	V1 += 1;
	ZZ_CLOCKCYCLES(3,0x8002F308);
ZZ_2EC68_6A0:
	V0 = V1 >> 31;
	V0 += V1;
	V0 = (int32_t)V0 >> 1;
	V0 <<= 1;
	V1 = V1 - V0;
	EMU_Write32(GP + 208,V1); //+ 0xD0
	ZZ_CLOCKCYCLES(8,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_6C0:
	V0 = EMU_ReadU32(GP + 208); //+ 0xD0
	A0 = 0x80050000;
	A0 += 11636;
	V0 <<= 2;
	AT = 0x80050000;
	AT += V0;
	V1 = EMU_ReadU32(AT + 11636); //+ 0x2D74
	V0 = -1;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x8002F354);
		goto ZZ_2EC68_6EC;
	}
	EMU_Write32(GP + 208,R0); //+ 0xD0
	ZZ_CLOCKCYCLES(11,0x8002F354);
ZZ_2EC68_6EC:
	V0 = EMU_ReadU32(GP + 208); //+ 0xD0
	V1 = V0 << 2;
	V1 += A0;
	V1 = EMU_ReadU32(V1);
	V0 += 1;
	ZZ_CLOCKCYCLES(7,0x8002F43C);
	goto ZZ_2EC68_7D4;
ZZ_2EC68_708:
	V0 = EMU_ReadU32(GP + 208); //+ 0xD0
	A0 = 0x80050000;
	A0 += 11636;
	V0 <<= 2;
	AT = 0x80050000;
	AT += V0;
	V1 = EMU_ReadU32(AT + 11636); //+ 0x2D74
	V0 = -1;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(10,0x8002F39C);
		goto ZZ_2EC68_734;
	}
	EMU_Write32(GP + 208,R0); //+ 0xD0
	ZZ_CLOCKCYCLES(11,0x8002F39C);
ZZ_2EC68_734:
	V0 = EMU_ReadU32(GP + 208); //+ 0xD0
	V1 = V0 << 2;
	V1 += A0;
	V1 = EMU_ReadU32(V1);
	V0 += 1;
	EMU_Write32(GP + 208,V0); //+ 0xD0
	V1 = (int32_t)V1 >> 1;
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V1); //+ 0x645C
	ZZ_CLOCKCYCLES(12,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_764:
	V0 = EMU_ReadU32(GP + 204); //+ 0xCC
	A3 = -1;
	if (V0 == A3)
	{
		V0 <<= 2;
		ZZ_CLOCKCYCLES(4,0x8002F450);
		goto ZZ_2EC68_7E8;
	}
	V0 <<= 2;
	V1 = 0x80050000;
	V1 += 12372;
	A1 = V0 + V1;
	A2 = EMU_ReadU32(GP + 208); //+ 0xD0
	V0 = EMU_ReadU32(A1);
	A0 = A2 << 2;
	V0 += A0;
	V1 = EMU_ReadU32(V0);
	if (V1 != A3)
	{
		ZZ_CLOCKCYCLES(15,0x8002F424);
		goto ZZ_2EC68_7BC;
	}
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25692,R0); //+ 0x645C
	EMU_Write32(GP + 204,V1); //+ 0xCC
	ZZ_CLOCKCYCLES(22,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_7BC:
	V0 = EMU_ReadU32(A1);
	AT = 0x80050000;
	EMU_Write32(AT + 25676,V1); //+ 0x644C
	V0 += A0;
	V1 = EMU_ReadU32(V0);
	V0 = A2 + 1;
	ZZ_CLOCKCYCLES(6,0x8002F43C);
ZZ_2EC68_7D4:
	EMU_Write32(GP + 208,V0); //+ 0xD0
	AT = 0x80050000;
	EMU_Write32(AT + 25692,V1); //+ 0x645C
	ZZ_CLOCKCYCLES(5,0x8002F694);
	goto ZZ_2EC68_A2C;
ZZ_2EC68_7E8:
	AT = 0x80050000;
	EMU_Write32(AT + 25676,R0); //+ 0x644C
	AT = 0x80050000;
	EMU_Write32(AT + 25692,R0); //+ 0x645C
	RA = 0x8002F468; //ZZ_2EC68_800
	A0 = 0x3E8;
	ZZ_CLOCKCYCLES(6,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_800:
	V0 = (int32_t)V0 < 25;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(3,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x22;
	if (V1 == V0)
	{
		V0 = 0x2E;
		ZZ_CLOCKCYCLES(10,0x8002F498);
		goto ZZ_2EC68_830;
	}
	V0 = 0x2E;
	if (V1 != V0)
	{
		A0 = 0x6;
		ZZ_CLOCKCYCLES(12,0x8002F4E4);
		goto ZZ_2EC68_87C;
	}
	A0 = 0x6;
	ZZ_CLOCKCYCLES(12,0x8002F498);
ZZ_2EC68_830:
	RA = 0x8002F4A0; //ZZ_2EC68_838
	A0 = 0x3;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_838:
	V1 = V0;
	V0 = 0x1;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 2;
		ZZ_CLOCKCYCLES(4,0x8002F4DC);
		goto ZZ_2EC68_874;
	}
	V0 = (int32_t)V1 < 2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x8002F4C8);
		goto ZZ_2EC68_860;
	}
	if (!V1)
	{
		V0 = 0x5;
		ZZ_CLOCKCYCLES(8,0x8002F4EC);
		goto ZZ_2EC68_884;
	}
	V0 = 0x5;
	ZZ_CLOCKCYCLES(10,0x8002F4F0);
	goto ZZ_2EC68_888;
ZZ_2EC68_860:
	V0 = 0x2;
	if (V1 == V0)
	{
		A0 = 0x4;
		ZZ_CLOCKCYCLES(3,0x8002F4E4);
		goto ZZ_2EC68_87C;
	}
	A0 = 0x4;
	ZZ_CLOCKCYCLES(5,0x8002F4F0);
	goto ZZ_2EC68_888;
ZZ_2EC68_874:
	V0 = 0x4;
	ZZ_CLOCKCYCLES(2,0x8002F4EC);
	goto ZZ_2EC68_884;
ZZ_2EC68_87C:
	RA = 0x8002F4EC; //ZZ_2EC68_884
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_884:
	EMU_Write32(GP + 204,V0); //+ 0xCC
	ZZ_CLOCKCYCLES(1,0x8002F4F0);
ZZ_2EC68_888:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 25600); //+ 0x6400
	EMU_Write32(GP + 208,R0); //+ 0xD0
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x1B;
	if (V1 == V0)
	{
		V0 = 0x22;
		ZZ_CLOCKCYCLES(12,0x8002F530);
		goto ZZ_2EC68_8C8;
	}
	V0 = 0x22;
	if (V1 == V0)
	{
		V0 = 0x2E;
		ZZ_CLOCKCYCLES(14,0x8002F530);
		goto ZZ_2EC68_8C8;
	}
	V0 = 0x2E;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(16,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	ZZ_CLOCKCYCLES(16,0x8002F530);
ZZ_2EC68_8C8:
	A2 = 0x80030000;
	A2 = EMU_ReadU32(A2 + 17696); //+ 0x4520
	V0 = EMU_ReadU32(GP + 572); //+ 0x23C
	V0 = A2 - V0;
	V0 = (int32_t)V0 < 6145;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x8002F694);
		goto ZZ_2EC68_A2C;
	}
	A1 = 0x80050000;
	A1 += 25808;
	EMU_ReadLeft(A1 + 3,&V0); //+ 0x3
	EMU_ReadRight(A1,&V0);
	V1 = EMU_ReadS8(A1 + 4); //+ 0x4
	A0 = EMU_ReadS8(A1 + 5); //+ 0x5
	EMU_WriteLeft(SP + 19,V0); //+ 0x13
	EMU_WriteRight(SP + 16,V0); //+ 0x10
	EMU_Write8(SP + 20,V1); //+ 0x14
	EMU_Write8(SP + 21,A0); //+ 0x15
	EMU_Write32(SP + 24,R0); //+ 0x18
	A1 = 0x80050000;
	A1 += 26168;
	A3 = A1 - 4;
	ZZ_CLOCKCYCLES(22,0x8002F588);
ZZ_2EC68_920:
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	A0 = V0 + 1;
	V0 <<= 2;
	V1 = V0 + A3;
	EMU_Write32(SP + 24,A0); //+ 0x18
	V1 = EMU_ReadU32(V1);
	V0 += A1;
	if ((int32_t)A0 <= 0)
	{
		EMU_Write32(V0,V1);
		ZZ_CLOCKCYCLES(10,0x8002F588);
		goto ZZ_2EC68_920;
	}
	EMU_Write32(V0,V1);
	EMU_Write32(GP + 568,A2); //+ 0x238
	RA = 0x8002F5BC; //ZZ_2EC68_954
	A0 = 0x3;
	ZZ_CLOCKCYCLES(13,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_954:
	V1 = EMU_ReadU8(SP + 18); //+ 0x12
	A0 = SP + 16;
	V1 += V0;
	RA = 0x8002F5D0; //ZZ_2EC68_968
	EMU_Write8(SP + 18,V1); //+ 0x12
	ZZ_CLOCKCYCLES(5,0x80012660);
	goto ZZ_12660;
ZZ_2EC68_968:
	A0 = 0x4CC;
	RA = 0x8002F5DC; //ZZ_2EC68_974
	EMU_Write32(SP + 28,V0); //+ 0x1C
	ZZ_CLOCKCYCLES(3,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_974:
	A0 = R0;
	A1 = 0x1;
	S0 = SP + 24;
	A2 = S0;
	A3 = R0;
	V0 += 3481;
	V0 = (int32_t)V0 >> 3;
	RA = 0x8002F600; //ZZ_2EC68_998
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(9,0x80030840);
	goto ZZ_30840;
ZZ_2EC68_998:
	RA = 0x8002F608; //ZZ_2EC68_9A0
	A0 = 0xF;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_9A0:
	A0 = R0;
	A1 = 0x7;
	A2 = S0;
	A3 = R0;
	V0 += 1;
	RA = 0x8002F624; //ZZ_2EC68_9BC
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(7,0x80030840);
	goto ZZ_30840;
ZZ_2EC68_9BC:
	RA = 0x8002F62C; //ZZ_2EC68_9C4
	A0 = 0x14;
	ZZ_CLOCKCYCLES(2,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_9C4:
	A0 = 0x64;
	V0 += 20;
	RA = 0x8002F63C; //ZZ_2EC68_9D4
	EMU_Write32(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(4,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_9D4:
	V0 = (int32_t)V0 < 21;
	if (V0)
	{
		A0 = 0x51EB0000;
		ZZ_CLOCKCYCLES(3,0x8002F664);
		goto ZZ_2EC68_9FC;
	}
	A0 = 0x51EB0000;
	RA = 0x8002F650; //ZZ_2EC68_9E8
	A0 = 0x32;
	ZZ_CLOCKCYCLES(5,0x8002F778);
	goto ZZ_2F778;
ZZ_2EC68_9E8:
	V1 = EMU_ReadU32(SP + 24); //+ 0x18
	V0 += V1;
	EMU_Write32(SP + 24,V0); //+ 0x18
	A0 = 0x51EB0000;
	ZZ_CLOCKCYCLES(5,0x8002F664);
ZZ_2EC68_9FC:
	V1 = EMU_ReadU32(SP + 24); //+ 0x18
	A0 |= 0x851F;
	V0 = V1 << 14;
	V0 = V0 - V1;
	EMU_SMultiply(V0,A0);
	A1 = SP + 28;
	A0 = R0;
	V0 = (int32_t)V0 >> 31;
	A2 = HI;
	A2 = (int32_t)A2 >> 5;
	RA = 0x8002F694; //ZZ_2EC68_A2C
	A2 = A2 - V0;
	ZZ_CLOCKCYCLES(12,0x800304C8);
	goto ZZ_304C8;
ZZ_2EC68_A2C:
	RA = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 56;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x800255FC,ZZ_253A0_25C);
	ZZ_JUMPREGISTER(0x800263BC,ZZ_262DC_E0);
	
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002EC68,0x8002ED00,ZZ_2EC68);
ZZ_MARK_TARGET(0x8002ED00,0x8002ED14,ZZ_2EC68_98);
ZZ_MARK_TARGET(0x8002ED14,0x8002ED68,ZZ_2EC68_AC);
ZZ_MARK_TARGET(0x8002ED68,0x8002ED84,ZZ_2EC68_100);
ZZ_MARK_TARGET(0x8002ED84,0x8002EDB4,ZZ_2EC68_11C);
ZZ_MARK_TARGET(0x8002EDB4,0x8002EDC4,ZZ_2EC68_14C);
ZZ_MARK_TARGET(0x8002EDC4,0x8002EDE4,ZZ_2EC68_15C);
ZZ_MARK_TARGET(0x8002EDE4,0x8002EE00,ZZ_2EC68_17C);
ZZ_MARK_TARGET(0x8002EE00,0x8002EE18,ZZ_2EC68_198);
ZZ_MARK_TARGET(0x8002EE18,0x8002EE54,ZZ_2EC68_1B0);
ZZ_MARK_TARGET(0x8002EE54,0x8002EE90,ZZ_2EC68_1EC);
ZZ_MARK_TARGET(0x8002EE90,0x8002EED0,ZZ_2EC68_228);
ZZ_MARK_TARGET(0x8002EED0,0x8002EF00,ZZ_2EC68_268);
ZZ_MARK_TARGET(0x8002EF00,0x8002EF40,ZZ_2EC68_298);
ZZ_MARK_TARGET(0x8002EF40,0x8002EF68,ZZ_2EC68_2D8);
ZZ_MARK_TARGET(0x8002EF68,0x8002EF6C,ZZ_2EC68_300);
ZZ_MARK_TARGET(0x8002EF6C,0x8002EFA0,ZZ_2EC68_304);
ZZ_MARK_TARGET(0x8002EFA0,0x8002EFC0,ZZ_2EC68_338);
ZZ_MARK_TARGET(0x8002EFC0,0x8002EFD0,ZZ_2EC68_358);
ZZ_MARK_TARGET(0x8002EFD0,0x8002EFE0,ZZ_2EC68_368);
ZZ_MARK_TARGET(0x8002EFE0,0x8002EFE4,ZZ_2EC68_378);
ZZ_MARK_TARGET(0x8002EFE4,0x8002F018,ZZ_2EC68_37C);
ZZ_MARK_TARGET(0x8002F018,0x8002F038,ZZ_2EC68_3B0);
ZZ_MARK_TARGET(0x8002F038,0x8002F048,ZZ_2EC68_3D0);
ZZ_MARK_TARGET(0x8002F048,0x8002F058,ZZ_2EC68_3E0);
ZZ_MARK_TARGET(0x8002F058,0x8002F05C,ZZ_2EC68_3F0);
ZZ_MARK_TARGET(0x8002F05C,0x8002F07C,ZZ_2EC68_3F4);
ZZ_MARK_TARGET(0x8002F07C,0x8002F0A4,ZZ_2EC68_414);
ZZ_MARK_TARGET(0x8002F0A4,0x8002F0AC,ZZ_2EC68_43C);
ZZ_MARK_TARGET(0x8002F0AC,0x8002F0C8,ZZ_2EC68_444);
ZZ_MARK_TARGET(0x8002F0C8,0x8002F0D8,ZZ_2EC68_460);
ZZ_MARK_TARGET(0x8002F0D8,0x8002F0EC,ZZ_2EC68_470);
ZZ_MARK_TARGET(0x8002F0EC,0x8002F0F4,ZZ_2EC68_484);
ZZ_MARK_TARGET(0x8002F0F4,0x8002F114,ZZ_2EC68_48C);
ZZ_MARK_TARGET(0x8002F114,0x8002F12C,ZZ_2EC68_4AC);
ZZ_MARK_TARGET(0x8002F12C,0x8002F150,ZZ_2EC68_4C4);
ZZ_MARK_TARGET(0x8002F150,0x8002F158,ZZ_2EC68_4E8);
ZZ_MARK_TARGET(0x8002F158,0x8002F17C,ZZ_2EC68_4F0);
ZZ_MARK_TARGET(0x8002F17C,0x8002F180,ZZ_2EC68_514);
ZZ_MARK_TARGET(0x8002F180,0x8002F190,ZZ_2EC68_518);
ZZ_MARK_TARGET(0x8002F190,0x8002F1B0,ZZ_2EC68_528);
ZZ_MARK_TARGET(0x8002F1B0,0x8002F1B8,ZZ_2EC68_548);
ZZ_MARK_TARGET(0x8002F1B8,0x8002F2D8,ZZ_2EC68_550);
ZZ_MARK_TARGET(0x8002F2D8,0x8002F2FC,ZZ_2EC68_670);
ZZ_MARK_TARGET(0x8002F2FC,0x8002F308,ZZ_2EC68_694);
ZZ_MARK_TARGET(0x8002F308,0x8002F328,ZZ_2EC68_6A0);
ZZ_MARK_TARGET(0x8002F328,0x8002F354,ZZ_2EC68_6C0);
ZZ_MARK_TARGET(0x8002F354,0x8002F370,ZZ_2EC68_6EC);
ZZ_MARK_TARGET(0x8002F370,0x8002F39C,ZZ_2EC68_708);
ZZ_MARK_TARGET(0x8002F39C,0x8002F3CC,ZZ_2EC68_734);
ZZ_MARK_TARGET(0x8002F3CC,0x8002F424,ZZ_2EC68_764);
ZZ_MARK_TARGET(0x8002F424,0x8002F43C,ZZ_2EC68_7BC);
ZZ_MARK_TARGET(0x8002F43C,0x8002F450,ZZ_2EC68_7D4);
ZZ_MARK_TARGET(0x8002F450,0x8002F468,ZZ_2EC68_7E8);
ZZ_MARK_TARGET(0x8002F468,0x8002F498,ZZ_2EC68_800);
ZZ_MARK_TARGET(0x8002F498,0x8002F4A0,ZZ_2EC68_830);
ZZ_MARK_TARGET(0x8002F4A0,0x8002F4C8,ZZ_2EC68_838);
ZZ_MARK_TARGET(0x8002F4C8,0x8002F4DC,ZZ_2EC68_860);
ZZ_MARK_TARGET(0x8002F4DC,0x8002F4E4,ZZ_2EC68_874);
ZZ_MARK_TARGET(0x8002F4E4,0x8002F4EC,ZZ_2EC68_87C);
ZZ_MARK_TARGET(0x8002F4EC,0x8002F4F0,ZZ_2EC68_884);
ZZ_MARK_TARGET(0x8002F4F0,0x8002F530,ZZ_2EC68_888);
ZZ_MARK_TARGET(0x8002F530,0x8002F588,ZZ_2EC68_8C8);
ZZ_MARK_TARGET(0x8002F588,0x8002F5BC,ZZ_2EC68_920);
ZZ_MARK_TARGET(0x8002F5BC,0x8002F5D0,ZZ_2EC68_954);
ZZ_MARK_TARGET(0x8002F5D0,0x8002F5DC,ZZ_2EC68_968);
ZZ_MARK_TARGET(0x8002F5DC,0x8002F600,ZZ_2EC68_974);
ZZ_MARK_TARGET(0x8002F600,0x8002F608,ZZ_2EC68_998);
ZZ_MARK_TARGET(0x8002F608,0x8002F624,ZZ_2EC68_9A0);
ZZ_MARK_TARGET(0x8002F624,0x8002F62C,ZZ_2EC68_9BC);
ZZ_MARK_TARGET(0x8002F62C,0x8002F63C,ZZ_2EC68_9C4);
ZZ_MARK_TARGET(0x8002F63C,0x8002F650,ZZ_2EC68_9D4);
ZZ_MARK_TARGET(0x8002F650,0x8002F664,ZZ_2EC68_9E8);
ZZ_MARK_TARGET(0x8002F664,0x8002F694,ZZ_2EC68_9FC);
ZZ_MARK_TARGET(0x8002F694,0x8002F6A8,ZZ_2EC68_A2C);
