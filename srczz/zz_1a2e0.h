#ifdef ZZ_INCLUDE_CODE
ZZ_1A2E0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26296); //+ 0x66B8
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 30996); //+ 0x7914
	SP -= 56;
	EMU_Write32(SP + 48,S4); //+ 0x30
	EMU_Write32(SP + 52,RA); //+ 0x34
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 40,S2); //+ 0x28
	EMU_Write32(SP + 36,S1); //+ 0x24
	EMU_Write32(SP + 32,S0); //+ 0x20
	V0 = EMU_ReadU16(V0);
	S3 = EMU_ReadU32(V1 + 16); //+ 0x10
	if (!V0)
	{
		S4 = A0;
		ZZ_CLOCKCYCLES(15,0x8001A43C);
		goto ZZ_1A2E0_15C;
	}
	S4 = A0;
	S0 = 0x80050000;
	S0 += 30692;
	RA = 0x8001A32C; //ZZ_1A2E0_4C
	A0 = S0;
	ZZ_CLOCKCYCLES(19,0x80042E9C);
	goto ZZ_42E9C;
ZZ_1A2E0_4C:
	RA = 0x8001A334; //ZZ_1A2E0_54
	A0 = S0 + 272;
	ZZ_CLOCKCYCLES(2,0x80042ECC);
	goto ZZ_42ECC;
ZZ_1A2E0_54:
	A0 = S3 + 4;
	A1 = 0x1F800000;
	A1 |= 0x100;
	RA = 0x8001A348; //ZZ_1A2E0_68
	A2 = 0x100;
	ZZ_CLOCKCYCLES(5,0x80033FBC);
	goto ZZ_33FBC;
ZZ_1A2E0_68:
	S2 = 0x1F800000;
	S2 |= 0x300;
	V0 = EMU_ReadU32(S3);
	if ((int32_t)V0 <= 0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(6,0x8001A390);
		goto ZZ_1A2E0_B0;
	}
	S0 = R0;
	S1 = S3;
	A1 = S2;
	ZZ_CLOCKCYCLES(8,0x8001A368);
ZZ_1A2E0_88:
	A2 = 0x6;
	S2 += 16;
	A0 = EMU_ReadU32(S1 + 20); //+ 0x14
	RA = 0x8001A37C; //ZZ_1A2E0_9C
	S1 += 64;
	ZZ_CLOCKCYCLES(5,0x80033FBC);
	goto ZZ_33FBC;
ZZ_1A2E0_9C:
	V0 = EMU_ReadU32(S3);
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)V0;
	if (V0)
	{
		A1 = S2;
		ZZ_CLOCKCYCLES(5,0x8001A368);
		goto ZZ_1A2E0_88;
	}
	A1 = S2;
	ZZ_CLOCKCYCLES(5,0x8001A390);
ZZ_1A2E0_B0:
	V0 = EMU_ReadU32(GP + 728); //+ 0x2D8
	V1 = EMU_ReadU32(GP + 732); //+ 0x2DC
	A0 = EMU_ReadU32(GP + 104); //+ 0x68
	A1 = EMU_ReadU32(GP + 108); //+ 0x6C
	A2 = EMU_ReadU32(GP + 112); //+ 0x70
	V0 = (int32_t)V0 >> 8;
	AT = 0x1F800000;
	EMU_Write32(AT + 72,V0); //+ 0x48
	V0 = EMU_ReadU32(GP + 736); //+ 0x2E0
	V1 = (int32_t)V1 >> 8;
	AT = 0x1F800000;
	EMU_Write32(AT + 76,V1); //+ 0x4C
	V1 = EMU_ReadU32(GP + 100); //+ 0x64
	AT = 0x1F800000;
	EMU_Write32(AT + 88,A0); //+ 0x58
	AT = 0x1F800000;
	EMU_Write32(AT + 92,A1); //+ 0x5C
	AT = 0x1F800000;
	EMU_Write32(AT + 96,A2); //+ 0x60
	V0 = (int32_t)V0 >> 8;
	AT = 0x1F800000;
	EMU_Write32(AT + 80,V0); //+ 0x50
	AT = 0x1F800000;
	EMU_Write32(AT + 84,V1); //+ 0x54
	RA = 0x8001A3F8; //ZZ_1A2E0_118
	ZZ_CLOCKCYCLES(26,0x80016E18);
	goto ZZ_16E18;
ZZ_1A2E0_118:
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 26296); //+ 0x66B8
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 30928); //+ 0x78D0
	A3 = 0x80050000;
	A3 = EMU_ReadU32(A3 + 31072); //+ 0x7960
	A1 = S4;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = 0x80050000;
	V0 += 6004;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = A2 >> 31;
	A2 += V0;
	A2 = (int32_t)A2 >> 1;
	V0 = 0x800;
	RA = 0x8001A43C; //ZZ_1A2E0_15C
	A2 = V0 - A2;
	ZZ_CLOCKCYCLES(17,0x800375EC);
	goto ZZ_375EC;
ZZ_1A2E0_15C:
	RA = EMU_ReadU32(SP + 52); //+ 0x34
	S4 = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 56;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001A2E0,0x8001A32C,ZZ_1A2E0);
ZZ_MARK_TARGET(0x8001A32C,0x8001A334,ZZ_1A2E0_4C);
ZZ_MARK_TARGET(0x8001A334,0x8001A348,ZZ_1A2E0_54);
ZZ_MARK_TARGET(0x8001A348,0x8001A368,ZZ_1A2E0_68);
ZZ_MARK_TARGET(0x8001A368,0x8001A37C,ZZ_1A2E0_88);
ZZ_MARK_TARGET(0x8001A37C,0x8001A390,ZZ_1A2E0_9C);
ZZ_MARK_TARGET(0x8001A390,0x8001A3F8,ZZ_1A2E0_B0);
ZZ_MARK_TARGET(0x8001A3F8,0x8001A43C,ZZ_1A2E0_118);
ZZ_MARK_TARGET(0x8001A43C,0x8001A460,ZZ_1A2E0_15C);
