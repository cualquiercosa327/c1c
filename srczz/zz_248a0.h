#ifdef ZZ_INCLUDE_CODE
ZZ_248A0:
	SP -= 64;
	EMU_Write32(SP + 56,RA); //+ 0x38
	EMU_Write32(SP + 52,S1); //+ 0x34
	EMU_Write32(SP + 48,S0); //+ 0x30
	V0 = EMU_ReadU32(A0);
	EMU_Write32(SP + 24,V0); //+ 0x18
	V0 = EMU_ReadU32(A0 + 4); //+ 0x4
	S0 = A1;
	EMU_Write32(SP + 28,V0); //+ 0x1C
	V0 = EMU_ReadU32(A0 + 8); //+ 0x8
	S1 = A2;
	A0 = 0x80050000;
	A0 += 30692;
	if (!S1)
	{
		EMU_Write32(SP + 32,V0); //+ 0x20
		ZZ_CLOCKCYCLES(16,0x800248E8);
		goto ZZ_248A0_48;
	}
	EMU_Write32(SP + 32,V0); //+ 0x20
	A0 = 0x80050000;
	A0 += 30788;
	ZZ_CLOCKCYCLES(18,0x800248E8);
ZZ_248A0_48:
	RA = 0x800248F0; //ZZ_248A0_50
	ZZ_CLOCKCYCLES(2,0x80042E9C);
	goto ZZ_42E9C;
ZZ_248A0_50:
	A0 = 0x80050000;
	A0 += 29292;
	RA = 0x80024900; //ZZ_248A0_60
	ZZ_CLOCKCYCLES(4,0x80042F2C);
	goto ZZ_42F2C;
ZZ_248A0_60:
	if (!S1)
	{
		ZZ_CLOCKCYCLES(2,0x80024944);
		goto ZZ_248A0_A4;
	}
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 30856); //+ 0x7888
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30860); //+ 0x788C
	V0 = V0 - V1;
	V1 = EMU_ReadU32(SP + 28); //+ 0x1C
	V0 = (int32_t)V0 >> 8;
	EMU_Write16(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = V1 - A0;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30864); //+ 0x7890
	V1 = (int32_t)V1 >> 8;
	ZZ_CLOCKCYCLES(17,0x8002497C);
	goto ZZ_248A0_DC;
ZZ_248A0_A4:
	V0 = EMU_ReadU32(SP + 24); //+ 0x18
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 30820); //+ 0x7864
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30824); //+ 0x7868
	V0 = V0 - V1;
	V1 = EMU_ReadU32(SP + 28); //+ 0x1C
	V0 = (int32_t)V0 >> 8;
	EMU_Write16(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	V1 = V1 - A0;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 30828); //+ 0x786C
	V1 = (int32_t)V1 >> 8;
	ZZ_CLOCKCYCLES(14,0x8002497C);
ZZ_248A0_DC:
	EMU_Write16(SP + 18,V1); //+ 0x12
	V0 = V0 - A0;
	V0 = (int32_t)V0 >> 8;
	EMU_Write16(SP + 20,V0); //+ 0x14
	A0 = SP + 16;
	A1 = S0;
	RA = 0x8002499C; //ZZ_248A0_FC
	A2 = SP + 40;
	ZZ_CLOCKCYCLES(8,0x80042FEC);
	goto ZZ_42FEC;
ZZ_248A0_FC:
	V0 = EMU_ReadU32(S0);
	V1 = EMU_ReadU32(S0 + 4); //+ 0x4
	V0 <<= 8;
	V1 <<= 8;
	EMU_Write32(S0,V0);
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	V1 = -V1;
	EMU_Write32(S0 + 4,V1); //+ 0x4
	V0 <<= 8;
	EMU_Write32(S0 + 8,V0); //+ 0x8
	V0 = -255;
	RA = EMU_ReadU32(SP + 56); //+ 0x38
	S1 = EMU_ReadU32(SP + 52); //+ 0x34
	S0 = EMU_ReadU32(SP + 48); //+ 0x30
	SP += 64;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(17);
	ZZ_JUMPREGISTER(0x80030AE4,ZZ_30840_2A4);
	//ZZ_JUMPREGISTER(0x800237E4,ZZ_201DC_3608);
	ZZ_JUMPREGISTER(0x80030638,ZZ_304C8_170);
	ZZ_JUMPREGISTER(0x800310D8,ZZ_30CC0_418);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800248A0,0x800248E8,ZZ_248A0);
ZZ_MARK_TARGET(0x800248E8,0x800248F0,ZZ_248A0_48);
ZZ_MARK_TARGET(0x800248F0,0x80024900,ZZ_248A0_50);
ZZ_MARK_TARGET(0x80024900,0x80024944,ZZ_248A0_60);
ZZ_MARK_TARGET(0x80024944,0x8002497C,ZZ_248A0_A4);
ZZ_MARK_TARGET(0x8002497C,0x8002499C,ZZ_248A0_DC);
ZZ_MARK_TARGET(0x8002499C,0x800249E0,ZZ_248A0_FC);
