#ifdef ZZ_INCLUDE_CODE
ZZ_2A3EC:
	SP -= 152;
	EMU_Write32(SP + 140,S7); //+ 0x8C
	S7 = A0;
	EMU_Write32(SP + 120,S2); //+ 0x78
	S2 = A1;
	EMU_Write32(SP + 148,RA); //+ 0x94
	EMU_Write32(SP + 144,FP); //+ 0x90
	EMU_Write32(SP + 136,S6); //+ 0x88
	EMU_Write32(SP + 132,S5); //+ 0x84
	EMU_Write32(SP + 128,S4); //+ 0x80
	EMU_Write32(SP + 124,S3); //+ 0x7C
	EMU_Write32(SP + 116,S1); //+ 0x74
	EMU_Write32(SP + 112,S0); //+ 0x70
	EMU_Write32(SP + 64,A3); //+ 0x40
	EMU_Write32(SP + 72,R0); //+ 0x48
	V0 = EMU_ReadU32(S2 + 4); //+ 0x4
	S4 = A2;
	EMU_Write32(SP + 80,R0); //+ 0x50
	V0 = EMU_ReadU32(V0 + 20); //+ 0x14
	S3 = -1;
	EMU_Write32(SP + 88,V0); //+ 0x58
	V0 = 0x1;
	EMU_Write32(S4 + 48,V0); //+ 0x30
	V0 = EMU_ReadU32(S4 + 40); //+ 0x28
	V0 = -V0;
	V0 <<= 4;
	EMU_Write32(SP + 96,V0); //+ 0x60
	V0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	S6 = EMU_ReadU32(SP + 88); //+ 0x58
	if ((int32_t)V0 <= 0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(32,0x8002A630);
		goto ZZ_2A3EC_244;
	}
	S0 = R0;
	S1 = S2;
	ZZ_CLOCKCYCLES(33,0x8002A470);
ZZ_2A3EC_84:
	V0 = EMU_ReadU32(S7);
	V1 = EMU_ReadS16(S1 + 50); //+ 0x32
	A0 = EMU_ReadU32(S6);
	V0 = (int32_t)V0 >> 8;
	V1 += A0;
	V0 = V0 - V1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(S7 + 8); //+ 0x8
	V1 = EMU_ReadS16(S1 + 54); //+ 0x36
	A0 = EMU_ReadU32(S6 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	V1 += A0;
	V0 = V0 - V1;
	EMU_Write32(SP + 24,V0); //+ 0x18
	A0 = EMU_ReadS16(S1 + 58); //+ 0x3A
	RA = 0x8002A4B4; //ZZ_2A3EC_C8
	ZZ_CLOCKCYCLES(17,0x8003905C);
	goto ZZ_3905C;
ZZ_2A3EC_C8:
	EMU_Write32(SP + 48,V0); //+ 0x30
	A0 = EMU_ReadS16(S1 + 58); //+ 0x3A
	RA = 0x8002A4C4; //ZZ_2A3EC_D8
	ZZ_CLOCKCYCLES(4,0x800390D0);
	goto ZZ_390D0;
ZZ_2A3EC_D8:
	A0 = EMU_ReadU32(SP + 16); //+ 0x10
	V1 = EMU_ReadU32(SP + 48); //+ 0x30
	EMU_SMultiply(A0,V1);
	A0 = LO;
	V1 = EMU_ReadU32(SP + 24); //+ 0x18
	EMU_SMultiply(V1,V0);
	T0 = EMU_ReadU32(SP + 96); //+ 0x60
	EMU_Write32(SP + 56,V0); //+ 0x38
	V0 = LO;
	A0 += V0;
	A0 = T0 - A0;
	V0 = EMU_ReadS16(S2 + 48); //+ 0x30
	if ((int32_t)A0 >= 0)
	{
		A1 = A0;
		ZZ_CLOCKCYCLES(16,0x8002A508);
		goto ZZ_2A3EC_11C;
	}
	A1 = A0;
	A1 = -A1;
	ZZ_CLOCKCYCLES(17,0x8002A508);
ZZ_2A3EC_11C:
	if ((int32_t)V0 <= 0)
	{
		ZZ_CLOCKCYCLES(2,0x8002A554);
		goto ZZ_2A3EC_168;
	}
	if (S0)
	{
		ZZ_CLOCKCYCLES(4,0x8002A52C);
		goto ZZ_2A3EC_140;
	}
	if ((int32_t)A0 <= 0)
	{
		V0 = 0x10000;
		ZZ_CLOCKCYCLES(6,0x8002A52C);
		goto ZZ_2A3EC_140;
	}
	V0 = 0x10000;
	V0 |= 0xF400;
	V0 = (int32_t)V0 < (int32_t)A0;
	ZZ_CLOCKCYCLES(9,0x8002A56C);
	goto ZZ_2A3EC_180;
ZZ_2A3EC_140:
	V0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	V0 -= 1;
	if (S0 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002A5C0);
		goto ZZ_2A3EC_1D4;
	}
	if ((int32_t)A0 >= 0)
	{
		V0 = 0xFFFE0000;
		ZZ_CLOCKCYCLES(7,0x8002A5C0);
		goto ZZ_2A3EC_1D4;
	}
	V0 = 0xFFFE0000;
	V0 |= 0xC00;
	V0 = (int32_t)A0 < (int32_t)V0;
	ZZ_CLOCKCYCLES(10,0x8002A5A0);
	goto ZZ_2A3EC_1B4;
ZZ_2A3EC_168:
	if (S0)
	{
		ZZ_CLOCKCYCLES(2,0x8002A57C);
		goto ZZ_2A3EC_190;
	}
	if ((int32_t)A0 >= 0)
	{
		V0 = 0xFFFE0000;
		ZZ_CLOCKCYCLES(4,0x8002A57C);
		goto ZZ_2A3EC_190;
	}
	V0 = 0xFFFE0000;
	V0 |= 0xC00;
	V0 = (int32_t)A0 < (int32_t)V0;
	ZZ_CLOCKCYCLES(6,0x8002A56C);
ZZ_2A3EC_180:
	if (!V0)
	{
		S3 = R0;
		ZZ_CLOCKCYCLES(2,0x8002A630);
		goto ZZ_2A3EC_244;
	}
	S3 = R0;
	EMU_Write32(S4 + 48,R0); //+ 0x30
	ZZ_CLOCKCYCLES(4,0x8002A630);
	goto ZZ_2A3EC_244;
ZZ_2A3EC_190:
	V0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	V0 -= 1;
	if (S0 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002A5C0);
		goto ZZ_2A3EC_1D4;
	}
	if ((int32_t)A0 <= 0)
	{
		V0 = 0x10000;
		ZZ_CLOCKCYCLES(7,0x8002A5C0);
		goto ZZ_2A3EC_1D4;
	}
	V0 = 0x10000;
	V0 |= 0xF400;
	V0 = (int32_t)V0 < (int32_t)A0;
	ZZ_CLOCKCYCLES(9,0x8002A5A0);
ZZ_2A3EC_1B4:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002A5AC);
		goto ZZ_2A3EC_1C0;
	}
	EMU_Write32(S4 + 48,R0); //+ 0x30
	ZZ_CLOCKCYCLES(3,0x8002A5AC);
ZZ_2A3EC_1C0:
	V0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	V0 <<= 8;
	S3 = V0 - 1;
	ZZ_CLOCKCYCLES(5,0x8002A630);
	goto ZZ_2A3EC_244;
ZZ_2A3EC_1D4:
	if (!S0)
	{
		V0 = (int32_t)A1 < (int32_t)S5;
		ZZ_CLOCKCYCLES(2,0x8002A610);
		goto ZZ_2A3EC_224;
	}
	V0 = (int32_t)A1 < (int32_t)S5;
	if (!V0)
	{
		V0 = A0 ^ FP;
		ZZ_CLOCKCYCLES(4,0x8002A61C);
		goto ZZ_2A3EC_230;
	}
	V0 = A0 ^ FP;
	if ((int32_t)V0 >= 0)
	{
		V0 = S5 << 8;
		ZZ_CLOCKCYCLES(6,0x8002A610);
		goto ZZ_2A3EC_224;
	}
	V0 = S5 << 8;
	V1 = A1 + S5;
	EMU_SDivide(V0,V1);
	if (V1)
	{
		ZZ_CLOCKCYCLES(10,0x8002A5EC);
		goto ZZ_2A3EC_200;
	}
	EMU_Break(7168);
	ZZ_CLOCKCYCLES(11,0x8002A5EC);
ZZ_2A3EC_200:
	AT = -1;
	if (V1 != AT)
	{
		AT = 0x80000000;
		ZZ_CLOCKCYCLES(3,0x8002A604);
		goto ZZ_2A3EC_218;
	}
	AT = 0x80000000;
	if (V0 != AT)
	{
		ZZ_CLOCKCYCLES(5,0x8002A604);
		goto ZZ_2A3EC_218;
	}
	EMU_Break(6144);
	ZZ_CLOCKCYCLES(6,0x8002A604);
ZZ_2A3EC_218:
	V0 = LO;
	S3 += V0;
	ZZ_CLOCKCYCLES(3,0x8002A614);
	goto ZZ_2A3EC_228;
ZZ_2A3EC_224:
	S3 = S0 << 8;
	ZZ_CLOCKCYCLES(1,0x8002A614);
ZZ_2A3EC_228:
	FP = A0;
	S5 = A1;
	ZZ_CLOCKCYCLES(2,0x8002A61C);
ZZ_2A3EC_230:
	V0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)V0;
	if (V0)
	{
		S1 += 12;
		ZZ_CLOCKCYCLES(5,0x8002A470);
		goto ZZ_2A3EC_84;
	}
	S1 += 12;
	ZZ_CLOCKCYCLES(5,0x8002A630);
ZZ_2A3EC_244:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31004); //+ 0x791C
	if (S2 != V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002A64C);
		goto ZZ_2A3EC_260;
	}
	EMU_Write32(S4 + 4,R0); //+ 0x4
	ZZ_CLOCKCYCLES(7,0x8002A650);
	goto ZZ_2A3EC_264;
ZZ_2A3EC_260:
	EMU_Write32(S4 + 4,S2); //+ 0x4
	ZZ_CLOCKCYCLES(1,0x8002A650);
ZZ_2A3EC_264:
	T0 = EMU_ReadU32(SP + 168); //+ 0xA8
	if (!T0)
	{
		ZZ_CLOCKCYCLES(4,0x8002A6A0);
		goto ZZ_2A3EC_2B4;
	}
	T0 = EMU_ReadU32(SP + 64); //+ 0x40
	V0 = T0 & 0x1;
	if (!V0)
	{
		V0 = T0 & 0x2;
		ZZ_CLOCKCYCLES(9,0x8002A68C);
		goto ZZ_2A3EC_2A0;
	}
	V0 = T0 & 0x2;
	T0 = EMU_ReadU8(S2 + 28); //+ 0x1C
	EMU_Write32(SP + 72,T0); //+ 0x48
	T0 = EMU_ReadU32(SP + 64); //+ 0x40
	V0 = T0 & 0x2;
	ZZ_CLOCKCYCLES(15,0x8002A68C);
ZZ_2A3EC_2A0:
	if (!V0)
	{
		ZZ_CLOCKCYCLES(2,0x8002A6A0);
		goto ZZ_2A3EC_2B4;
	}
	T0 = EMU_ReadU8(S2 + 29); //+ 0x1D
	EMU_Write32(SP + 80,T0); //+ 0x50
	ZZ_CLOCKCYCLES(5,0x8002A6A0);
ZZ_2A3EC_2B4:
	T0 = EMU_ReadU32(SP + 72); //+ 0x48
	V1 = (int32_t)S3 >> 8;
	V0 = (int32_t)V1 < (int32_t)T0;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8002A6DC);
		goto ZZ_2A3EC_2F0;
	}
	if (T0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(7,0x8002A7F8);
		goto ZZ_2A3EC_40C;
	}
	V0 = R0;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31004); //+ 0x791C
	if (S2 != V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(12,0x8002A7F8);
		goto ZZ_2A3EC_40C;
	}
	V0 = R0;
	S3 = R0;
	EMU_Write32(S4 + 48,R0); //+ 0x30
	ZZ_CLOCKCYCLES(15,0x8002A720);
	goto ZZ_2A3EC_334;
ZZ_2A3EC_2F0:
	A0 = EMU_ReadU16(S2 + 30); //+ 0x1E
	T0 = EMU_ReadU32(SP + 80); //+ 0x50
	V0 = A0 - T0;
	V0 = (int32_t)V1 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x8002A720);
		goto ZZ_2A3EC_334;
	}
	if (T0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(9,0x8002A7F8);
		goto ZZ_2A3EC_40C;
	}
	V0 = R0;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 31004); //+ 0x791C
	if (S2 != V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(14,0x8002A7F8);
		goto ZZ_2A3EC_40C;
	}
	V0 = R0;
	V0 = A0 << 8;
	S3 = V0 - 1;
	EMU_Write32(S4 + 48,R0); //+ 0x30
	ZZ_CLOCKCYCLES(17,0x8002A720);
ZZ_2A3EC_334:
	A2 = 0x80050000;
	A2 = EMU_ReadU32(A2 + 26292); //+ 0x66B4
	V1 = EMU_ReadU32(S4 + 36); //+ 0x24
	V0 = EMU_ReadU32(A2 + 128); //+ 0x80
	T0 = EMU_ReadU32(SP + 88); //+ 0x58
	V0 += V1;
	V0 = (int32_t)V0 >> 8;
	V1 = (int32_t)S3 >> 8;
	A0 = V1 << 1;
	A0 += V1;
	A0 <<= 2;
	A0 += S2;
	V1 = EMU_ReadU32(T0);
	A1 = EMU_ReadS16(A0 + 50); //+ 0x32
	V0 = V0 - V1;
	V0 = V0 - A1;
	EMU_Write32(SP + 32,V0); //+ 0x20
	V0 = EMU_ReadU32(A2 + 132); //+ 0x84
	V1 = EMU_ReadU32(S4 + 44); //+ 0x2C
	A1 = EMU_ReadS16(A0 + 52); //+ 0x34
	V0 += V1;
	V1 = EMU_ReadU32(T0 + 4); //+ 0x4
	V0 = (int32_t)V0 >> 8;
	V0 = V0 - V1;
	V0 = V0 - A1;
	EMU_Write32(SP + 36,V0); //+ 0x24
	V0 = EMU_ReadU32(A2 + 136); //+ 0x88
	V1 = EMU_ReadU32(S4 + 40); //+ 0x28
	A0 = EMU_ReadS16(A0 + 54); //+ 0x36
	V0 += V1;
	V1 = EMU_ReadU32(T0 + 8); //+ 0x8
	V0 = (int32_t)V0 >> 8;
	V0 = V0 - V1;
	V0 = V0 - A0;
	EMU_Write32(SP + 40,V0); //+ 0x28
	EMU_Write32(S4,S2);
	EMU_Write32(S4 + 8,S3); //+ 0x8
	V0 = EMU_ReadU32(SP + 32); //+ 0x20
	EMU_SMultiply(V0,V0);
	V1 = LO;
	V0 = EMU_ReadU32(SP + 36); //+ 0x24
	EMU_SMultiply(V0,V0);
	A0 = LO;
	V0 = EMU_ReadU32(SP + 40); //+ 0x28
	EMU_SMultiply(V0,V0);
	V1 += A0;
	A0 = LO;
	RA = 0x8002A7F0; //ZZ_2A3EC_404
	A0 += V1;
	ZZ_CLOCKCYCLES(52,0x80042B9C);
	goto ZZ_42B9C;
ZZ_2A3EC_404:
	EMU_Write32(S4 + 24,V0); //+ 0x18
	V0 = 0x1;
	ZZ_CLOCKCYCLES(2,0x8002A7F8);
ZZ_2A3EC_40C:
	RA = EMU_ReadU32(SP + 148); //+ 0x94
	FP = EMU_ReadU32(SP + 144); //+ 0x90
	S7 = EMU_ReadU32(SP + 140); //+ 0x8C
	S6 = EMU_ReadU32(SP + 136); //+ 0x88
	S5 = EMU_ReadU32(SP + 132); //+ 0x84
	S4 = EMU_ReadU32(SP + 128); //+ 0x80
	S3 = EMU_ReadU32(SP + 124); //+ 0x7C
	S2 = EMU_ReadU32(SP + 120); //+ 0x78
	S1 = EMU_ReadU32(SP + 116); //+ 0x74
	S0 = EMU_ReadU32(SP + 112); //+ 0x70
	SP += 152;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x8002AD70,ZZ_2A82C_544);
	ZZ_JUMPREGISTER(0x8002AFDC,ZZ_2A82C_7B0);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8002A3EC,0x8002A470,ZZ_2A3EC);
ZZ_MARK_TARGET(0x8002A470,0x8002A4B4,ZZ_2A3EC_84);
ZZ_MARK_TARGET(0x8002A4B4,0x8002A4C4,ZZ_2A3EC_C8);
ZZ_MARK_TARGET(0x8002A4C4,0x8002A508,ZZ_2A3EC_D8);
ZZ_MARK_TARGET(0x8002A508,0x8002A52C,ZZ_2A3EC_11C);
ZZ_MARK_TARGET(0x8002A52C,0x8002A554,ZZ_2A3EC_140);
ZZ_MARK_TARGET(0x8002A554,0x8002A56C,ZZ_2A3EC_168);
ZZ_MARK_TARGET(0x8002A56C,0x8002A57C,ZZ_2A3EC_180);
ZZ_MARK_TARGET(0x8002A57C,0x8002A5A0,ZZ_2A3EC_190);
ZZ_MARK_TARGET(0x8002A5A0,0x8002A5AC,ZZ_2A3EC_1B4);
ZZ_MARK_TARGET(0x8002A5AC,0x8002A5C0,ZZ_2A3EC_1C0);
ZZ_MARK_TARGET(0x8002A5C0,0x8002A5EC,ZZ_2A3EC_1D4);
ZZ_MARK_TARGET(0x8002A5EC,0x8002A604,ZZ_2A3EC_200);
ZZ_MARK_TARGET(0x8002A604,0x8002A610,ZZ_2A3EC_218);
ZZ_MARK_TARGET(0x8002A610,0x8002A614,ZZ_2A3EC_224);
ZZ_MARK_TARGET(0x8002A614,0x8002A61C,ZZ_2A3EC_228);
ZZ_MARK_TARGET(0x8002A61C,0x8002A630,ZZ_2A3EC_230);
ZZ_MARK_TARGET(0x8002A630,0x8002A64C,ZZ_2A3EC_244);
ZZ_MARK_TARGET(0x8002A64C,0x8002A650,ZZ_2A3EC_260);
ZZ_MARK_TARGET(0x8002A650,0x8002A68C,ZZ_2A3EC_264);
ZZ_MARK_TARGET(0x8002A68C,0x8002A6A0,ZZ_2A3EC_2A0);
ZZ_MARK_TARGET(0x8002A6A0,0x8002A6DC,ZZ_2A3EC_2B4);
ZZ_MARK_TARGET(0x8002A6DC,0x8002A720,ZZ_2A3EC_2F0);
ZZ_MARK_TARGET(0x8002A720,0x8002A7F0,ZZ_2A3EC_334);
ZZ_MARK_TARGET(0x8002A7F0,0x8002A7F8,ZZ_2A3EC_404);
ZZ_MARK_TARGET(0x8002A7F8,0x8002A82C,ZZ_2A3EC_40C);
