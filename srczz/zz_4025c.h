#ifdef ZZ_INCLUDE_CODE
ZZ_4025C:
	V0 = 0x80050000;
	V0 = EMU_ReadU8(V0 + 19054); //+ 0x4A6E
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	V0 = V0 < 2;
	if (V0)
	{
		EMU_Write32(SP + 20,RA); //+ 0x14
		ZZ_CLOCKCYCLES(8,0x80040298);
		goto ZZ_4025C_3C;
	}
	EMU_Write32(SP + 20,RA); //+ 0x14
	A0 = 0x80010000;
	A0 += 4696;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19048); //+ 0x4A68
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x80040298; //ZZ_4025C_3C
	A1 = S0;
	ZZ_CLOCKCYCLES_JR(15);
	ZZ_JUMPREGISTER(0x8003D730,ZZ_3D730);
	ZZ_JUMPREGISTER_END();
ZZ_4025C_3C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19044); //+ 0x4A64
	V0 = EMU_ReadU32(V0 + 60); //+ 0x3C
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x800402B4; //ZZ_4025C_58
	A0 = S0;
	ZZ_CLOCKCYCLES_JR(7);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,800402AC)
	ZZ_JUMPREGISTER_END();
ZZ_4025C_58:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80016D30,ZZ_16D14_1C);
	ZZ_JUMPREGISTER(0x80017070,ZZ_16E5C_214);
	ZZ_JUMPREGISTER(0x80032374,ZZ_322CC_A8);
	ZZ_JUMPREGISTER(0x80032E3C,ZZ_32DFC_40);
	ZZ_JUMPREGISTER(0x80016A58,ZZ_169F8_60);
	ZZ_JUMPREGISTER(0x80032470,ZZ_322CC_1A4);
	ZZ_JUMPREGISTER(0x8001A93C,ZZ_1A850_EC);
	ZZ_JUMPREGISTER(0x8001AA4C,ZZ_1A850_1FC);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004025C,0x80040298,ZZ_4025C);
ZZ_MARK_TARGET(0x80040298,0x800402B4,ZZ_4025C_3C);
ZZ_MARK_TARGET(0x800402B4,0x800402C8,ZZ_4025C_58);
