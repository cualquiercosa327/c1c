#ifdef ZZ_INCLUDE_CODE
ZZ_30CC0:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 15044); //+ 0xFFFFC53C
	SP -= 120;
	EMU_Write32(SP + 112,S4); //+ 0x70
	EMU_Write32(SP + 116,RA); //+ 0x74
	EMU_Write32(SP + 108,S3); //+ 0x6C
	EMU_Write32(SP + 104,S2); //+ 0x68
	EMU_Write32(SP + 100,S1); //+ 0x64
	EMU_Write32(SP + 96,S0); //+ 0x60
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x19;
	if (V1 != V0)
	{
		S4 = R0;
		ZZ_CLOCKCYCLES(13,0x80030D2C);
		goto ZZ_30CC0_6C;
	}
	S4 = R0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6420); //+ 0x1914
	V1 = V0 << 14;
	V1 = V1 - V0;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 + 6424); //+ 0x1918
	V1 >>= 8;
	EMU_Write16(GP + 584,V1); //+ 0x248
	A0 = V0 << 14;
	A0 = A0 - V0;
	A0 <<= 8;
	RA = 0x80030D2C; //ZZ_30CC0_6C
	A0 = (int32_t)A0 >> 16;
	ZZ_CLOCKCYCLES(27,0x800311B0);
	goto ZZ_311B0;
ZZ_30CC0_6C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 30996); //+ 0x7914
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80030D4C);
		goto ZZ_30CC0_8C;
	}
	A0 = EMU_ReadU32(V0 + 16); //+ 0x10
	RA = 0x80030D4C; //ZZ_30CC0_8C
	A0 += 772;
	ZZ_CLOCKCYCLES(8,0x800317F8);
	goto ZZ_317F8;
ZZ_30CC0_8C:
	V1 = EMU_ReadS16(GP + 616); //+ 0x268
	if (!V1)
	{
		ZZ_CLOCKCYCLES(4,0x80030DD4);
		goto ZZ_30CC0_114;
	}
	if ((int32_t)V1 >= 0)
	{
		V1 = -V1;
		ZZ_CLOCKCYCLES(6,0x80030D80);
		goto ZZ_30CC0_C0;
	}
	V1 = -V1;
	V0 = EMU_ReadS16(GP + 612); //+ 0x264
	V0 = (int32_t)V0 < (int32_t)V1;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80030D80);
		goto ZZ_30CC0_C0;
	}
	EMU_Write16(GP + 612,R0); //+ 0x264
	EMU_Write16(GP + 616,R0); //+ 0x268
	ZZ_CLOCKCYCLES(13,0x80030D80);
ZZ_30CC0_C0:
	A0 = EMU_ReadS16(GP + 616); //+ 0x268
	if ((int32_t)A0 <= 0)
	{
		V0 = 0x3FFF;
		ZZ_CLOCKCYCLES(4,0x80030DB0);
		goto ZZ_30CC0_F0;
	}
	V0 = 0x3FFF;
	V1 = EMU_ReadS16(GP + 612); //+ 0x264
	V0 = V0 - V1;
	V0 = (int32_t)V0 < (int32_t)A0;
	if (!V0)
	{
		V0 = 0x3FFF;
		ZZ_CLOCKCYCLES(10,0x80030DB0);
		goto ZZ_30CC0_F0;
	}
	V0 = 0x3FFF;
	EMU_Write16(GP + 612,V0); //+ 0x264
	EMU_Write16(GP + 616,R0); //+ 0x268
	ZZ_CLOCKCYCLES(12,0x80030DB0);
ZZ_30CC0_F0:
	V1 = EMU_ReadU16(GP + 612); //+ 0x264
	V0 = EMU_ReadU16(GP + 616); //+ 0x268
	V1 += V0;
	A0 = V1 << 16;
	A0 = (int32_t)A0 >> 23;
	EMU_Write16(GP + 612,V1); //+ 0x264
	RA = 0x80030DD4; //ZZ_30CC0_114
	A1 = A0;
	ZZ_CLOCKCYCLES(9,0x8004B7D8);
	goto ZZ_4B7D8;
ZZ_30CC0_114:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 25612); //+ 0x640C
	V0 = 0x1;
	if (V1 != V0)
	{
		V0 = -1;
		ZZ_CLOCKCYCLES(5,0x80030E3C);
		goto ZZ_30CC0_17C;
	}
	V0 = -1;
	V1 = EMU_ReadU32(GP + 624); //+ 0x270
	V0 = -546;
	EMU_Write16(GP + 616,V0); //+ 0x268
	if (!V1)
	{
		ZZ_CLOCKCYCLES(10,0x80030E30);
		goto ZZ_30CC0_170;
	}
	V0 = EMU_ReadS16(GP + 608); //+ 0x260
	V0 = (int32_t)V0 < 2;
	if (V0)
	{
		V0 = 0x3;
		ZZ_CLOCKCYCLES(15,0x80030E30);
		goto ZZ_30CC0_170;
	}
	V0 = 0x3;
	V1 = EMU_ReadU32(GP + 708); //+ 0x2C4
	if (V1 != V0)
	{
		A1 = 0x2;
		ZZ_CLOCKCYCLES(19,0x80030E30);
		goto ZZ_30CC0_170;
	}
	A1 = 0x2;
	A0 = 0x80050000;
	A0 += 28368;
	RA = 0x80030E30; //ZZ_30CC0_170
	A2 = R0;
	ZZ_CLOCKCYCLES(23,0x80031A40);
	goto ZZ_31A40;
ZZ_30CC0_170:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 25612); //+ 0x640C
	V0 = -1;
	ZZ_CLOCKCYCLES(3,0x80030E3C);
ZZ_30CC0_17C:
	if (V1 != V0)
	{
		V0 = 0x667;
		ZZ_CLOCKCYCLES(2,0x80030E88);
		goto ZZ_30CC0_1C8;
	}
	V0 = 0x667;
	V1 = EMU_ReadU32(GP + 624); //+ 0x270
	EMU_Write16(GP + 616,V0); //+ 0x268
	if (!V1)
	{
		ZZ_CLOCKCYCLES(6,0x80030E88);
		goto ZZ_30CC0_1C8;
	}
	V0 = EMU_ReadS16(GP + 608); //+ 0x260
	V0 = (int32_t)V0 < 2;
	if (V0)
	{
		V0 = 0x3;
		ZZ_CLOCKCYCLES(11,0x80030E88);
		goto ZZ_30CC0_1C8;
	}
	V0 = 0x3;
	V1 = EMU_ReadU32(GP + 708); //+ 0x2C4
	if (V1 != V0)
	{
		A1 = 0x3;
		ZZ_CLOCKCYCLES(15,0x80030E88);
		goto ZZ_30CC0_1C8;
	}
	A1 = 0x3;
	A0 = 0x80050000;
	A0 += 28368;
	RA = 0x80030E88; //ZZ_30CC0_1C8
	A2 = R0;
	ZZ_CLOCKCYCLES(19,0x80031A40);
	goto ZZ_31A40;
ZZ_30CC0_1C8:
	A0 = 0x80050000;
	A0 += 28260;
	RA = 0x80030E98; //ZZ_30CC0_1D8
	ZZ_CLOCKCYCLES(4,0x800491E0);
	goto ZZ_491E0;
ZZ_30CC0_1D8:
	S1 = EMU_ReadU32(GP + 620); //+ 0x26C
	V1 = 0x80050000;
	V1 += 26628;
	V0 = S1 << 4;
	V0 += S1;
	V0 <<= 2;
	A0 = V0 + V1;
	V0 = (int32_t)S1 < 24;
	if (!V0)
	{
		S3 = 0x1;
		ZZ_CLOCKCYCLES(10,0x8003118C);
		goto ZZ_30CC0_4CC;
	}
	S3 = 0x1;
	S0 = A0 + 4;
	S2 = A0 + 24;
	ZZ_CLOCKCYCLES(12,0x80030EC8);
ZZ_30CC0_208:
	V1 = EMU_ReadU32(S0);
	V0 = V1 & 0x8;
	if (!V0)
	{
		V0 = V1 & 0x10;
		ZZ_CLOCKCYCLES(5,0x80031178);
		goto ZZ_30CC0_4B8;
	}
	V0 = V1 & 0x10;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(7,0x80030F18);
		goto ZZ_30CC0_258;
	}
	V0 = EMU_ReadU16(S0 + 16); //+ 0x10
	V0 -= 1;
	EMU_Write16(S0 + 16,V0); //+ 0x10
	V0 <<= 16;
	if (V0)
	{
		A0 = 0x1;
		ZZ_CLOCKCYCLES(14,0x80031178);
		goto ZZ_30CC0_4B8;
	}
	A0 = 0x1;
	A1 = S3 << S1;
	V0 = EMU_ReadU32(S0);
	V1 = -17;
	V0 &= V1;
	RA = 0x80030F18; //ZZ_30CC0_258
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(20,0x80047EE4);
	goto ZZ_47EE4;
ZZ_30CC0_258:
	AT = 0x80050000;
	AT += S1;
	V1 = EMU_ReadU8(AT + 28260); //+ 0x6E64
	V0 = 0x3;
	if (V1 != V0)
	{
		ZZ_CLOCKCYCLES(6,0x80030F74);
		goto ZZ_30CC0_2B4;
	}
	V0 = EMU_ReadU8(S0 + 12); //+ 0xC
	V0 -= 1;
	EMU_Write8(S0 + 12,V0); //+ 0xC
	V0 &= 0xFF;
	if (V0)
	{
		A0 = 0x1;
		ZZ_CLOCKCYCLES(13,0x80030F6C);
		goto ZZ_30CC0_2AC;
	}
	A0 = 0x1;
	A0 = R0;
	RA = 0x80030F58; //ZZ_30CC0_298
	A1 = S3 << S1;
	ZZ_CLOCKCYCLES(16,0x80047EE4);
	goto ZZ_47EE4;
ZZ_30CC0_298:
	V0 = EMU_ReadU32(S0);
	V1 = -9;
	V0 &= V1;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(5,0x8003113C);
	goto ZZ_30CC0_47C;
ZZ_30CC0_2AC:
	RA = 0x80030F74; //ZZ_30CC0_2B4
	A1 = S3 << S1;
	ZZ_CLOCKCYCLES(2,0x80047EE4);
	goto ZZ_47EE4;
ZZ_30CC0_2B4:
	EMU_Write32(SP + 20,R0); //+ 0x14
	V0 = EMU_ReadU32(S0);
	V0 &= 0x40;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(6,0x80031024);
		goto ZZ_30CC0_364;
	}
	V0 = EMU_ReadU16(S0 + 14); //+ 0xE
	A0 = EMU_ReadU16(S0 + 52); //+ 0x34
	V1 = EMU_ReadU32(S0 + 48); //+ 0x30
	V0 += A0;
	V1 -= 1;
	EMU_Write16(S0 + 14,V0); //+ 0xE
	if ((int32_t)V1 <= 0)
	{
		EMU_Write32(S0 + 48,V1); //+ 0x30
		ZZ_CLOCKCYCLES(14,0x80030FB4);
		goto ZZ_30CC0_2F4;
	}
	EMU_Write32(S0 + 48,V1); //+ 0x30
	S4 = 0x1;
	ZZ_CLOCKCYCLES(16,0x80030FC4);
	goto ZZ_30CC0_304;
ZZ_30CC0_2F4:
	V0 = EMU_ReadU32(S0);
	V1 = -65;
	V0 &= V1;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(4,0x80030FC4);
ZZ_30CC0_304:
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 |= 0x3;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(S0 + 8); //+ 0x8
	V0 = EMU_ReadU32(V0 + 204); //+ 0xCC
	V0 &= 0x200;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(11,0x80031004);
		goto ZZ_30CC0_344;
	}
	V0 = EMU_ReadU16(S0 + 14); //+ 0xE
	EMU_Write16(SP + 26,V0); //+ 0x1A
	EMU_Write16(SP + 24,V0); //+ 0x18
	ZZ_CLOCKCYCLES(16,0x80031024);
	goto ZZ_30CC0_364;
ZZ_30CC0_344:
	A1 = EMU_ReadS16(S0 + 14); //+ 0xE
	RA = 0x80031010; //ZZ_30CC0_350
	A0 = S2;
	ZZ_CLOCKCYCLES(3,0x80030078);
	goto ZZ_30078;
ZZ_30CC0_350:
	EMU_ReadLeft(V0 + 3,&V1); //+ 0x3
	EMU_ReadRight(V0,&V1);
	EMU_WriteLeft(SP + 27,V1); //+ 0x1B
	EMU_WriteRight(SP + 24,V1); //+ 0x18
	ZZ_CLOCKCYCLES(5,0x80031024);
ZZ_30CC0_364:
	V0 = EMU_ReadU32(S0);
	V0 &= 0x80;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x8003108C);
		goto ZZ_30CC0_3CC;
	}
	V0 = EMU_ReadU16(S0 + 18); //+ 0x12
	A0 = EMU_ReadU16(S0 + 60); //+ 0x3C
	V1 = EMU_ReadU32(S0 + 56); //+ 0x38
	V0 += A0;
	V1 -= 1;
	EMU_Write16(S0 + 18,V0); //+ 0x12
	if ((int32_t)V1 <= 0)
	{
		EMU_Write32(S0 + 56,V1); //+ 0x38
		ZZ_CLOCKCYCLES(13,0x80031060);
		goto ZZ_30CC0_3A0;
	}
	EMU_Write32(S0 + 56,V1); //+ 0x38
	S4 = 0x1;
	ZZ_CLOCKCYCLES(15,0x80031070);
	goto ZZ_30CC0_3B0;
ZZ_30CC0_3A0:
	V0 = EMU_ReadU32(S0);
	V1 = -129;
	V0 &= V1;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(4,0x80031070);
ZZ_30CC0_3B0:
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 |= 0x10;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU16(S0 + 18); //+ 0x12
	EMU_Write16(SP + 36,V0); //+ 0x24
	ZZ_CLOCKCYCLES(7,0x8003108C);
ZZ_30CC0_3CC:
	V0 = EMU_ReadU32(S0);
	V0 &= 0x200;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(5,0x80031120);
		goto ZZ_30CC0_460;
	}
	A2 = EMU_ReadU32(S0 + 8); //+ 0x8
	if (!A2)
	{
		ZZ_CLOCKCYCLES(9,0x80031120);
		goto ZZ_30CC0_460;
	}
	V0 = EMU_ReadU32(A2 + 128); //+ 0x80
	V1 = EMU_ReadU32(A2 + 132); //+ 0x84
	A0 = EMU_ReadU32(A2 + 136); //+ 0x88
	EMU_Write32(S0 + 32,V0); //+ 0x20
	EMU_Write32(S0 + 36,V1); //+ 0x24
	EMU_Write32(S0 + 40,A0); //+ 0x28
	A0 = A2 + 128;
	A1 = SP + 80;
	RA = 0x800310D8; //ZZ_30CC0_418
	A2 = 0x1;
	ZZ_CLOCKCYCLES(19,0x800248A0);
	goto ZZ_248A0;
ZZ_30CC0_418:
	V0 = EMU_ReadU32(SP + 80); //+ 0x50
	V1 = EMU_ReadU32(SP + 84); //+ 0x54
	A0 = EMU_ReadU32(SP + 88); //+ 0x58
	EMU_Write32(S0 + 20,V0); //+ 0x14
	EMU_Write32(S0 + 24,V1); //+ 0x18
	EMU_Write32(S0 + 28,A0); //+ 0x1C
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 |= 0x3;
	EMU_Write32(SP + 20,V0); //+ 0x14
	A1 = EMU_ReadS16(S0 + 14); //+ 0xE
	RA = 0x8003110C; //ZZ_30CC0_44C
	A0 = S2;
	ZZ_CLOCKCYCLES(13,0x80030078);
	goto ZZ_30078;
ZZ_30CC0_44C:
	EMU_ReadLeft(V0 + 3,&V1); //+ 0x3
	EMU_ReadRight(V0,&V1);
	EMU_WriteLeft(SP + 27,V1); //+ 0x1B
	EMU_WriteRight(SP + 24,V1); //+ 0x18
	ZZ_CLOCKCYCLES(5,0x80031120);
ZZ_30CC0_460:
	V0 = EMU_ReadU32(SP + 20); //+ 0x14
	if (!V0)
	{
		V0 = S3 << S1;
		ZZ_CLOCKCYCLES(4,0x8003113C);
		goto ZZ_30CC0_47C;
	}
	V0 = S3 << S1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	RA = 0x8003113C; //ZZ_30CC0_47C
	A0 = SP + 16;
	ZZ_CLOCKCYCLES(7,0x80047F5C);
	goto ZZ_47F5C;
ZZ_30CC0_47C:
	V1 = EMU_ReadU32(S0);
	V0 = V1 & 0x1;
	if (V0)
	{
		A0 = R0;
		ZZ_CLOCKCYCLES(5,0x80031160);
		goto ZZ_30CC0_4A0;
	}
	A0 = R0;
	if (S4)
	{
		V0 = V1 & 0x2;
		ZZ_CLOCKCYCLES(7,0x80031178);
		goto ZZ_30CC0_4B8;
	}
	V0 = V1 & 0x2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(9,0x80031178);
		goto ZZ_30CC0_4B8;
	}
	ZZ_CLOCKCYCLES(9,0x80031160);
ZZ_30CC0_4A0:
	RA = 0x80031168; //ZZ_30CC0_4A8
	A1 = S3 << S1;
	ZZ_CLOCKCYCLES(2,0x80047EE4);
	goto ZZ_47EE4;
ZZ_30CC0_4A8:
	V0 = EMU_ReadU32(S0);
	V1 = -9;
	V0 &= V1;
	EMU_Write32(S0,V0);
	ZZ_CLOCKCYCLES(4,0x80031178);
ZZ_30CC0_4B8:
	S1 += 1;
	S0 += 68;
	V0 = (int32_t)S1 < 24;
	if (V0)
	{
		S2 += 68;
		ZZ_CLOCKCYCLES(5,0x80030EC8);
		goto ZZ_30CC0_208;
	}
	S2 += 68;
	ZZ_CLOCKCYCLES(5,0x8003118C);
ZZ_30CC0_4CC:
	RA = EMU_ReadU32(SP + 116); //+ 0x74
	S4 = EMU_ReadU32(SP + 112); //+ 0x70
	S3 = EMU_ReadU32(SP + 108); //+ 0x6C
	S2 = EMU_ReadU32(SP + 104); //+ 0x68
	S1 = EMU_ReadU32(SP + 100); //+ 0x64
	S0 = EMU_ReadU32(SP + 96); //+ 0x60
	SP += 120;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x80017054,ZZ_16E5C_1F8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80030CC0,0x80030D2C,ZZ_30CC0);
ZZ_MARK_TARGET(0x80030D2C,0x80030D4C,ZZ_30CC0_6C);
ZZ_MARK_TARGET(0x80030D4C,0x80030D80,ZZ_30CC0_8C);
ZZ_MARK_TARGET(0x80030D80,0x80030DB0,ZZ_30CC0_C0);
ZZ_MARK_TARGET(0x80030DB0,0x80030DD4,ZZ_30CC0_F0);
ZZ_MARK_TARGET(0x80030DD4,0x80030E30,ZZ_30CC0_114);
ZZ_MARK_TARGET(0x80030E30,0x80030E3C,ZZ_30CC0_170);
ZZ_MARK_TARGET(0x80030E3C,0x80030E88,ZZ_30CC0_17C);
ZZ_MARK_TARGET(0x80030E88,0x80030E98,ZZ_30CC0_1C8);
ZZ_MARK_TARGET(0x80030E98,0x80030EC8,ZZ_30CC0_1D8);
ZZ_MARK_TARGET(0x80030EC8,0x80030F18,ZZ_30CC0_208);
ZZ_MARK_TARGET(0x80030F18,0x80030F58,ZZ_30CC0_258);
ZZ_MARK_TARGET(0x80030F58,0x80030F6C,ZZ_30CC0_298);
ZZ_MARK_TARGET(0x80030F6C,0x80030F74,ZZ_30CC0_2AC);
ZZ_MARK_TARGET(0x80030F74,0x80030FB4,ZZ_30CC0_2B4);
ZZ_MARK_TARGET(0x80030FB4,0x80030FC4,ZZ_30CC0_2F4);
ZZ_MARK_TARGET(0x80030FC4,0x80031004,ZZ_30CC0_304);
ZZ_MARK_TARGET(0x80031004,0x80031010,ZZ_30CC0_344);
ZZ_MARK_TARGET(0x80031010,0x80031024,ZZ_30CC0_350);
ZZ_MARK_TARGET(0x80031024,0x80031060,ZZ_30CC0_364);
ZZ_MARK_TARGET(0x80031060,0x80031070,ZZ_30CC0_3A0);
ZZ_MARK_TARGET(0x80031070,0x8003108C,ZZ_30CC0_3B0);
ZZ_MARK_TARGET(0x8003108C,0x800310D8,ZZ_30CC0_3CC);
ZZ_MARK_TARGET(0x800310D8,0x8003110C,ZZ_30CC0_418);
ZZ_MARK_TARGET(0x8003110C,0x80031120,ZZ_30CC0_44C);
ZZ_MARK_TARGET(0x80031120,0x8003113C,ZZ_30CC0_460);
ZZ_MARK_TARGET(0x8003113C,0x80031160,ZZ_30CC0_47C);
ZZ_MARK_TARGET(0x80031160,0x80031168,ZZ_30CC0_4A0);
ZZ_MARK_TARGET(0x80031168,0x80031178,ZZ_30CC0_4A8);
ZZ_MARK_TARGET(0x80031178,0x8003118C,ZZ_30CC0_4B8);
ZZ_MARK_TARGET(0x8003118C,0x800311B0,ZZ_30CC0_4CC);
