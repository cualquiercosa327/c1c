#ifdef ZZ_INCLUDE_CODE
ZZ_407C0:
	V0 = 0x80050000;
	V0 = EMU_ReadU8(V0 + 19054); //+ 0x4A6E
	SP -= 24;
	EMU_Write32(SP + 16,S0); //+ 0x10
	S0 = A0;
	V0 = V0 < 2;
	if (V0)
	{
		EMU_Write32(SP + 20,RA); //+ 0x14
		ZZ_CLOCKCYCLES(8,0x800407FC);
		goto ZZ_407C0_3C;
	}
	EMU_Write32(SP + 20,RA); //+ 0x14
	A0 = 0x80010000;
	A0 += 4848;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19048); //+ 0x4A68
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x800407FC; //ZZ_407C0_3C
	A1 = S0;
	ZZ_CLOCKCYCLES_JR(15);
	ZZ_JUMPREGISTER(0x8003D730,ZZ_3D730);
	ZZ_JUMPREGISTER_END();
ZZ_407C0_3C:
	A1 = S0;
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 19044); //+ 0x4A64
	A2 = R0;
	A0 = EMU_ReadU32(V0 + 24); //+ 0x18
	V0 = EMU_ReadU32(V0 + 8); //+ 0x8
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x80040820; //ZZ_407C0_60
	A3 = R0;
	ZZ_CLOCKCYCLES_JR(9);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,80040818)
	ZZ_JUMPREGISTER_END();
ZZ_407C0_60:
	RA = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 24;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x800172A4,ZZ_16E5C_448);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x800407C0,0x800407FC,ZZ_407C0);
ZZ_MARK_TARGET(0x800407FC,0x80040820,ZZ_407C0_3C);
ZZ_MARK_TARGET(0x80040820,0x80040834,ZZ_407C0_60);
