#ifdef ZZ_INCLUDE_CODE
ZZ_16D14:
	SP -= 40;
	A0 = R0;
	EMU_Write32(SP + 36,RA); //+ 0x24
	EMU_Write32(SP + 32,S2); //+ 0x20
	EMU_Write32(SP + 28,S1); //+ 0x1C
	RA = 0x80016D30; //ZZ_16D14_1C
	EMU_Write32(SP + 24,S0); //+ 0x18
	ZZ_CLOCKCYCLES(7,0x8004025C);
	goto ZZ_4025C;
ZZ_16D14_1C:
	V1 = 0x80060000;
	V1 -= 31744;
	V0 = EMU_ReadU32(V1);
	if ((int32_t)V0 <= 0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(6,0x80016D70);
		goto ZZ_16D14_5C;
	}
	S0 = R0;
	S2 = V1 + 16;
	S1 = S2;
	ZZ_CLOCKCYCLES(8,0x80016D50);
ZZ_16D14_3C:
	A0 = EMU_ReadU32(S1 + 116); //+ 0x74
	RA = 0x80016D5C; //ZZ_16D14_48
	S1 += 8328;
	ZZ_CLOCKCYCLES(3,0x80011C8C);
	goto ZZ_11C8C;
ZZ_16D14_48:
	V0 = EMU_ReadU32(S2 - 16); //+ 0xFFFFFFF0
	S0 += 1;
	V0 = (int32_t)S0 < (int32_t)V0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80016D50);
		goto ZZ_16D14_3C;
	}
	ZZ_CLOCKCYCLES(5,0x80016D70);
ZZ_16D14_5C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 26384); //+ 0x6710
	V1 = V0 - 25;
	V0 = V1 < 28;
	if (!V0)
	{
		V0 = V1 << 2;
		ZZ_CLOCKCYCLES(7,0x80016DAC);
		goto ZZ_16D14_98;
	}
	V0 = V1 << 2;
	AT = 0x80010000;
	AT += V0;
	V0 = EMU_ReadU32(AT + 840); //+ 0x348
	ZZ_JUMPREGISTER_BEGIN(V0);
	ZZ_CLOCKCYCLES_JR(13);
	ZZ_JUMPREGISTER(0x80016DA4,ZZ_16D14_90);
	ZZ_JUMPREGISTER(0x80016DAC,ZZ_16D14_98);
	ZZ_JUMPREGISTER_END();
ZZ_16D14_90:
	RA = 0x80016DAC; //ZZ_16D14_98
	ZZ_CLOCKCYCLES(2,0x8003CEA8);
	goto ZZ_3CEA8;
ZZ_16D14_98:
	V0 = -255;
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S2 = EMU_ReadU32(SP + 32); //+ 0x20
	S1 = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 40;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x80016470,ZZ_16420_50);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80016D14,0x80016D30,ZZ_16D14);
ZZ_MARK_TARGET(0x80016D30,0x80016D50,ZZ_16D14_1C);
ZZ_MARK_TARGET(0x80016D50,0x80016D5C,ZZ_16D14_3C);
ZZ_MARK_TARGET(0x80016D5C,0x80016D70,ZZ_16D14_48);
ZZ_MARK_TARGET(0x80016D70,0x80016DA4,ZZ_16D14_5C);
ZZ_MARK_TARGET(0x80016DA4,0x80016DAC,ZZ_16D14_90);
ZZ_MARK_TARGET(0x80016DAC,0x80016DCC,ZZ_16D14_98);
