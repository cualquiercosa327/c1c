#ifdef ZZ_INCLUDE_CODE
ZZ_4636C:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	V0 = 0x80050000;
	V0 = EMU_ReadU16(V0 + 22752); //+ 0x58E0
	SP -= 56;
	EMU_Write32(SP + 36,S1); //+ 0x24
	S1 = A1;
	EMU_Write32(SP + 52,RA); //+ 0x34
	EMU_Write32(SP + 48,S4); //+ 0x30
	EMU_Write32(SP + 44,S3); //+ 0x2C
	EMU_Write32(SP + 40,S2); //+ 0x28
	EMU_Write32(SP + 32,S0); //+ 0x20
	A1 = EMU_ReadU16(V1 + 430); //+ 0x1AE
	S2 = A0;
	EMU_Write16(V1 + 422,V0); //+ 0x1A6
	V0 = 0xD;
	EMU_Write32(SP + 20,V0); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (!V0)
	{
		S4 = A1 & 0x7FF;
		ZZ_CLOCKCYCLES(23,0x80046404);
		goto ZZ_4636C_98;
	}
	S4 = A1 & 0x7FF;
	ZZ_CLOCKCYCLES(23,0x800463C8);
ZZ_4636C_5C:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(15,0x800463C8);
		goto ZZ_4636C_5C;
	}
	ZZ_CLOCKCYCLES(15,0x80046404);
ZZ_4636C_98:
	if (!S1)
	{
		V0 = S1 < 65;
		ZZ_CLOCKCYCLES(2,0x800465E0);
		goto ZZ_4636C_274;
	}
	V0 = S1 < 65;
	S3 = 0xD;
	ZZ_CLOCKCYCLES(3,0x80046410);
ZZ_4636C_A4:
	if (V0)
	{
		S0 = S1;
		ZZ_CLOCKCYCLES(2,0x8004641C);
		goto ZZ_4636C_B0;
	}
	S0 = S1;
	S0 = 0x40;
	ZZ_CLOCKCYCLES(3,0x8004641C);
ZZ_4636C_B0:
	if ((int32_t)S0 <= 0)
	{
		V1 = R0;
		ZZ_CLOCKCYCLES(2,0x80046448);
		goto ZZ_4636C_DC;
	}
	V1 = R0;
	A0 = 0x80050000;
	A0 = EMU_ReadU32(A0 + 22756); //+ 0x58E4
	ZZ_CLOCKCYCLES(4,0x8004642C);
ZZ_4636C_C0:
	V0 = EMU_ReadU16(S2);
	S2 += 2;
	V1 += 2;
	EMU_Write16(A0 + 424,V0); //+ 0x1A8
	V0 = (int32_t)V1 < (int32_t)S0;
	if (V0)
	{
		ZZ_CLOCKCYCLES(7,0x8004642C);
		goto ZZ_4636C_C0;
	}
	ZZ_CLOCKCYCLES(7,0x80046448);
ZZ_4636C_DC:
	V1 = 0x80050000;
	V1 = EMU_ReadU32(V1 + 22756); //+ 0x58E4
	A0 = EMU_ReadU16(V1 + 426); //+ 0x1AA
	V0 = A0 & 0xFFCF;
	A0 = V0 | 0x10;
	EMU_Write16(V1 + 426,A0); //+ 0x1AA
	EMU_Write32(SP + 20,S3); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(12,0x800464A0);
	goto ZZ_4636C_134;
ZZ_4636C_10C:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800464A0);
ZZ_4636C_134:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80046478);
		goto ZZ_4636C_10C;
	}
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	AT = 0x80050000;
	EMU_Write32(AT + 22748,R0); //+ 0x58DC
	V0 &= 0x400;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(14,0x8004653C);
		goto ZZ_4636C_1D0;
	}
	ZZ_CLOCKCYCLES(14,0x800464D8);
ZZ_4636C_16C:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22748); //+ 0x58DC
	V0 += 1;
	AT = 0x80050000;
	EMU_Write32(AT + 22748,V0); //+ 0x58DC
	V0 = (int32_t)V0 < 5001;
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x8004651C);
		goto ZZ_4636C_1B0;
	}
	A0 = 0x80010000;
	A0 += 5728;
	A1 = 0x80010000;
	A1 += 5760;
	RA = 0x80046514; //ZZ_4636C_1A8
	ZZ_CLOCKCYCLES(15,0x8003D730);
	goto ZZ_3D730;
ZZ_4636C_1A8:
	ZZ_CLOCKCYCLES(2,0x8004653C);
	goto ZZ_4636C_1D0;
ZZ_4636C_1B0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	V0 &= 0x400;
	if (V0)
	{
		ZZ_CLOCKCYCLES(8,0x800464D8);
		goto ZZ_4636C_16C;
	}
	ZZ_CLOCKCYCLES(8,0x8004653C);
ZZ_4636C_1D0:
	EMU_Write32(SP + 20,S3); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(4,0x80046574);
	goto ZZ_4636C_208;
ZZ_4636C_1E0:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x80046574);
ZZ_4636C_208:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x8004654C);
		goto ZZ_4636C_1E0;
	}
	EMU_Write32(SP + 20,S3); //+ 0x14
	EMU_Write32(SP + 16,R0); //+ 0x10
	ZZ_CLOCKCYCLES(9,0x800465C0);
	goto ZZ_4636C_254;
ZZ_4636C_22C:
	V1 = EMU_ReadU32(SP + 20); //+ 0x14
	V0 = V1 << 1;
	V0 += V1;
	EMU_Write32(SP + 20,V0); //+ 0x14
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 += 1;
	EMU_Write32(SP + 16,V0); //+ 0x10
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_CLOCKCYCLES(10,0x800465C0);
ZZ_4636C_254:
	V0 = EMU_ReadU32(SP + 16); //+ 0x10
	V0 = (int32_t)V0 < 240;
	if (V0)
	{
		ZZ_CLOCKCYCLES(5,0x80046598);
		goto ZZ_4636C_22C;
	}
	S1 = S1 - S0;
	if (S1)
	{
		V0 = S1 < 65;
		ZZ_CLOCKCYCLES(8,0x80046410);
		goto ZZ_4636C_A4;
	}
	V0 = S1 < 65;
	ZZ_CLOCKCYCLES(8,0x800465E0);
ZZ_4636C_274:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	A0 = EMU_ReadU16(V0 + 426); //+ 0x1AA
	A0 &= 0xFFCF;
	EMU_Write16(V0 + 426,A0); //+ 0x1AA
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	A1 = S4 & 0xFFFF;
	AT = 0x80050000;
	EMU_Write32(AT + 22748,R0); //+ 0x58DC
	V0 &= 0x7FF;
	if (V0 == A1)
	{
		ZZ_CLOCKCYCLES(14,0x8004667C);
		goto ZZ_4636C_310;
	}
	ZZ_CLOCKCYCLES(14,0x80046618);
ZZ_4636C_2AC:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22748); //+ 0x58DC
	V0 += 1;
	AT = 0x80050000;
	EMU_Write32(AT + 22748,V0); //+ 0x58DC
	V0 = (int32_t)V0 < 5001;
	if (V0)
	{
		ZZ_CLOCKCYCLES(9,0x8004665C);
		goto ZZ_4636C_2F0;
	}
	A0 = 0x80010000;
	A0 += 5728;
	A1 = 0x80010000;
	A1 += 5780;
	RA = 0x80046654; //ZZ_4636C_2E8
	ZZ_CLOCKCYCLES(15,0x8003D730);
	goto ZZ_3D730;
ZZ_4636C_2E8:
	ZZ_CLOCKCYCLES(2,0x8004667C);
	goto ZZ_4636C_310;
ZZ_4636C_2F0:
	V0 = 0x80050000;
	V0 = EMU_ReadU32(V0 + 22756); //+ 0x58E4
	V0 = EMU_ReadU16(V0 + 430); //+ 0x1AE
	V0 &= 0x7FF;
	if (V0 != A1)
	{
		ZZ_CLOCKCYCLES(8,0x80046618);
		goto ZZ_4636C_2AC;
	}
	ZZ_CLOCKCYCLES(8,0x8004667C);
ZZ_4636C_310:
	RA = EMU_ReadU32(SP + 52); //+ 0x34
	S4 = EMU_ReadU32(SP + 48); //+ 0x30
	S3 = EMU_ReadU32(SP + 44); //+ 0x2C
	S2 = EMU_ReadU32(SP + 40); //+ 0x28
	S1 = EMU_ReadU32(SP + 36); //+ 0x24
	S0 = EMU_ReadU32(SP + 32); //+ 0x20
	SP += 56;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(9);
	ZZ_JUMPREGISTER(0x80046034,ZZ_45E50_1E4);
	ZZ_JUMPREGISTER(0x80046D34,ZZ_46CC8_6C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004636C,0x800463C8,ZZ_4636C);
ZZ_MARK_TARGET(0x800463C8,0x80046404,ZZ_4636C_5C);
ZZ_MARK_TARGET(0x80046404,0x80046410,ZZ_4636C_98);
ZZ_MARK_TARGET(0x80046410,0x8004641C,ZZ_4636C_A4);
ZZ_MARK_TARGET(0x8004641C,0x8004642C,ZZ_4636C_B0);
ZZ_MARK_TARGET(0x8004642C,0x80046448,ZZ_4636C_C0);
ZZ_MARK_TARGET(0x80046448,0x80046478,ZZ_4636C_DC);
ZZ_MARK_TARGET(0x80046478,0x800464A0,ZZ_4636C_10C);
ZZ_MARK_TARGET(0x800464A0,0x800464D8,ZZ_4636C_134);
ZZ_MARK_TARGET(0x800464D8,0x80046514,ZZ_4636C_16C);
ZZ_MARK_TARGET(0x80046514,0x8004651C,ZZ_4636C_1A8);
ZZ_MARK_TARGET(0x8004651C,0x8004653C,ZZ_4636C_1B0);
ZZ_MARK_TARGET(0x8004653C,0x8004654C,ZZ_4636C_1D0);
ZZ_MARK_TARGET(0x8004654C,0x80046574,ZZ_4636C_1E0);
ZZ_MARK_TARGET(0x80046574,0x80046598,ZZ_4636C_208);
ZZ_MARK_TARGET(0x80046598,0x800465C0,ZZ_4636C_22C);
ZZ_MARK_TARGET(0x800465C0,0x800465E0,ZZ_4636C_254);
ZZ_MARK_TARGET(0x800465E0,0x80046618,ZZ_4636C_274);
ZZ_MARK_TARGET(0x80046618,0x80046654,ZZ_4636C_2AC);
ZZ_MARK_TARGET(0x80046654,0x8004665C,ZZ_4636C_2E8);
ZZ_MARK_TARGET(0x8004665C,0x8004667C,ZZ_4636C_2F0);
ZZ_MARK_TARGET(0x8004667C,0x800466A0,ZZ_4636C_310);
