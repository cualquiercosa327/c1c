#ifdef ZZ_INCLUDE_CODE
ZZ_1BAB0:
	SP -= 48;
	EMU_Write32(SP + 32,S2); //+ 0x20
	S2 = A1;
	EMU_Write32(SP + 40,RA); //+ 0x28
	EMU_Write32(SP + 36,S3); //+ 0x24
	EMU_Write32(SP + 28,S1); //+ 0x1C
	EMU_Write32(SP + 24,S0); //+ 0x18
	A1 = EMU_ReadU32(S2 + 4); //+ 0x4
	S1 = A0;
	if (S1 == A1)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(11,0x8001BC84);
		goto ZZ_1BAB0_1D4;
	}
	V0 = R0;
	V0 = EMU_ReadU32(S1 + 32); //+ 0x20
	V0 = EMU_ReadU32(V0 + 16); //+ 0x10
	A0 = EMU_ReadU32(S2);
	V1 = EMU_ReadU32(V0 + 4); //+ 0x4
	V0 = 0x1;
	V1 = (int32_t)V1 >> 8;
	V0 <<= V1;
	V0 &= A0;
	if (!V0)
	{
		A0 = S1 + 128;
		ZZ_CLOCKCYCLES(22,0x8001BC80);
		goto ZZ_1BAB0_1D0;
	}
	A0 = S1 + 128;
	RA = 0x8001BB10; //ZZ_1BAB0_60
	A1 += 128;
	ZZ_CLOCKCYCLES(24,0x80029B90);
	goto ZZ_29B90;
ZZ_1BAB0_60:
	V1 = EMU_ReadU32(S2 + 12); //+ 0xC
	S3 = V0;
	V1 = (int32_t)S3 < (int32_t)V1;
	if (!V1)
	{
		A2 = 0xFF;
		ZZ_CLOCKCYCLES(5,0x8001BC80);
		goto ZZ_1BAB0_1D0;
	}
	A2 = 0xFF;
	A0 = EMU_ReadU32(S2 + 16); //+ 0x10
	if (A0 == A2)
	{
		V0 = (int32_t)A0 >> 8;
		ZZ_CLOCKCYCLES(9,0x8001BC68);
		goto ZZ_1BAB0_1B8;
	}
	V0 = (int32_t)A0 >> 8;
	A1 = EMU_ReadU32(S1 + 32); //+ 0x20
	V1 = EMU_ReadU32(A1 + 28); //+ 0x1C
	V0 <<= 1;
	V0 += V1;
	S0 = EMU_ReadU16(V0);
	if (S0 != A2)
	{
		V0 = S0 & 0x8000;
		ZZ_CLOCKCYCLES(18,0x8001BBC0);
		goto ZZ_1BAB0_110;
	}
	V0 = S0 & 0x8000;
	V0 = 0x300;
	if (A0 != V0)
	{
		ZZ_CLOCKCYCLES(21,0x8001BB8C);
		goto ZZ_1BAB0_DC;
	}
	A0 = EMU_ReadU32(S1 + 296); //+ 0x128
	V1 = EMU_ReadU32(S1 + 208); //+ 0xD0
	V0 = A0 - 3;
	V0 = V0 < 2;
	if (V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(27,0x8001BB8C);
		goto ZZ_1BAB0_DC;
	}
	V0 = 0x2;
	if (A0 == V0)
	{
		V0 = V1 & 0x2;
		ZZ_CLOCKCYCLES(29,0x8001BB8C);
		goto ZZ_1BAB0_DC;
	}
	V0 = V1 & 0x2;
	if (!V0)
	{
		ZZ_CLOCKCYCLES(31,0x8001BC68);
		goto ZZ_1BAB0_1B8;
	}
	ZZ_CLOCKCYCLES(31,0x8001BB8C);
ZZ_1BAB0_DC:
	V1 = EMU_ReadU32(S2 + 16); //+ 0x10
	V0 = 0xA00;
	if (V1 != V0)
	{
		V0 = 0x1D00;
		ZZ_CLOCKCYCLES(4,0x8001BBB0);
		goto ZZ_1BAB0_100;
	}
	V0 = 0x1D00;
	V0 = EMU_ReadU32(S1 + 288); //+ 0x120
	V0 &= 0x800;
	if (!V0)
	{
		V0 = 0x1D00;
		ZZ_CLOCKCYCLES(9,0x8001BC68);
		goto ZZ_1BAB0_1B8;
	}
	V0 = 0x1D00;
	ZZ_CLOCKCYCLES(9,0x8001BBB0);
ZZ_1BAB0_100:
	if (V1 == V0)
	{
		S0 = 0xFE;
		ZZ_CLOCKCYCLES(2,0x8001BC6C);
		goto ZZ_1BAB0_1BC;
	}
	S0 = 0xFE;
	V0 = R0;
	ZZ_CLOCKCYCLES(4,0x8001BC84);
	goto ZZ_1BAB0_1D4;
ZZ_1BAB0_110:
	if (V0)
	{
		V0 = S0 << 4;
		ZZ_CLOCKCYCLES(2,0x8001BC14);
		goto ZZ_1BAB0_164;
	}
	V0 = S0 << 4;
	V1 = EMU_ReadU32(A1 + 32); //+ 0x20
	A2 = EMU_ReadU32(S1 + 296); //+ 0x128
	A0 = EMU_ReadU32(S1 + 208); //+ 0xD0
	V0 += V1;
	V1 = A2 - 3;
	V1 = V1 < 2;
	A1 = EMU_ReadU32(V0);
	if (V1)
	{
		V0 = A0 | 0x1002;
		ZZ_CLOCKCYCLES(11,0x8001BBFC);
		goto ZZ_1BAB0_14C;
	}
	V0 = A0 | 0x1002;
	V0 = 0x2;
	if (A2 != V0)
	{
		V0 = A0 & A1;
		ZZ_CLOCKCYCLES(14,0x8001BC00);
		goto ZZ_1BAB0_150;
	}
	V0 = A0 & A1;
	V0 = A0 | 0x1002;
	ZZ_CLOCKCYCLES(15,0x8001BBFC);
ZZ_1BAB0_14C:
	V0 &= A1;
	ZZ_CLOCKCYCLES(1,0x8001BC00);
ZZ_1BAB0_150:
	if (V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8001BC84);
		goto ZZ_1BAB0_1D4;
	}
	V0 = R0;
	V0 = S0 & 0x8000;
	if (!V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(5,0x8001BC70);
		goto ZZ_1BAB0_1C0;
	}
	V0 = 0xFF;
	ZZ_CLOCKCYCLES(5,0x8001BC14);
ZZ_1BAB0_164:
	V1 = EMU_ReadU32(S2 + 16); //+ 0x10
	V0 = 0xF00;
	if (V1 != V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(4,0x8001BC70);
		goto ZZ_1BAB0_1C0;
	}
	V0 = 0xFF;
	A0 = S1;
	A1 = S0;
	V0 = 0x100;
	A2 = 0x1;
	V1 = EMU_ReadU32(S2 + 4); //+ 0x4
	A3 = SP + 16;
	EMU_Write32(SP + 16,V0); //+ 0x10
	RA = 0x8001BC48; //ZZ_1BAB0_198
	EMU_Write32(S1 + 124,V1); //+ 0x7C
	ZZ_CLOCKCYCLES(13,0x800252C0);
	goto ZZ_252C0;
ZZ_1BAB0_198:
	V0 = EMU_ReadU32(S2 + 4); //+ 0x4
	V0 = EMU_ReadU32(V0 + 248); //+ 0xF8
	if (V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(6,0x8001BC70);
		goto ZZ_1BAB0_1C0;
	}
	V0 = 0xFF;
	V0 = R0;
	ZZ_CLOCKCYCLES(8,0x8001BC84);
	goto ZZ_1BAB0_1D4;
ZZ_1BAB0_1B8:
	S0 = 0xFE;
	ZZ_CLOCKCYCLES(1,0x8001BC6C);
ZZ_1BAB0_1BC:
	V0 = 0xFF;
	ZZ_CLOCKCYCLES(1,0x8001BC70);
ZZ_1BAB0_1C0:
	if (S0 == V0)
	{
		V0 = R0;
		ZZ_CLOCKCYCLES(2,0x8001BC84);
		goto ZZ_1BAB0_1D4;
	}
	V0 = R0;
	EMU_Write32(S2 + 8,S1); //+ 0x8
	EMU_Write32(S2 + 12,S3); //+ 0xC
	ZZ_CLOCKCYCLES(4,0x8001BC80);
ZZ_1BAB0_1D0:
	V0 = R0;
	ZZ_CLOCKCYCLES(1,0x8001BC84);
ZZ_1BAB0_1D4:
	RA = EMU_ReadU32(SP + 40); //+ 0x28
	S3 = EMU_ReadU32(SP + 36); //+ 0x24
	S2 = EMU_ReadU32(SP + 32); //+ 0x20
	S1 = EMU_ReadU32(SP + 28); //+ 0x1C
	S0 = EMU_ReadU32(SP + 24); //+ 0x18
	SP += 48;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8001B7D4,ZZ_1B788_4C);
  //ZZ_JUMPREGISTER(0x80022938,ZZ_201DC_275C);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001BAB0,0x8001BB10,ZZ_1BAB0);
ZZ_MARK_TARGET(0x8001BB10,0x8001BB8C,ZZ_1BAB0_60);
ZZ_MARK_TARGET(0x8001BB8C,0x8001BBB0,ZZ_1BAB0_DC);
ZZ_MARK_TARGET(0x8001BBB0,0x8001BBC0,ZZ_1BAB0_100);
ZZ_MARK_TARGET(0x8001BBC0,0x8001BBFC,ZZ_1BAB0_110);
ZZ_MARK_TARGET(0x8001BBFC,0x8001BC00,ZZ_1BAB0_14C);
ZZ_MARK_TARGET(0x8001BC00,0x8001BC14,ZZ_1BAB0_150);
ZZ_MARK_TARGET(0x8001BC14,0x8001BC48,ZZ_1BAB0_164);
ZZ_MARK_TARGET(0x8001BC48,0x8001BC68,ZZ_1BAB0_198);
ZZ_MARK_TARGET(0x8001BC68,0x8001BC6C,ZZ_1BAB0_1B8);
ZZ_MARK_TARGET(0x8001BC6C,0x8001BC70,ZZ_1BAB0_1BC);
ZZ_MARK_TARGET(0x8001BC70,0x8001BC80,ZZ_1BAB0_1C0);
ZZ_MARK_TARGET(0x8001BC80,0x8001BC84,ZZ_1BAB0_1D0);
ZZ_MARK_TARGET(0x8001BC84,0x8001BCA4,ZZ_1BAB0_1D4);
