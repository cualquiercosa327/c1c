#ifdef ZZ_INCLUDE_CODE
ZZ_1A5F4:
	SP -= 32;
	EMU_Write32(SP + 24,S2); //+ 0x18
	S2 = A0;
	EMU_Write32(SP + 16,S0); //+ 0x10
	EMU_Write32(SP + 28,RA); //+ 0x1C
	EMU_Write32(SP + 20,S1); //+ 0x14
	V1 = EMU_ReadU8(A1);
	V0 = 0x2;
	if (V1 == V0)
	{
		S0 = A3;
		ZZ_CLOCKCYCLES(10,0x8001A630);
		goto ZZ_1A5F4_3C;
	}
	S0 = A3;
	V0 = 0x5;
	if (V1 == V0)
	{
		V0 = (int32_t)A2 >> 8;
		ZZ_CLOCKCYCLES(13,0x8001A640);
		goto ZZ_1A5F4_4C;
	}
	V0 = (int32_t)A2 >> 8;
	ZZ_CLOCKCYCLES(15,0x8001A64C);
	goto ZZ_1A5F4_58;
ZZ_1A5F4_3C:
	V0 = (int32_t)A2 >> 8;
	V0 <<= 3;
	V0 += 8;
	ZZ_CLOCKCYCLES(4,0x8001A648);
	goto ZZ_1A5F4_54;
ZZ_1A5F4_4C:
	V0 <<= 4;
	V0 += 12;
	ZZ_CLOCKCYCLES(2,0x8001A648);
ZZ_1A5F4_54:
	S1 = A1 + V0;
	ZZ_CLOCKCYCLES(1,0x8001A64C);
ZZ_1A5F4_58:
	RA = 0x8001A654; //ZZ_1A5F4_60
	A0 = A1 + 4;
	ZZ_CLOCKCYCLES(2,0x80015A98);
	goto ZZ_15A98;
ZZ_1A5F4_60:
	A1 = V0;
	A2 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = 0x1;
	if (S2 == V0)
	{
		V0 = 0x2;
		ZZ_CLOCKCYCLES(5,0x8001A6C4);
		goto ZZ_1A5F4_D0;
	}
	V0 = 0x2;
	if (S2 != V0)
	{
		V1 = A1 >> 10;
		ZZ_CLOCKCYCLES(7,0x8001A738);
		goto ZZ_1A5F4_144;
	}
	V1 = A1 >> 10;
	V1 &= 0x180;
	V0 = A2 >> 6;
	V0 &= 0x7F;
	V1 |= V0;
	A0 = EMU_ReadU8(S1 + 3); //+ 0x3
	V0 = A1 & 0x300;
	EMU_Write16(S0 + 2,V1); //+ 0x2
	A0 &= 0xF;
	A0 <<= 4;
	V0 |= A0;
	EMU_Write16(S0,V0);
	V0 = A2 >> 20;
	V0 &= 0x3;
	if (V0)
	{
		ZZ_CLOCKCYCLES(22,0x8001A6B4);
		goto ZZ_1A5F4_C0;
	}
	V0 = 0x10;
	ZZ_CLOCKCYCLES(24,0x8001A6B8);
	goto ZZ_1A5F4_C4;
ZZ_1A5F4_C0:
	V0 = 0x100;
	ZZ_CLOCKCYCLES(1,0x8001A6B8);
ZZ_1A5F4_C4:
	EMU_Write16(S0 + 4,V0); //+ 0x4
	V0 = 0x1;
	ZZ_CLOCKCYCLES(3,0x8001A734);
	goto ZZ_1A5F4_140;
ZZ_1A5F4_D0:
	V1 = A1 & 0x300;
	V0 = A2 >> 12;
	V0 &= 0xFE;
	V1 |= V0;
	EMU_Write16(S0,V1);
	V1 = A1 >> 10;
	V1 &= 0x180;
	V0 = A2 << 2;
	V0 &= 0x7C;
	V1 |= V0;
	V0 = A2 >> 22;
	V0 <<= 3;
	EMU_Write16(S0 + 2,V1); //+ 0x2
	V1 = 0x80050000;
	V1 += 6004;
	A0 = V0 + V1;
	V0 = EMU_ReadU8(A0 + 2); //+ 0x2
	V1 = V0 + 1;
	V0 = A2 >> 20;
	V0 &= 0x3;
	if (V0)
	{
		V0 = (int32_t)V1 >> 1;
		ZZ_CLOCKCYCLES(23,0x8001A724);
		goto ZZ_1A5F4_130;
	}
	V0 = (int32_t)V1 >> 1;
	V0 = (int32_t)V1 >> 2;
	ZZ_CLOCKCYCLES(24,0x8001A724);
ZZ_1A5F4_130:
	EMU_Write16(S0 + 4,V0); //+ 0x4
	V0 = EMU_ReadU8(A0 + 5); //+ 0x5
	V0 += 1;
	ZZ_CLOCKCYCLES(4,0x8001A734);
ZZ_1A5F4_140:
	EMU_Write16(S0 + 6,V0); //+ 0x6
	ZZ_CLOCKCYCLES(1,0x8001A738);
ZZ_1A5F4_144:
	RA = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	SP += 32;
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(7);
	ZZ_JUMPREGISTER(0x8001A8A8,ZZ_1A850_58);
	ZZ_JUMPREGISTER(0x8001A9B8,ZZ_1A850_168);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8001A5F4,0x8001A630,ZZ_1A5F4);
ZZ_MARK_TARGET(0x8001A630,0x8001A640,ZZ_1A5F4_3C);
ZZ_MARK_TARGET(0x8001A640,0x8001A648,ZZ_1A5F4_4C);
ZZ_MARK_TARGET(0x8001A648,0x8001A64C,ZZ_1A5F4_54);
ZZ_MARK_TARGET(0x8001A64C,0x8001A654,ZZ_1A5F4_58);
ZZ_MARK_TARGET(0x8001A654,0x8001A6B4,ZZ_1A5F4_60);
ZZ_MARK_TARGET(0x8001A6B4,0x8001A6B8,ZZ_1A5F4_C0);
ZZ_MARK_TARGET(0x8001A6B8,0x8001A6C4,ZZ_1A5F4_C4);
ZZ_MARK_TARGET(0x8001A6C4,0x8001A724,ZZ_1A5F4_D0);
ZZ_MARK_TARGET(0x8001A724,0x8001A734,ZZ_1A5F4_130);
ZZ_MARK_TARGET(0x8001A734,0x8001A738,ZZ_1A5F4_140);
ZZ_MARK_TARGET(0x8001A738,0x8001A754,ZZ_1A5F4_144);
