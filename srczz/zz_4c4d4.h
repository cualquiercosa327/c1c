#ifdef ZZ_INCLUDE_CODE
ZZ_4C4D4:
	SP -= 40;
	EMU_Write32(SP + 36,RA); //+ 0x24
	EMU_Write32(SP + 32,S4); //+ 0x20
	EMU_Write32(SP + 28,S3); //+ 0x1C
	EMU_Write32(SP + 24,S2); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	A1 <<= 16;
	S2 = (int32_t)A1 >> 16;
	V0 = S2 << 1;
	V0 += S2;
	V0 <<= 2;
	V0 = V0 - S2;
	V0 <<= 2;
	A0 <<= 16;
	S3 = (int32_t)A0 >> 16;
	V1 = S3 << 2;
	AT = 0x80060000;
	AT += V1;
	V1 = EMU_ReadU32(AT + 1048); //+ 0x418
	V0 = V0 - S2;
	V0 <<= 2;
	S1 = V0 + V1;
	A3 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = A3 + 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	S0 = EMU_ReadU8(A3);
	V0 = S0 & 0x80;
	if (!V0)
	{
		A0 = S0 & 0xF;
		ZZ_CLOCKCYCLES(32,0x8004C668);
		goto ZZ_4C4D4_194;
	}
	A0 = S0 & 0xF;
	A2 = S0 & 0xF0;
	V0 = 0xC0;
	if (A2 == V0)
	{
		EMU_Write8(S1 + 18,A0); //+ 0x12
		ZZ_CLOCKCYCLES(36,0x8004C5F4);
		goto ZZ_4C4D4_120;
	}
	EMU_Write8(S1 + 18,A0); //+ 0x12
	V0 = (int32_t)A2 < 193;
	if (!V0)
	{
		V0 = 0x90;
		ZZ_CLOCKCYCLES(39,0x8004C588);
		goto ZZ_4C4D4_B4;
	}
	V0 = 0x90;
	if (A2 == V0)
	{
		V0 = 0xB0;
		ZZ_CLOCKCYCLES(41,0x8004C5A4);
		goto ZZ_4C4D4_D0;
	}
	V0 = 0xB0;
	if (A2 == V0)
	{
		V0 = 0xB0;
		ZZ_CLOCKCYCLES(43,0x8004C5D0);
		goto ZZ_4C4D4_FC;
	}
	V0 = 0xB0;
	ZZ_CLOCKCYCLES(45,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_B4:
	V0 = 0xE0;
	if (A2 == V0)
	{
		V0 = 0xF0;
		ZZ_CLOCKCYCLES(3,0x8004C61C);
		goto ZZ_4C4D4_148;
	}
	V0 = 0xF0;
	if (A2 == V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(5,0x8004C634);
		goto ZZ_4C4D4_160;
	}
	V0 = 0xFF;
	ZZ_CLOCKCYCLES(7,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_D0:
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = 0x90;
	EMU_Write8(S1 + 17,V0); //+ 0x11
	V0 = V1 + 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	S0 = EMU_ReadU8(V1);
	V0 = V1 + 2;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	S4 = EMU_ReadU8(V1 + 1); //+ 0x1
	A0 = S3;
	ZZ_CLOCKCYCLES(11,0x8004C6C4);
	goto ZZ_4C4D4_1F0;
ZZ_4C4D4_FC:
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	EMU_Write8(S1 + 17,V0); //+ 0x11
	V0 = V1 + 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	A2 = EMU_ReadU8(V1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31888); //+ 0xFFFF8370
	A0 = S3;
	ZZ_CLOCKCYCLES(9,0x8004C658);
	goto ZZ_4C4D4_184;
ZZ_4C4D4_120:
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	V0 = 0xC0;
	EMU_Write8(S1 + 17,V0); //+ 0x11
	V0 = V1 + 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	A2 = EMU_ReadU8(V1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31900); //+ 0xFFFF8364
	A0 = S3;
	ZZ_CLOCKCYCLES(10,0x8004C658);
	goto ZZ_4C4D4_184;
ZZ_4C4D4_148:
	V0 = EMU_ReadU32(S1 + 4); //+ 0x4
	V1 = 0xE0;
	EMU_Write8(S1 + 17,V1); //+ 0x11
	V0 += 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	ZZ_CLOCKCYCLES(6,0x8004C714);
	goto ZZ_4C4D4_240;
ZZ_4C4D4_160:
	V1 = EMU_ReadU32(S1 + 4); //+ 0x4
	EMU_Write8(S1 + 17,V0); //+ 0x11
	EMU_Write8(S1 + 18,A0); //+ 0x12
	V0 = V1 + 1;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	A2 = EMU_ReadU8(V1);
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31892); //+ 0xFFFF836C
	A0 = S3;
	ZZ_CLOCKCYCLES(9,0x8004C658);
ZZ_4C4D4_184:
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C660; //ZZ_4C4D4_18C
	A1 = S2;
	ZZ_CLOCKCYCLES_JR(2);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C658)
	ZZ_JUMPREGISTER_END();
ZZ_4C4D4_18C:
	ZZ_CLOCKCYCLES(2,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_194:
	V1 = EMU_ReadU8(S1 + 17); //+ 0x11
	V0 = 0xC0;
	if (V1 == V0)
	{
		V0 = (int32_t)V1 < 193;
		ZZ_CLOCKCYCLES(4,0x8004C704);
		goto ZZ_4C4D4_230;
	}
	V0 = (int32_t)V1 < 193;
	if (!V0)
	{
		V0 = 0x90;
		ZZ_CLOCKCYCLES(6,0x8004C698);
		goto ZZ_4C4D4_1C4;
	}
	V0 = 0x90;
	if (V1 == V0)
	{
		V0 = 0xB0;
		ZZ_CLOCKCYCLES(8,0x8004C6B4);
		goto ZZ_4C4D4_1E0;
	}
	V0 = 0xB0;
	if (V1 == V0)
	{
		ZZ_CLOCKCYCLES(10,0x8004C6F4);
		goto ZZ_4C4D4_220;
	}
	ZZ_CLOCKCYCLES(12,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_1C4:
	V0 = 0xE0;
	if (V1 == V0)
	{
		V0 = 0xFF;
		ZZ_CLOCKCYCLES(3,0x8004C714);
		goto ZZ_4C4D4_240;
	}
	V0 = 0xFF;
	if (V1 == V0)
	{
		A0 = S3;
		ZZ_CLOCKCYCLES(5,0x8004C730);
		goto ZZ_4C4D4_25C;
	}
	A0 = S3;
	ZZ_CLOCKCYCLES(7,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_1E0:
	V0 = A3 + 2;
	EMU_Write32(S1 + 4,V0); //+ 0x4
	S4 = EMU_ReadU8(A3 + 1); //+ 0x1
	A0 = S3;
	ZZ_CLOCKCYCLES(4,0x8004C6C4);
ZZ_4C4D4_1F0:
	RA = 0x8004C6CC; //ZZ_4C4D4_1F8
	A1 = S2;
	ZZ_CLOCKCYCLES(2,0x8004AEB8);
	goto ZZ_4AEB8;
ZZ_4C4D4_1F8:
	EMU_Write32(S1 + 136,V0); //+ 0x88
	A0 = S3;
	A1 = S2;
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31904); //+ 0xFFFF8360
	A2 = S0;
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C6EC; //ZZ_4C4D4_218
	A3 = S4;
	ZZ_CLOCKCYCLES_JR(8);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C6E4)
	ZZ_JUMPREGISTER_END();
ZZ_4C4D4_218:
	ZZ_CLOCKCYCLES(2,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_220:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31888); //+ 0xFFFF8370
	A0 = S3;
	ZZ_CLOCKCYCLES(4,0x8004C738);
	goto ZZ_4C4D4_264;
ZZ_4C4D4_230:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31900); //+ 0xFFFF8364
	A0 = S3;
	ZZ_CLOCKCYCLES(4,0x8004C738);
	goto ZZ_4C4D4_264;
ZZ_4C4D4_240:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31896); //+ 0xFFFF8368
	A0 = S3;
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C728; //ZZ_4C4D4_254
	A1 = S2;
	ZZ_CLOCKCYCLES_JR(5);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C720)
	ZZ_JUMPREGISTER_END();
ZZ_4C4D4_254:
	ZZ_CLOCKCYCLES(2,0x8004C744);
	goto ZZ_4C4D4_270;
ZZ_4C4D4_25C:
	V0 = 0x80060000;
	V0 = EMU_ReadU32(V0 - 31892); //+ 0xFFFF836C
	ZZ_CLOCKCYCLES(2,0x8004C738);
ZZ_4C4D4_264:
	A1 = S2;
	ZZ_JUMPREGISTER_BEGIN(V0);
	RA = 0x8004C744; //ZZ_4C4D4_270
	A2 = S0;
	ZZ_CLOCKCYCLES_JR(3);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (V0,8004C73C)
	ZZ_JUMPREGISTER_END();
ZZ_4C4D4_270:
	RA = EMU_ReadU32(SP + 36); //+ 0x24
	S4 = EMU_ReadU32(SP + 32); //+ 0x20
	S3 = EMU_ReadU32(SP + 28); //+ 0x1C
	S2 = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 40;
	ZZ_CLOCKCYCLES_JR(8);
	ZZ_JUMPREGISTER(0x8004C490,ZZ_4C3C8_C8);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004C4D4,0x8004C588,ZZ_4C4D4);
ZZ_MARK_TARGET(0x8004C588,0x8004C5A4,ZZ_4C4D4_B4);
ZZ_MARK_TARGET(0x8004C5A4,0x8004C5D0,ZZ_4C4D4_D0);
ZZ_MARK_TARGET(0x8004C5D0,0x8004C5F4,ZZ_4C4D4_FC);
ZZ_MARK_TARGET(0x8004C5F4,0x8004C61C,ZZ_4C4D4_120);
ZZ_MARK_TARGET(0x8004C61C,0x8004C634,ZZ_4C4D4_148);
ZZ_MARK_TARGET(0x8004C634,0x8004C658,ZZ_4C4D4_160);
ZZ_MARK_TARGET(0x8004C658,0x8004C660,ZZ_4C4D4_184);
ZZ_MARK_TARGET(0x8004C660,0x8004C668,ZZ_4C4D4_18C);
ZZ_MARK_TARGET(0x8004C668,0x8004C698,ZZ_4C4D4_194);
ZZ_MARK_TARGET(0x8004C698,0x8004C6B4,ZZ_4C4D4_1C4);
ZZ_MARK_TARGET(0x8004C6B4,0x8004C6C4,ZZ_4C4D4_1E0);
ZZ_MARK_TARGET(0x8004C6C4,0x8004C6CC,ZZ_4C4D4_1F0);
ZZ_MARK_TARGET(0x8004C6CC,0x8004C6EC,ZZ_4C4D4_1F8);
ZZ_MARK_TARGET(0x8004C6EC,0x8004C6F4,ZZ_4C4D4_218);
ZZ_MARK_TARGET(0x8004C6F4,0x8004C704,ZZ_4C4D4_220);
ZZ_MARK_TARGET(0x8004C704,0x8004C714,ZZ_4C4D4_230);
ZZ_MARK_TARGET(0x8004C714,0x8004C728,ZZ_4C4D4_240);
ZZ_MARK_TARGET(0x8004C728,0x8004C730,ZZ_4C4D4_254);
ZZ_MARK_TARGET(0x8004C730,0x8004C738,ZZ_4C4D4_25C);
ZZ_MARK_TARGET(0x8004C738,0x8004C744,ZZ_4C4D4_264);
ZZ_MARK_TARGET(0x8004C744,0x8004C764,ZZ_4C4D4_270);
