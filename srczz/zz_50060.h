#ifdef ZZ_INCLUDE_CODE
ZZ_50060:
	V0 = 0x80060000;
	V0 = EMU_ReadU8(V0 - 7360); //+ 0xFFFFE340
	SP -= 32;
	EMU_Write32(SP + 24,RA); //+ 0x18
	EMU_Write32(SP + 20,S1); //+ 0x14
	EMU_Write32(SP + 16,S0); //+ 0x10
	if (!V0)
	{
		S0 = R0;
		ZZ_CLOCKCYCLES(8,0x800500E4);
		goto ZZ_50060_84;
	}
	S0 = R0;
	V0 = A0 << 16;
	S1 = (int32_t)V0 >> 16;
	V0 = S0 & 0xFF;
	ZZ_CLOCKCYCLES(11,0x8005008C);
ZZ_50060_2C:
	V1 = V0 << 1;
	V1 += V0;
	V1 <<= 2;
	V1 += V0;
	V1 <<= 2;
	AT = 0x80050000;
	AT += V1;
	V0 = EMU_ReadS16(AT + 29370); //+ 0x72BA
	if (V0 != S1)
	{
		V0 = S0 & 0xFF;
		ZZ_CLOCKCYCLES(11,0x800500C8);
		goto ZZ_50060_68;
	}
	V0 = S0 & 0xFF;
	AT = 0x80060000;
	EMU_Write16(AT - 6798,V0); //+ 0xFFFFE572
	RA = 0x800500C8; //ZZ_50060_68
	A0 = R0;
	ZZ_CLOCKCYCLES(15,0x8004F0D4);
	goto ZZ_4F0D4;
ZZ_50060_68:
	V1 = 0x80060000;
	V1 = EMU_ReadU8(V1 - 7360); //+ 0xFFFFE340
	S0 += 1;
	V0 = S0 & 0xFF;
	V0 = V0 < V1;
	if (V0)
	{
		V0 = S0 & 0xFF;
		ZZ_CLOCKCYCLES(7,0x8005008C);
		goto ZZ_50060_2C;
	}
	V0 = S0 & 0xFF;
	ZZ_CLOCKCYCLES(7,0x800500E4);
ZZ_50060_84:
	RA = EMU_ReadU32(SP + 24); //+ 0x18
	S1 = EMU_ReadU32(SP + 20); //+ 0x14
	S0 = EMU_ReadU32(SP + 16); //+ 0x10
	ZZ_JUMPREGISTER_BEGIN(RA);
	SP += 32;
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80049298,ZZ_49268_30);
	ZZ_JUMPREGISTER(0x8004C364,ZZ_4C300_64);
	ZZ_JUMPREGISTER(0x8004C888,ZZ_4C7CC_BC);
	ZZ_JUMPREGISTER(0x8004AD40,ZZ_4A9FC_344);
	ZZ_JUMPREGISTER(0x8004AD34,ZZ_4A9FC_338);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x80050060,0x8005008C,ZZ_50060);
ZZ_MARK_TARGET(0x8005008C,0x800500C8,ZZ_50060_2C);
ZZ_MARK_TARGET(0x800500C8,0x800500E4,ZZ_50060_68);
ZZ_MARK_TARGET(0x800500E4,0x800500F8,ZZ_50060_84);
