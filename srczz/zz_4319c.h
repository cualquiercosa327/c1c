#ifdef ZZ_INCLUDE_CODE
ZZ_4319C:
	AT = 0x80050000;
	EMU_Write32(AT + 26264,RA); //+ 0x6698
	RA = 0x800431AC; //ZZ_4319C_10
	ZZ_CLOCKCYCLES(4,0x8003E1F8);
	goto ZZ_3E1F8;
ZZ_4319C_10:
	T2 = 176;
	ZZ_JUMPREGISTER_BEGIN(T2);
	RA = 0x800431B8; //ZZ_4319C_1C
	T1 = 86;
	ZZ_CLOCKCYCLES_JR(3);
	// UNIMPLEMENTED JUMP-TO-REGISTER-AND-LINK (T2,800431B0)
	ZZ_JUMPREGISTER_END();
ZZ_4319C_1C:
	T2 = 0x80040000;
	T1 = 0x80040000;
	V0 = EMU_ReadU32(V0 + 24); //+ 0x18
	T2 += 12804;
	T1 += 12860;
	ZZ_CLOCKCYCLES(5,0x800431CC);
ZZ_4319C_30:
	V1 = EMU_ReadU32(T2);
	T2 += 4;
	V0 += 4;
	if (T2 != T1)
	{
		EMU_Write32(V0 - 4,V1); //+ 0xFFFFFFFC
		ZZ_CLOCKCYCLES(5,0x800431CC);
		goto ZZ_4319C_30;
	}
	EMU_Write32(V0 - 4,V1); //+ 0xFFFFFFFC
	RA = 0x800431E8; //ZZ_4319C_4C
	ZZ_CLOCKCYCLES(7,0x8004323C);
	goto ZZ_4323C;
ZZ_4319C_4C:
	RA = 0x800431F0; //ZZ_4319C_54
	ZZ_CLOCKCYCLES(2,0x8003E208);
	goto ZZ_3E208;
ZZ_4319C_54:
	RA = 0x80050000;
	RA = EMU_ReadU32(RA + 26264); //+ 0x6698
	ZZ_JUMPREGISTER_BEGIN(RA);
	ZZ_CLOCKCYCLES_JR(5);
	ZZ_JUMPREGISTER(0x80042B2C,ZZ_42B1C_10);
	ZZ_JUMPREGISTER_END();
#endif
ZZ_MARK_TARGET(0x8004319C,0x800431AC,ZZ_4319C);
ZZ_MARK_TARGET(0x800431AC,0x800431B8,ZZ_4319C_10);
ZZ_MARK_TARGET(0x800431B8,0x800431CC,ZZ_4319C_1C);
ZZ_MARK_TARGET(0x800431CC,0x800431E8,ZZ_4319C_30);
ZZ_MARK_TARGET(0x800431E8,0x800431F0,ZZ_4319C_4C);
ZZ_MARK_TARGET(0x800431F0,0x80043204,ZZ_4319C_54);
